[
  
  {
    "title": "Vive Coding: The Future of AI-Driven Development with Purpose",
    "url": "/posts/vive-coding-future-of-ai-driven-development/",
    "categories": "Artificial Intelligence (AI), Vive Coding",
    "tags": "AI, vivecoding, future",
    "date": "2025-04-02 10:20:18 +0545",
    





    
    "snippet": "Software development is undergoing a transformation. Traditionally, coding required deep knowledge of syntax, algorithms, and frameworks. But with the rise of AI-powered tools, a new paradigm has e...",
    "content": "Software development is undergoing a transformation. Traditionally, coding required deep knowledge of syntax, algorithms, and frameworks. But with the rise of AI-powered tools, a new paradigm has emerged: Vibe Coding‚Äîa style of development where programmers instruct AI to write code based on natural language prompts, focusing on creativity rather than manual coding.At the same time, a complementary philosophy is gaining traction: VIVE Coding‚Äîa mindset that emphasizes Visibility, Intent, Value, and Efficiency in programming. Together, these approaches shape the future of software development, blending AI automation with human-driven clarity and purpose.What is Vibe Coding?1. AI-Driven CodingVibe coding leverages the power of AI, particularly large language models (LLMs), to generate code from user-provided descriptions. Instead of writing code line by line, developers describe the desired functionality, and AI translates it into executable code.2. Focus on Ideas, Not SyntaxRather than getting bogged down in technical details, developers can concentrate on the bigger picture‚Äîconcepts, features, and user experience. The AI handles syntax, logic, and implementation details, allowing programmers to act as architects rather than bricklayers.3. Natural Language PromptsUsers describe what they want the software to do in everyday language, and AI tools generate the necessary code. For example, instead of manually crafting a complex SQL query, a user could simply state:  ‚ÄúCreate a social media management dashboard showing analytics, scheduled posts, and engagement metrics across platforms.‚ÄùAI would then generate the corresponding backend and frontend code.Advocates:Some argue that vibe coding allows even non-developers to create software, shifting the programmer‚Äôs role from manual coding to guiding, testing, and refining the AI-generated code.Criticism:Others question the accuracy and reliability of AI-generated code, especially for complex applications, and whether it can truly replace the skills of a software engineer.The Four Pillars of VIVE CodingWhile AI enhances coding efficiency, human developers must ensure that the generated code is maintainable, clear, and purposeful. This is where VIVE Coding comes into play. It is a philosophy that ensures code remains:1. Visibility ‚Äì Write Code That Speaks for ItselfReadable, well-structured code reduces cognitive load for both the original developer and future maintainers.‚úÖ Do:  Use meaningful variable and function names (calculateTotalPrice instead of calc).  Follow consistent formatting and indentation.  Break down complex logic into smaller, well-named functions.‚ùå Avoid:  Cryptic abbreviations (tmp, x, data1).  Overly clever one-liners that sacrifice readability.2. Intent ‚Äì Make Your Code‚Äôs Purpose ClearEvery line of code should have a clear reason for existing.‚úÖ Do:  Use comments sparingly, only to explain why (not what).  Structure code to reflect business logic.  Avoid ‚Äúmagic numbers‚Äù by using named constants (MAX_RETRIES = 3 instead of if (retries &lt; 3)).‚ùå Avoid:  Writing code that ‚Äújust works‚Äù without explaining its role.  Mixing multiple responsibilities in a single function.3. Value ‚Äì Focus on What Truly MattersNot all code needs to be perfect‚Äîfocus on delivering real value.‚úÖ Do:  Solve the immediate problem first, then refactor.  Avoid over-engineering (‚ÄúYou Ain‚Äôt Gonna Need It‚Äù ‚Äì YAGNI).  Write tests for critical logic but don‚Äôt obsess over 100% coverage for trivial code.‚ùå Avoid:  Premature optimization before identifying bottlenecks.  Adding unnecessary abstractions ‚Äújust in case.‚Äù4. Efficiency ‚Äì Write Performant (But Readable) CodeEfficiency matters, but not at the cost of maintainability.‚úÖ Do:  Optimize only after profiling and identifying real bottlenecks.  Use efficient algorithms (e.g., prefer O(n) over O(n¬≤)).  Leverage built-in language features for better performance.‚ùå Avoid:  Micro-optimizations that make code harder to read.  Ignoring performance entirely in favor of ‚Äúclean code.‚ÄùThe Future of CodingThe term ‚ÄúVibe Coding‚Äù was coined by Andrej Karpathy in February 2025. As AI models continue to improve, the role of software developers is shifting from manual coding to guiding, testing, and refining AI-generated code. But AI cannot fully replace human oversight‚Äîdevelopers must ensure their code adheres to VIVE principles for clarity, maintainability, and long-term value.How to Apply VIVE Coding in Your Projects  Start Small ‚Äì Refactor a single function to be more visible and intentional.  Review Code with VIVE in Mind ‚Äì Ask:          Is this easy to understand?      Does it clearly express its purpose?      Does it provide real value?      Is it efficient enough for its use case?        Iterate ‚Äì Continuously improve code readability and efficiency without over-engineering.Final ThoughtsVibe Coding and VIVE Coding together represent the future of software development‚Äîblending AI-powered automation with human-driven clarity and structure. While AI helps accelerate development, programmers must ensure that code remains visible, intentional, valuable, and efficient.üöÄ Challenge: Pick a piece of your recent code and refactor it using VIVE principles. Notice how much easier it becomes to read and modify!Vive Coding! üöÄ"
  },
  
  {
    "title": "Tailwind CSS Mastery Guide",
    "url": "/posts/tailwind-cheatsheet/",
    "categories": "Tailwind CSS, UI, cheatsheet",
    "tags": "css, tailwind_css, UI, cheatsheet",
    "date": "2025-04-01 12:20:18 +0545",
    





    
    "snippet": "Here‚Äôs a comprehensive list of Tailwind CSS utility categories and their class name prefixes to help you master Tailwind:Tailwind CSS Mastery GuideLayout            Category      Prefixes/Classes  ...",
    "content": "Here‚Äôs a comprehensive list of Tailwind CSS utility categories and their class name prefixes to help you master Tailwind:Tailwind CSS Mastery GuideLayout            Category      Prefixes/Classes                  Container      container              Display      block, inline-block, inline, flex, inline-flex, grid, inline-grid              Box Sizing      box-border, box-content              Float      float-right, float-left, float-none              Clear      clear-left, clear-right, clear-both, clear-none              Position      static, fixed, absolute, relative, sticky              Top/Right/Bottom/Left      top-0, right-0, bottom-0, left-0 (with various sizes)              Visibility      visible, invisible, collapse              Z-Index      z-0 to z-50, z-auto      Flexbox            Category      Prefixes/Classes                  Flex Direction      flex-row, flex-row-reverse, flex-col, flex-col-reverse              Flex Wrap      flex-wrap, flex-wrap-reverse, flex-nowrap              Flex      flex-1, flex-auto, flex-initial, flex-none              Flex Grow      grow, grow-0              Flex Shrink      shrink, shrink-0              Order      order-1 to order-12, order-first, order-last, order-none              Justify Content      justify-start, justify-end, justify-center, justify-between, etc.              Align Items      items-start, items-end, items-center, items-baseline, etc.      Grid            Category      Prefixes/Classes                  Grid Template Columns      grid-cols-1 to grid-cols-12, grid-cols-none              Grid Column Start/End      col-start-1, col-end-3, etc.              Grid Template Rows      grid-rows-1 to grid-rows-6, grid-rows-none              Gap      gap-0 to gap-96 (also gap-x-*, gap-y-*)      Spacing            Category      Prefixes/Classes                  Padding      p-0 to p-96 (also pt-*, pr-*, pb-*, pl-*, px-*, py-*)              Margin      m-0 to m-96 (also mt-*, mr-*, mb-*, ml-*, mx-*, my-*)              Space Between      space-x-*, space-y-*      Sizing            Category      Prefixes/Classes                  Width      w-0 to w-96, w-auto, w-full, w-screen, w-min, w-max              Min-Width      min-w-0, min-w-full, min-w-min, min-w-max              Height      h-0 to h-96, h-auto, h-full, h-screen      Typography            Category      Prefixes/Classes                  Font Family      font-sans, font-serif, font-mono              Font Size      text-xs to text-9xl              Font Weight      font-thin to font-black              Text Color      text-{color}-{shade} (e.g., text-red-500)              Text Align      text-left, text-center, text-right, text-justify      Backgrounds            Category      Prefixes/Classes                  Background Color      bg-{color}-{shade} (e.g., bg-blue-500)              Background Opacity      bg-opacity-0 to bg-opacity-100              Background Position      bg-bottom, bg-center, bg-left, etc.              Background Gradient      bg-gradient-to-{direction} (e.g., bg-gradient-to-r)      Borders            Category      Prefixes/Classes                  Border Radius      rounded, rounded-t, rounded-r, rounded-b, rounded-l, etc.              Border Width      border, border-0 to border-8, border-t, border-r, etc.              Border Color      border-{color}-{shade} (e.g., border-gray-300)      Effects            Category      Prefixes/Classes                  Box Shadow      shadow-sm, shadow, shadow-md, shadow-lg, shadow-xl, shadow-2xl              Opacity      opacity-0 to opacity-100      Transitions &amp; Animation            Category      Prefixes/Classes                  Transition Duration      duration-75 to duration-1000              Animation      animate-none, animate-spin, animate-ping, animate-pulse      Interactivity            Category      Prefixes/Classes                  Cursor      cursor-auto, cursor-pointer, cursor-wait, etc.              User Select      select-none, select-text, select-all, select-auto      Pseudo-class Variants  Hover: hover:  Focus: focus:  Active: active:  Responsive: sm:, md:, lg:, xl:, 2xl:  Dark mode: dark:"
  },
  
  {
    "title": "Streamlining Development with CircleCI: A Guide to Continuous Integration and Delivery",
    "url": "/posts/circle-ci/",
    "categories": "CircleCI",
    "tags": "continuous_integration, continuous_deployment",
    "date": "2025-03-27 04:50:00 +0545",
    





    
    "snippet": "In the fast-paced world of software development, delivering high-quality applications rapidly and reliably is paramount. CircleCI, a leading continuous integration and delivery (CI/CD) platform, ha...",
    "content": "In the fast-paced world of software development, delivering high-quality applications rapidly and reliably is paramount. CircleCI, a leading continuous integration and delivery (CI/CD) platform, has emerged as a favorite among developers seeking to optimize their workflows and automate processes. In this blog, we‚Äôll explore what CircleCI is, its key features, and how it can transform your development pipeline.What is CircleCI?CircleCI is a cloud-based or on-premises CI/CD platform that automates the process of building, testing, and deploying software. It supports various programming languages, frameworks, and cloud environments, making it highly versatile for diverse teams and projects. By enabling developers to catch bugs early and streamline deployments, CircleCI helps teams ship high-quality code faster.Key Features of CircleCI  Customizable Workflows: CircleCI allows you to create complex workflows with multiple jobs and steps, tailored to your project‚Äôs needs. This flexibility ensures a smooth and efficient build process.  Integration-Friendly: With built-in support for popular tools like Docker, Kubernetes, GitHub, and Bitbucket, CircleCI fits seamlessly into your existing development ecosystem.  Parallelism: Speed up your pipeline by running tests and builds in parallel across multiple machines.  Automated Testing: CircleCI provides tools for automated testing, ensuring that every code change is vetted before it reaches production.  Insights Dashboard: Gain visibility into your workflows with detailed analytics, helping teams identify bottlenecks and optimize processes.Benefits of Using CircleCI  Faster Development: Automating builds and tests reduces manual effort, freeing up time for developers to focus on coding.  Higher Quality Code: Early bug detection and thorough testing lead to more stable releases.  Scalability: Whether you‚Äôre a small startup or a large enterprise, CircleCI scales to meet your needs.  Cost-Effective: By saving time and reducing errors, CircleCI ultimately lowers development costs.How to Get Started with CircleCIGetting started with CircleCI is straightforward:  Sign Up: Create an account on the CircleCI website.  Connect Your Repository: Link your GitHub, Bitbucket, or other version control system to CircleCI.  Configure Your Workflow: Write a .circleci/config.yml file to define your build and test steps.  Run Your Pipeline: Push code changes to your repository, and CircleCI will automatically run the configured workflows.In the screenshot, we see a visual representation of CircleCI‚Äôs feedback mechanism. When tests fail, CircleCI prominently displays a red flag, alerting developers to issues that need immediate attention. Conversely, successful tests are marked with a reassuring green indicator, signifying that the pipeline has been executed without errors. This clear and intuitive color-coding system allows teams to quickly assess the status of their builds and prioritize their tasks effectively. By making feedback visually distinct, CircleCI ensures that developers can respond to changes with speed and confidence.Final ThoughtsCircleCI is a powerful tool for teams looking to modernize their development workflows and embrace automation. With its robust feature set and ease of use, CircleCI has become an essential part of the CI/CD landscape. Whether you‚Äôre deploying web applications, mobile apps, or complex microservices, CircleCI can help you achieve faster, more reliable releases."
  },
  
  {
    "title": "Mastering Ruby Memory Management: A Practical Guide to Profiling and Optimization",
    "url": "/posts/memory-profiler-for-performance-optimization/",
    "categories": "Ruby, Performance, Ruby on Rails",
    "tags": "ruby, performance, profiling, ruby on rails",
    "date": "2025-03-20 12:24:00 +0545",
    





    
    "snippet": "Memory usage is often the silent performance killer in Ruby applications. While we frequently focus on execution speed, memory consumption can cause slowdowns, unexpected crashes, and increased hos...",
    "content": "Memory usage is often the silent performance killer in Ruby applications. While we frequently focus on execution speed, memory consumption can cause slowdowns, unexpected crashes, and increased hosting costs. In this guide, I‚Äôll walk you through practical techniques for tracking and optimizing memory usage in Ruby and Rails applications using the powerful memory_profiler gem.Why Memory MattersMemory issues in Ruby apps typically manifest in several ways:  Slow performance: Memory bloat forces the garbage collector to work overtime  Random crashes: Out-of-memory errors  Steadily increasing memory usage: Signs of memory leaks  Excessive hosting costs: Needing larger instances to handle memory requirementsLet‚Äôs dive into how to identify and solve these issues.Setting Up Memory ProfilerFirst, you‚Äôll need to install the memory_profiler gem:# In your Gemfilegem 'memory_profiler'# Or install it globally# gem install memory_profilerThen, install the gems:bundle installBasic Memory ProfilingLet‚Äôs start with a simple example. Create a file named memory_test.rb:require 'memory_profiler'# Set up logging to a file (optional but recommended)log_file = File.new('memory_profile.log', 'w')$stdout = log_file$stdout.sync = truereport = MemoryProfiler.report do  # The code you want to profile  array = Array.new(1_000_000) { |i| \"string #{i}\" }end# Print the reportreport.pretty_printRun it:ruby memory_test.rbNow look at memory_profile.log. The most important lines are at the top:Total allocated: 120,000,816 bytes (2,000,002 objects)Total retained:  120,000,816 bytes (2,000,002 objects)This tells you:  How much memory was allocated during execution  How much remained in use after execution (not garbage collected)Profiling Rails ApplicationsFor Rails applications, here‚Äôs how to profile a specific action or process:# In a controller or jobdef expensive_action  data = nil    report = MemoryProfiler.report do    # Code to profile    data = User.includes(:posts, :comments)              .where(active: true)              .map { |u| u.attributes.merge(post_count: u.posts.size) }  end    # Save the report to a file  File.open(\"#{Rails.root}/log/memory_profile_#{Time.now.to_i}.log\", 'w') do |file|    report.pretty_print(to_file: file)  end    render json: dataendMemory Optimization TechniquesNow that you can measure memory usage, let‚Äôs look at common memory optimization strategies with real examples.1. Use Batching for Large CollectionsProblem:# Memory-intensive approachreport = MemoryProfiler.report do  users = User.all  processed_users = users.map do |user|    # Process each user    process_user_data(user)  endendreport.pretty_printSolution:# Memory-optimized approachreport = MemoryProfiler.report do  processed_users = []  User.find_each(batch_size: 100) do |user|    processed_users &lt;&lt; process_user_data(user)  endendreport.pretty_printUsing find_each with batching reduces memory usage by loading records in smaller chunks rather than all at once.2. Optimize String OperationsProblem:report = MemoryProfiler.report do  result = \"\"  1000.times do |i|    result += \"Adding string #{i}. \"  # Creates a new string each time  endendreport.pretty_printSolution:report = MemoryProfiler.report do  chunks = []  1000.times do |i|    chunks &lt;&lt; \"Adding string #{i}. \"  end  result = chunks.joinendreport.pretty_printThe second approach allocates fewer intermediate string objects, reducing memory churn.3. Avoid Unnecessary Object CreationProblem:report = MemoryProfiler.report do  users = User.all.to_a  users.each do |user|    # Creating temporary hash for each user    user_data = {      id: user.id,      name: user.name,      email: user.email,      # Many more attributes      created_at: user.created_at    }    process_data(user_data)  endendreport.pretty_printSolution:report = MemoryProfiler.report do  User.select(:id, :name, :email, :created_at).find_each do |user|    # Use the ActiveRecord object directly    process_data(user)  endendreport.pretty_printThis approach reduces memory by:  Selecting only needed columns  Avoiding unnecessary hash creation  Processing in batches4. Identify Memory-Heavy GemsThe memory profiler report includes a breakdown of memory allocation by gem:allocated memory by gem----------------------------------- 42462489  activesupport-7.0.4 24595828  activerecord-7.0.4  8953418  json-2.6.2If a gem is using excessive memory, consider:  Updating to a newer version  Finding a more memory-efficient alternative  Implementing a lightweight solution yourself5. Monitor JSON Parsing and GenerationProblem:report = MemoryProfiler.report do  large_data = File.read('large_data.json')  parsed_data = JSON.parse(large_data)  # Work with the data  processed = process_json_data(parsed_data)  JSON.generate(processed)endreport.pretty_printSolution:report = MemoryProfiler.report do  # Stream parsing for large JSON files  result = []  Oj::Parser.new(:strict).parse_file('large_data.json') do |parsed|    # Process each object as it's parsed    result &lt;&lt; transform_json_object(parsed)  endendreport.pretty_printUsing streaming parsers like Oj (optimized JSON) for large files dramatically reduces memory usage.Real-World Case Study: Rails Model LoadingLet‚Äôs examine a common memory issue in Rails - loading models with many associations:The Problem# Controller actiondef dashboard  report = MemoryProfiler.report do    @users = User.all.includes(:posts, :comments, :profile)    @data = @users.map do |user|      {        user: user.attributes,        posts: user.posts.map(&amp;:attributes),        comments: user.comments.map(&amp;:attributes),        profile: user.profile&amp;.attributes      }    end  end    File.open(\"#{Rails.root}/log/dashboard_memory.log\", 'w') do |file|    report.pretty_print(to_file: file)  end    render json: @dataendMemory profile results:Total allocated: 254,328,816 bytes (3,200,502 objects)Total retained:  125,624,816 bytes (1,600,252 objects)The Solutiondef dashboard  report = MemoryProfiler.report do    # 1. Select only needed columns    # 2. Process in batches    # 3. Use pluck for simple data extraction    @data = []        User.select(:id, :name, :email, :created_at)        .find_in_batches(batch_size: 100) do |user_batch|            user_ids = user_batch.map(&amp;:id)            # Fetch related data efficiently      posts = Post.where(user_id: user_ids)                 .select(:id, :title, :user_id)                 .group_by(&amp;:user_id)                       comments = Comment.where(user_id: user_ids)                       .select(:id, :content, :user_id)                       .group_by(&amp;:user_id)                             profiles = Profile.where(user_id: user_ids)                       .select(:id, :bio, :user_id)                       .index_by(&amp;:user_id)            # Build the response without creating unnecessary objects      user_batch.each do |user|        user_data = {          id: user.id,          name: user.name,          email: user.email,          posts: posts[user.id]&amp;.map { |p| { id: p.id, title: p.title } } || [],          comments: comments[user.id]&amp;.map { |c| { id: c.id, content: c.content } } || [],          profile: profiles[user.id] ? { bio: profiles[user.id].bio } : nil        }        @data &lt;&lt; user_data      end    end  end    File.open(\"#{Rails.root}/log/dashboard_memory_optimized.log\", 'w') do |file|    report.pretty_print(to_file: file)  end    render json: @dataendMemory profile results after optimization:Total allocated: 42,328,816 bytes (520,502 objects)Total retained:  15,624,816 bytes (200,252 objects)That‚Äôs an 83% reduction in memory allocation and 88% reduction in retained memory!Advanced Techniques1. Detect Memory LeaksTo detect memory leaks, run the same code multiple times and watch for increasing memory:5.times do |i|  puts \"Iteration #{i+1}\"  report = MemoryProfiler.report do    # Code that might leak    perform_operation  end    puts \"Allocated: #{report.total_allocated_memsize} bytes\"  puts \"Retained: #{report.total_retained_memsize} bytes\"  puts \"---\"    # Force garbage collection between runs  GC.startendIf retained memory grows with each iteration, you likely have a leak.2. Targeted Detail AnalysisFor complex issues, examine object allocation details:report = MemoryProfiler.report do  # Code to profileend# Get the top 20 locations allocating memoryputs \"Top allocation locations:\"report.pretty_print(to_file: nil, detailed_report: false, scale_bytes: true,                    top: 20)# Get detailed string allocationsstring_locations = report.strings_allocatedstring_locations.sort_by! { |l| -l[:count] }string_locations[0..10].each do |location|  puts \"#{location[:count]} strings (#{location[:memsize]} bytes) allocated at #{location[:location]}\"end3. Memory-Conscious Design PatternsHere are some memory-efficient design patterns for Ruby applications:Value Objects Instead of Hashes# Memory-heavy approachusers.map do |user|  { id: user.id, name: user.name, stats: calculate_stats(user) }end# Memory-efficient approachclass UserPresenter  attr_reader :id, :name    def initialize(user)    @user = user    @id = user.id    @name = user.name  end    def stats    @stats ||= calculate_stats(@user)  end    private    def calculate_stats(user)    # Calculation logic  endendusers.map { |user| UserPresenter.new(user) }Lazy Loadingclass Report  def initialize(user_id)    @user_id = user_id  end    def summary    @summary ||= generate_summary  end    def details    @details ||= generate_details  end    private    def user    @user ||= User.find(@user_id)  end    def generate_summary    # Only calculated when needed    { name: user.name, post_count: user.posts.count }  end    def generate_details    # Only calculated when needed    user.posts.map { |post| { title: post.title, likes: post.likes } }  endendMemory Profiling in ProductionFor monitoring memory in production:  Use application monitoring tools: New Relic, Scout APM, Skylight  Set up custom memory logging:# In an initializermodule MemoryLogger  def self.log(label)    memory_before = `ps -o rss= -p #{Process.pid}`.to_i / 1024    yield if block_given?    memory_after = `ps -o rss= -p #{Process.pid}`.to_i / 1024        Rails.logger.info \"[MEMORY] #{label}: #{memory_before}MB -&gt; #{memory_after}MB (Œî#{memory_after - memory_before}MB)\"        # Force garbage collection and measure again to see retained memory    GC.start    memory_after_gc = `ps -o rss= -p #{Process.pid}`.to_i / 1024    Rails.logger.info \"[MEMORY] #{label} (after GC): #{memory_after_gc}MB (Œî#{memory_after_gc - memory_before}MB)\"  endend# Usage in controllerdef expensive_action  MemoryLogger.log(\"Processing users\") do    @users = User.process_all  endendConclusionMemory management in Ruby requires awareness and proactive optimization. The memory_profiler gem gives you powerful tools to identify memory issues and measure the impact of your optimizations.Key takeaways:  Measure before optimizing: Use memory_profiler to identify actual problem areas  Process in batches: Break large operations into manageable chunks  Select only what you need: Fetch only required columns from the database  Minimize object creation: Reuse objects where possible  Optimize string operations: String concatenation can be memory-intensive  Watch for memory leaks: Monitor memory usage over timeBy applying these techniques, you can build Ruby applications that are not only fast but also memory-efficient, resulting in more stable applications and lower hosting costs.Resources  memory_profiler GitHub repository  Ruby Garbage Collection Deep Dive  Ruby Performance Optimization by Alexander Dymo  Derailed Benchmarks - A Rails memory benchmarking tool"
  },
  
  {
    "title": "Quick Load Testing for Heroku Apps with Apache Bench",
    "url": "/posts/apache-bench-heroku/",
    "categories": "Heroku, Performance",
    "tags": "heroku, performance",
    "date": "2025-03-20 11:26:00 +0545",
    





    
    "snippet": "Apache Bench (ab) is a lightweight command-line tool that allows you to quickly perform load testing on web applications, making it ideal for Heroku-deployed Rails applications. This guide walks th...",
    "content": "Apache Bench (ab) is a lightweight command-line tool that allows you to quickly perform load testing on web applications, making it ideal for Heroku-deployed Rails applications. This guide walks through the process of setting up and running basic load tests on your Heroku app.Why Apache Bench?  Simplicity: No complex setup required  Speed: Tests can be executed in minutes  Built-in: Comes pre-installed on many systems  Lightweight: Minimal resource requirements  Sufficient: For many basic load testing needsPrerequisites  Apache Bench installed on your system          On macOS: Comes pre-installed      On Ubuntu/Debian: sudo apt-get install apache2-utils      On Windows: Install via Apache HTTP Server or use WSL        A Heroku application you want to test  Heroku CLI installed and configuredBasic Apache Bench Command SyntaxThe basic syntax for Apache Bench is:ab [options] [http[s]://]hostname[:port]/pathCommon options include:  -n: Number of requests to perform  -c: Number of concurrent requests  -t: Timelimit in seconds  -A: Supply basic authentication credentials  -C: Add cookie line to requests  -H: Add arbitrary header to requestsSetting Up for Heroku Testing1. Enable Enhanced LoggingFor better visibility during testing:heroku addons:upgrade logging:expanded --remote [staging/production]2. Add Monitoring (Optional but Recommended)New Relic provides valuable insights during load tests:heroku addons:add newrelic:standard --remote [staging/production]3. Scale Up Dynos Before TestingIncrease your app‚Äôs capacity temporarily for testing:heroku ps:scale web=4 --remote [staging/production]Running Basic Load TestsSimple Homepage TestTest your app‚Äôs homepage with 1,000 requests and 10 concurrent users:ab -n 1000 -c 10 https://your-app.herokuapp.com/Testing with AuthenticationIf your staging app is password protected:ab -n 5000 -c 50 -A username:password https://staging-app.herokuapp.com/Testing a Specific EndpointTest a specific API endpoint or page:ab -n 2000 -c 20 https://your-app.herokuapp.com/api/productsTesting with a SessionFor testing authenticated user flows, grab a cookie from your browser:ab -n 1000 -c 10 -C \"_session_id=1234abcd\" https://your-app.herokuapp.com/dashboardReal-World ExampleHere‚Äôs a practical example for a medium-traffic Heroku application:# Scale up dynos for testingheroku ps:scale web=12 --remote staging# Open logs in another terminal windowheroku logs -t --remote staging# Run the test (50k requests, 50 concurrent users)ab -n 50000 -c 50 -A user:password https://staging.your-app.com/# After testing, scale back downheroku ps:scale web=1 --remote stagingInterpreting ResultsApache Bench provides detailed statistics after each test:Server Software:        CowboyServer Hostname:        myapp.herokuapp.comServer Port:            443SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128Document Path:          /Document Length:        11322 bytesConcurrency Level:      50Time taken for tests:   30.285 secondsComplete requests:      5000Failed requests:        0Total transferred:      59845000 bytesHTML transferred:       56610000 bytesRequests per second:    165.10 [#/sec] (mean)Time per request:       302.850 [ms] (mean)Time per request:       6.057 [ms] (mean, across all concurrent requests)Transfer rate:          1930.36 [Kbytes/sec] receivedKey metrics to observe:  Requests per second: Higher is better  Time per request: Lower is better  Failed requests: Should be zero or minimal  Connect/Processing/Waiting times: Helps identify bottlenecksMonitoring During TestsHeroku LogsWhile tests are running, watch your logs:heroku logs -t --remote stagingLook for:  Error rates  Request queuing (indicates you need more dynos)  Slow database queries  H12 errors (request timeout)New RelicCheck your New Relic dashboard during and after tests for:  Response time breakdown  Database load  Error rates  Apdex score  Memory usageRealistic Load Testing Strategy  Start small: Begin with low numbers (e.g., -n 500 -c 5)  Gradually increase: Double numbers until you see degradation  Test multiple endpoints: Different routes may have different bottlenecks  Mix in complex operations: Don‚Äôt just test the homepage  Test at different times: Performance can vary based on database size/activityLimitations of Apache BenchApache Bench is useful for quick tests but has limitations:  Limited to around 50 concurrent users  Tests single URLs rather than user journeys  Doesn‚Äôt simulate browser behavior (JS execution, asset loading)  Can‚Äôt simulate gradual traffic ramp-upFor more comprehensive testing, consider tools like:  Siege  JMeter  k6  Gatling  Tsung  Blitz.io (commercial)ConclusionApache Bench provides a quick, easy way to test your Heroku application‚Äôs performance under load. While not as comprehensive as dedicated load testing services, it gives you immediate feedback about how your application handles concurrent traffic and can help identify performance bottlenecks before they impact real users.Remember that the goal is to measure, improve, and measure again. Use the insights gained from load testing to guide your optimization efforts, whether that‚Äôs adding caching, optimizing database queries, or scaling your Heroku resources."
  },
  
  {
    "title": "Beyond ||=: Smarter Caching Strategies in Ruby",
    "url": "/posts/the-art-of-lazy-loading-ruby-memoization/",
    "categories": "Ruby, Performance",
    "tags": "ruby, performance",
    "date": "2025-03-20 10:50:00 +0545",
    





    
    "snippet": "Ruby developers love their shortcuts, and the memoization pattern using the ||= operator is one of the most widely used tricks in the Ruby world. But is it always the right tool for the job? Let‚Äôs ...",
    "content": "Ruby developers love their shortcuts, and the memoization pattern using the ||= operator is one of the most widely used tricks in the Ruby world. But is it always the right tool for the job? Let‚Äôs explore when to use memoization and when to consider alternatives.The Classic Memoization PatternWe‚Äôve all seen (and probably written) code like this:def expensive_calculation  @result ||= perform_complex_workendThis elegant one-liner caches the result of perform_complex_work in the @result instance variable, ensuring the work is only done once. But this common pattern comes with trade-offs that aren‚Äôt always considered.When Memoization ShinesMemoization is most valuable in these scenarios:1. Expensive Operations That May Not Be Usedclass ReportGenerator  def executive_summary    @executive_summary ||= begin      puts \"Generating executive summary...\"      sleep(2) # Simulating expensive work      analyze_sales_data.merge(calculate_projections)    end  endend# Usagereport = ReportGenerator.new# No expensive work happens yetputs \"Report object created\"# Work happens on first callreport.executive_summary # Second call uses cached resultreport.executive_summary2. API Calls or Database Queriesclass UserProfile  def initialize(user_id)    @user_id = user_id  end    def recent_activities    @recent_activities ||= api_client.fetch_activities(@user_id)  endend3. Resource-Intensive Computationsclass StatisticalAnalyzer  def standard_deviation    @standard_deviation ||= calculate_standard_deviation  end    private    def calculate_standard_deviation    # Complex math that takes significant CPU time    puts \"Calculating standard deviation...\"    sleep(1)    42.0 # Just an example result  endendThe Hidden Costs of MemoizationBefore you ||= everything, consider these drawbacks:      It Obscures the Object Lifecycle: When values are calculated on-demand, it‚Äôs harder to reason about an object‚Äôs state.        Thread Safety Issues: The classic ||= pattern isn‚Äôt thread-safe by default.        Increased Complexity: Adding caching layers should be justified by measured performance gains.        Potential for Stale Data: Memoized values don‚Äôt automatically update when dependencies change.  Smart Alternatives to Consider1. Constructor Initialization (Eager Loading)When a value will always be needed, calculate it upfront:class Dashboard  attr_reader :user_statistics    def initialize(user)    @user = user    @user_statistics = calculate_user_statistics  end    private    def calculate_user_statistics    # Complex work here    { logins: 42, avg_session_time: 15.3 }  endend2. Computed Properties (No Caching)For simple derivations, sometimes no caching is needed:class Invoice  attr_reader :items    def total    # Often fast enough without caching    items.sum(&amp;:price)  endend3. Method-Level Caching with Separation of ConcernsSeparate the caching logic from the calculation:class ProductCatalog  def featured_products    @featured_products ||= compute_featured_products  end    def refresh_featured!    @featured_products = compute_featured_products  end    private    def compute_featured_products    puts \"Computing featured products...\"    Product.where(featured: true).order(popularity: :desc).limit(10)  endend# Usagecatalog = ProductCatalog.newcatalog.featured_products # Computes and cachescatalog.featured_products # Uses cachecatalog.refresh_featured! # Forces recalculationcatalog.featured_products # Uses new cache4. Use Ruby‚Äôs Memoizable Module or Similar LibrariesFor more complex caching needs, consider gems like memoist:require 'memoist'class WeatherService  extend Memoist    def forecast(city)    puts \"Fetching forecast for #{city}...\"    # API call here    { temp: 22, conditions: \"Sunny\" }  end  memoize :forecastend# Usageweather = WeatherService.newweather.forecast(\"Tokyo\")  # Makes API callweather.forecast(\"Tokyo\")  # Uses cacheweather.forecast(\"London\") # Makes new API callMaking the Right ChoiceTo decide whether memoization is appropriate, ask yourself:  Is the operation actually expensive? Benchmark before optimizing.  Will the value be used multiple times? If not, memoization adds complexity without benefit.  Does the data need to stay fresh? Memoized values don‚Äôt auto-update.  Is thread safety a concern? Consider thread-safe alternatives if needed.A Decision Framework            Scenario      Best Approach                  Always needed, expensive      Constructor initialization              May not be needed, expensive      Memoization              Used multiple times, changes rarely      Memoization with refresh method              Simple calculation      No caching              Needs thread safety      Thread-safe caching library      ConclusionMemoization is a powerful technique in Ruby, but it‚Äôs not a universal solution. By understanding the trade-offs and alternatives, you can make more informed decisions about when to cache and how to implement it effectively.Remember that the most elegant code is often the simplest. Before adding complexity through caching, ensure you‚Äôre solving a real performance problem rather than an imagined one."
  },
  
  {
    "title": "Conquering the N+1 Query Problem in Rails: A Performance Deep Dive",
    "url": "/posts/rails-n-plus-one-query-problem/",
    "categories": "Ruby on Rails, Performance",
    "tags": "ruby on rails, performance",
    "date": "2025-03-20 10:50:00 +0545",
    





    
    "snippet": "If you‚Äôve been developing Rails applications for any length of time, you‚Äôve likely encountered the infamous N+1 query problem‚Äîperhaps without even realizing it. This performance bottleneck can sile...",
    "content": "If you‚Äôve been developing Rails applications for any length of time, you‚Äôve likely encountered the infamous N+1 query problem‚Äîperhaps without even realizing it. This performance bottleneck can silently slow your application to a crawl as your data grows. In this article, we‚Äôll dive deep into understanding, identifying, and solving the N+1 problem with practical, real-world examples and benchmarks.What Is the N+1 Query Problem?The N+1 query problem is a database performance anti-pattern where your application executes one query to retrieve a collection of records (the ‚Äú1‚Äù), followed by N additional queries (one for each record in the collection) to retrieve related data. This approach can significantly degrade performance, especially as your dataset grows.Let‚Äôs illustrate this with a simple example:# This innocent-looking code hides a serious performance issueposts = Post.allposts.each do |post|  puts post.user.name  # Each access to post.user triggers a separate database queryendWhen executed, this code generates SQL that looks something like:SELECT * FROM posts;                           -- The \"1\" querySELECT * FROM users WHERE id = 1 LIMIT 1;      -- First of the \"N\" queriesSELECT * FROM users WHERE id = 2 LIMIT 1;      -- Second of the \"N\" queriesSELECT * FROM users WHERE id = 3 LIMIT 1;      -- And so on...Benchmarking the ImpactLet‚Äôs first understand the magnitude of the problem using Ruby‚Äôs Benchmark module. We‚Äôll compare the performance of code with and without the N+1 problem:require 'benchmark'# Setup test data (in a real application you'd have this data already)10.times do |i|  user = User.create!(name: \"User #{i}\", email: \"user#{i}@example.com\")  5.times do |j|    Post.create!(title: \"Post #{j} by User #{i}\", content: \"Content...\", user: user)  endendputs \"Benchmarking with N+1 problem:\"time_with_n_plus_one = Benchmark.measure do  posts = Post.all  posts.each do |post|    puts \"#{post.title} by #{post.user.name}\"  endendputs \"Benchmarking with eager loading (solution to N+1):\"time_with_eager_loading = Benchmark.measure do  posts = Post.includes(:user).all  posts.each do |post|    puts \"#{post.title} by #{post.user.name}\"  endendputs \"Time with N+1 problem: #{time_with_n_plus_one.real} seconds\"puts \"Time with eager loading: #{time_with_eager_loading.real} seconds\"puts \"Performance improvement: #{(time_with_n_plus_one.real / time_with_eager_loading.real).round(2)}x faster\"For a modest dataset with just 50 posts across 10 users, you might see results like:Time with N+1 problem: 0.2812 secondsTime with eager loading: 0.0431 secondsPerformance improvement: 6.52x fasterAs your dataset grows, this performance gap widens dramatically.Spotting N+1 Problems in Your Rails AppTelltale Signs in Your LogsThe most straightforward way to identify N+1 issues is by reviewing your development or production logs. Look for patterns of repeated, similar queries occurring in succession:Post Load (0.5ms)  SELECT \"posts\".* FROM \"posts\"User Load (0.3ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = $1 LIMIT $2  [[\"id\", 1], [\"LIMIT\", 1]]User Load (0.2ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = $1 LIMIT $2  [[\"id\", 2], [\"LIMIT\", 1]]User Load (0.2ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = $1 LIMIT $2  [[\"id\", 3], [\"LIMIT\", 1]]This pattern‚Äîone query followed by many similar queries with different parameters‚Äîis the classic signature of an N+1 problem.Using the Bullet GemThe Bullet gem is a fantastic tool for automatically detecting N+1 queries. Here‚Äôs how to set it up:# Gemfilegem 'bullet', group: [:development, :test]# config/environments/development.rbconfig.after_initialize do  Bullet.enable = true  Bullet.alert = true  # JavaScript alerts in the browser  Bullet.console = true  # Logs to browser console  Bullet.rails_logger = true  # Logs to Rails logger  Bullet.add_footer = true  # Adds details to HTML footerendBullet will now notify you whenever it detects an N+1 query in your application, suggesting exactly where to add eager loading.Common Solutions to the N+1 Problem1. Eager Loading with includesThe most common solution is to use Rails‚Äô includes method, which tells Rails to load the associated records in as few queries as possible:# Instead of:posts = Post.all# Use:posts = Post.includes(:user)# For multiple associations:posts = Post.includes(:user, :comments, :tags)# For nested associations:posts = Post.includes(user: :profile, comments: [:user, :likes])With includes, Rails will typically execute just two queries regardless of how many posts you have:SELECT * FROM posts;SELECT * FROM users WHERE id IN (1, 2, 3, ...);2. Using preload for Specific Loading StrategiesSometimes you need finer control over how associations are loaded. Rails provides preload:# This forces separate queriesposts = Post.preload(:user)This will always use separate queries for each association (never a JOIN), which can be beneficial when retrieving large result sets.3. Using eager_load for JOIN-based LoadingWhen you need to filter based on associated records, eager_load is your friend:# This will use a LEFT OUTER JOINposts = Post.eager_load(:user).where(users: { role: 'admin' })This generates a query with a JOIN, allowing you to filter the primary collection based on conditions on the associated records.4. Using joins for More Complex FilteringFor more complex filtering without loading associated records:# Find all posts written by users with a specific email domainposts = Post.joins(:user).where(\"users.email LIKE ?\", \"%@example.com\")This uses a JOIN but doesn‚Äôt load the associated records into memory‚Äîuseful when you need to filter but don‚Äôt need the associated data.5. Batching with find_each and in_batchesFor processing large collections efficiently:# Process records in batches of 1000Post.find_each(batch_size: 1000) do |post|  # This automatically includes batch finding to reduce memory consumption  process_post(post)endAdvanced Techniques1. Optimizing with selectSometimes you don‚Äôt need all attributes of your records:# Only select the fields you needposts = Post.select(:id, :title).includes(:user)# You can also select specific fields from associationsposts = Post.includes(:user).references(:user).select('posts.*, users.name as author_name')2. Counter Cache ColumnsFor situations where you frequently count associations, use counter caches:# In your migrationadd_column :users, :posts_count, :integer, default: 0# In your Post modelclass Post &lt; ApplicationRecord  belongs_to :user, counter_cache: trueend# Now instead of:user.posts.count  # Executes a COUNT query# You can use:user.posts_count  # Uses the cached value3. Custom Benchmarking Class for N+1 DetectionCreate a custom class to help identify potential N+1 problems in your codebase:class QueryCounter  attr_reader :count    def initialize    @count = 0  end    def self.track    counter = new    subscription = ActiveSupport::Notifications.subscribe('sql.active_record') do |*args|      event = ActiveSupport::Notifications::Event.new(*args)      counter.count += 1 unless event.payload[:name] == 'SCHEMA' || event.payload[:sql].include?('BEGIN') || event.payload[:sql].include?('COMMIT')    end        yield        ActiveSupport::Notifications.unsubscribe(subscription)    counter  endend# Usagecounter = QueryCounter.track do  # Code that might have N+1 issues  Post.all.each { |post| puts post.user.name }endputs \"Executed #{counter.count} queries.\"Real-World Example: Beyond Simple AssociationsLet‚Äôs tackle a more complex example involving multiple levels of associations:class Blog &lt; ApplicationRecord  has_many :postsendclass Post &lt; ApplicationRecord  belongs_to :blog  belongs_to :user  has_many :comments  has_many :tags, through: :taggingsendclass User &lt; ApplicationRecord  has_many :posts  has_one :profileendclass Comment &lt; ApplicationRecord  belongs_to :post  belongs_to :userendclass Tag &lt; ApplicationRecord  has_many :taggings  has_many :posts, through: :taggingsendclass Tagging &lt; ApplicationRecord  belongs_to :post  belongs_to :tagendclass Profile &lt; ApplicationRecord  belongs_to :userendNow, imagine we want to display blogs with their posts, each post‚Äôs author details, and the post‚Äôs comments and tags:# Inefficient approach with N+1 problems:blogs = Blog.allblogs.each do |blog|  puts \"Blog: #{blog.title}\"    blog.posts.each do |post|    puts \"  Post: #{post.title} by #{post.user.name} (#{post.user.profile.bio})\"        post.comments.each do |comment|      puts \"    Comment by: #{comment.user.name}\"    end        post.tags.each do |tag|      puts \"    Tagged with: #{tag.name}\"    end  endendThis seemingly innocent code could generate hundreds of queries! Let‚Äôs fix it:# Efficient approach with proper eager loading:blogs = Blog.includes(  posts: [    {user: :profile},    {comments: :user},    :tags  ])# Same output loop, but now with drastically fewer queriesblogs.each do |blog|  puts \"Blog: #{blog.title}\"    blog.posts.each do |post|    puts \"  Post: #{post.title} by #{post.user.name} (#{post.user.profile.bio})\"        post.comments.each do |comment|      puts \"    Comment by: #{comment.user.name}\"    end        post.tags.each do |tag|      puts \"    Tagged with: #{tag.name}\"    end  endendLet‚Äôs benchmark this complex scenario:require 'benchmark'puts \"Benchmarking complex N+1 scenario:\"time_with_n_plus_one = Benchmark.measure do  blogs = Blog.all  # ... (inefficient loop from above)endputs \"Benchmarking with comprehensive eager loading:\"time_with_eager_loading = Benchmark.measure do  blogs = Blog.includes(posts: [{user: :profile}, {comments: :user}, :tags])  # ... (same loop)endputs \"Time with N+1 problem: #{time_with_n_plus_one.real} seconds\"puts \"Time with eager loading: #{time_with_eager_loading.real} seconds\"puts \"Performance improvement: #{(time_with_n_plus_one.real / time_with_eager_loading.real).round(2)}x faster\"With a moderate dataset, you might see a performance improvement of 20x or more!Caveats and ConsiderationsWhile eager loading is powerful, it‚Äôs not always the right solution:      Memory usage: Eager loading loads all associated records into memory. For very large datasets, this can consume significant RAM.        Unused data: If you‚Äôre not actually using all the eager loaded associations in your code, you‚Äôre wasting resources.        JOINs complexity: Complex eager loading with many nested associations can result in inefficient JOINs. In such cases, multiple targeted queries might be faster.        Database-specific optimization: Different databases have different query optimization capabilities. PostgreSQL might handle certain complex JOINs better than MySQL, for example.  ConclusionThe N+1 query problem is one of the most common performance issues in Rails applications, but also one of the most solvable. By understanding the problem, learning to identify it in your own code, and applying the right solutions, you can dramatically improve your application‚Äôs performance.Remember to:  Use Rails‚Äô includes, preload, and eager_load methods appropriately  Monitor your application logs for signs of N+1 queries  Use tools like the Bullet gem for automated detection  Benchmark your improvements to ensure they‚Äôre having the desired effect  Consider both performance and memory usage when optimizingBy keeping these practices in mind, you‚Äôll be well on your way to faster, more efficient Rails applications that can handle larger datasets with ease.Additional Resources  Rails Guide on Active Record Query Interface  Bullet gem documentation  rack-mini-profiler gem for performance profiling  Rails APM tools such as Scout, New Relic, or AppSignal"
  },
  
  {
    "title": "Mastering Rails Performance Benchmarking: A Developer's Guide",
    "url": "/posts/rails-benchmarking/",
    "categories": "Ruby on Rails, Performance",
    "tags": "ruby on rails, performance",
    "date": "2025-03-20 08:53:10 +0545",
    





    
    "snippet": "In the world of Rails application development, performance isn‚Äôt just a nice-to-have‚Äîit‚Äôs essential. As applications grow in complexity and user base, even small inefficiencies can compound into si...",
    "content": "In the world of Rails application development, performance isn‚Äôt just a nice-to-have‚Äîit‚Äôs essential. As applications grow in complexity and user base, even small inefficiencies can compound into significant performance bottlenecks. This is where benchmarking becomes an invaluable tool in a developer‚Äôs arsenal.Understanding Benchmarking in Ruby on RailsBenchmarking is the systematic process of measuring and evaluating your code‚Äôs performance metrics. It allows you to identify bottlenecks, compare alternative implementations, and make data-driven optimization decisions rather than relying on intuition.Why Benchmark Your Rails Application?  Identify performance bottlenecks: Find which parts of your application consume the most resources  Data-driven decision making: Choose between implementation approaches based on concrete metrics  Validate optimizations: Verify that your changes actually improve performance  Establish baselines: Create performance standards for your applicationRuby‚Äôs Built-in Benchmark ModuleRuby ships with a powerful Benchmark module in its standard library, which provides several methods for measuring code execution time. Let‚Äôs explore how to use it effectively in a Rails environment.Setting Up Your Benchmarking EnvironmentFirst, let‚Äôs set up a proper benchmarking environment in your Rails application:# In a Rails console or dedicated benchmark scriptrequire 'benchmark'# Optional: Direct output to a log filelog_file = File.open('log/benchmark_results.log', 'a')log_file.sync = true$stdout = log_file# Use this to restore standard output when needed# $stdout = STDOUTBasic Benchmarking TechniquesBenchmark.measure: Timing a Single OperationThe simplest form of benchmarking is measuring how long a single block of code takes to execute:result = Benchmark.measure do  User.where(active: true).includes(:posts, :comments).each do |user|    user.recalculate_statistics!  endendputs resultThis outputs something like:  0.350000   0.050000   0.400000 (  0.412412)The four numbers represent:  User CPU time  System CPU time  Total CPU time (user + system)  Real elapsed time (wall clock time)Benchmark.bm: Comparing Multiple OperationsWhen you want to compare the performance of different approaches, Benchmark.bm is your friend:Benchmark.bm(20) do |x|  # Approach 1: Using ActiveRecord  x.report(\"ActiveRecord:\") do    Post.where(published: true).count  end    # Approach 2: Using raw SQL  x.report(\"Raw SQL:\") do    ActiveRecord::Base.connection.execute(\"SELECT COUNT(*) FROM posts WHERE published = true\").first[\"count\"]  end    # Approach 3: Using Rails counter cache  x.report(\"Counter cache:\") do    Category.sum(:published_posts_count)  endendThe parameter 20 specifies the label width for better formatting of the output.Benchmark.bmbm: Addressing Memory Warm-up IssuesRuby‚Äôs garbage collector and other runtime considerations can sometimes skew your benchmark results. Benchmark.bmbm (or ‚Äúburn-in benchmark‚Äù) runs the code twice‚Äîonce as a rehearsal to warm up the environment, and once for the actual measurement:Benchmark.bmbm(20) do |x|  x.report(\"String concat:\") do    result = \"\"    10000.times { result += \"x\" }  end    x.report(\"Array join:\") do    result = []    10000.times { result &lt;&lt; \"x\" }    result.join  endendAdvanced Benchmarking StrategiesBenchmark.ips: Operations Per SecondWhile not part of the standard library, the benchmark-ips gem provides a more sophisticated approach by measuring iterations per second, which often gives more meaningful comparisons:# Gemfilegem 'benchmark-ips'# In your benchmark coderequire 'benchmark/ips'Benchmark.ips do |x|  x.report(\"Pluck:\") { User.pluck(:email) }  x.report(\"Map:\") { User.all.map(&amp;:email) }  x.compare!endThe compare! method will show how many times faster one approach is compared to others.Creating a Custom Benchmarking ClassFor more structured benchmarking in a Rails application, consider creating a custom benchmarking class:class PerformanceBenchmark  class &lt;&lt; self    def compare_query_methods(dataset_size: 1000)      # Create test data      User.transaction do        dataset_size.times do |i|          User.create!(            name: \"User #{i}\",            email: \"user_#{i}@example.com\",            active: i.even?          )        end                Benchmark.bmbm(25) do |x|          x.report(\"where:\") { User.where(active: true).to_a }          x.report(\"find_by_sql:\") { User.find_by_sql(\"SELECT * FROM users WHERE active = true\") }          x.report(\"in batches:\") { [].tap { |results| User.where(active: true).in_batches(of: 100) { |batch| results.concat(batch.to_a) } } }        end                # Clean up test data        raise ActiveRecord::Rollback      end    end        def profile_action(times: 10, &amp;block)      results = []            times.times do        results &lt;&lt; Benchmark.measure(&amp;block).real      end            {        min: results.min,        max: results.max,        avg: results.sum / results.size,        median: results.sort[results.size / 2]      }    end  endendUsage:PerformanceBenchmark.compare_query_methods(dataset_size: 5000)results = PerformanceBenchmark.profile_action(times: 20) do  UsersController.new.indexendputs \"Average response time: #{results[:avg]}s\"Benchmarking in ProductionFor production environments, consider these approaches:Request-level Benchmarking with ActiveSupport::NotificationsRails provides a powerful instrumentation API through ActiveSupport::Notifications:# In an initializerActiveSupport::Notifications.subscribe(\"process_action.action_controller\") do |*args|  event = ActiveSupport::Notifications::Event.new(*args)  payload = event.payload    if payload[:controller] == \"UsersController\" &amp;&amp; payload[:action] == \"index\"    Rails.logger.info(      \"UsersController#index performance: #{event.duration.round(2)}ms, \" +      \"DB: #{payload[:db_runtime].round(2)}ms, \" +      \"View: #{payload[:view_runtime].round(2)}ms\"    )  endendDatabase Query BenchmarkingTo specifically benchmark database operations:class QueryBenchmark  def self.analyze_query(sql)    connection = ActiveRecord::Base.connection        result = Benchmark.measure do      connection.execute(\"EXPLAIN ANALYZE #{sql}\")    end        puts \"Query execution time: #{result.real.round(4)}s\"  endendQueryBenchmark.analyze_query(\"SELECT * FROM users WHERE created_at &gt; '2023-01-01'\")Practical Real-world ExamplesExample 1: Optimizing User Authenticationclass AuthBenchmark  def self.compare_authentication_methods(iterations = 1000)    user = User.create!(email: \"test@example.com\", password: \"password123\")        Benchmark.bm(25) do |x|      x.report(\"Database lookup:\") do        iterations.times do          User.find_by(email: \"test@example.com\")&amp;.authenticate(\"password123\")        end      end            x.report(\"Cache + Database:\") do        iterations.times do          cached_user = Rails.cache.fetch(\"user/test@example.com\", expires_in: 5.minutes) do            User.find_by(email: \"test@example.com\")          end          cached_user&amp;.authenticate(\"password123\")        end      end            x.report(\"JWT token validation:\") do        token = JWT.encode({ user_id: user.id, exp: Time.now.to_i + 3600 }, Rails.application.credentials.secret_key_base)                iterations.times do          begin            decoded = JWT.decode(token, Rails.application.credentials.secret_key_base)[0]            User.find(decoded[\"user_id\"]) if decoded[\"exp\"] &gt; Time.now.to_i          rescue JWT::DecodeError            nil          end        end      end    end        user.destroy  endendAuthBenchmark.compare_authentication_methodsExample 2: Data Serialization Performanceclass SerializationBenchmark  def self.compare_serialization_methods    user = User.create!(      name: \"John Doe\",      email: \"john@example.com\",      posts: Array.new(10) { |i| Post.create!(title: \"Post #{i}\", body: \"Content #{i}\") }    )        Benchmark.bm(20) do |x|      x.report(\"ActiveModel::Serializer:\") do        100.times { ActiveModelSerializers::SerializableResource.new(user, include: [:posts]).to_json }      end            x.report(\"Jbuilder:\") do        100.times do          Jbuilder.encode do |json|            json.id user.id            json.name user.name            json.email user.email            json.posts user.posts do |post|              json.id post.id              json.title post.title            end          end        end      end            x.report(\"Custom to_json:\") do        100.times do          {            id: user.id,            name: user.name,            email: user.email,            posts: user.posts.map { |p| { id: p.id, title: p.title } }          }.to_json        end      end    end        user.destroy  endendSerializationBenchmark.compare_serialization_methodsBest Practices for Accurate Benchmarking  Run multiple iterations: Single measurements can be misleading due to variance  Warm up the environment: Run the code at least once before measuring  Eliminate external factors: Disable logging, background jobs, and other services  Use realistic data volumes: Test with dataset sizes similar to production  Benchmark in isolation: Test one component at a time for clear results  Consider statistical significance: Use average of multiple runs to account for variance  Test on production-like hardware: Development machines may perform differentlyInterpreting Benchmark ResultsWhen analyzing benchmark results:  Look for orders of magnitude: Small differences (5-10%) might not be significant  Consider the real-world impact: Optimize code that runs frequently or with large datasets  Balance performance with readability: Sometimes slightly slower code is worth it for maintainability  Profile before optimizing: Don‚Äôt guess at bottlenecks‚Äîmeasure first  Consider memory usage alongside speed: Faster might not be better if it consumes far more memoryConclusionBenchmarking is an essential skill for Rails developers who want to build high-performance applications. By systematically measuring and comparing different approaches, you can make informed decisions that balance speed, memory usage, and code maintainability.Remember that premature optimization is the root of all evil‚Äîbenchmark first, then optimize where it matters most, and always validate your optimizations with data.Resources  Ruby Benchmark Documentation  Rails Active Support Instrumentation Guide  benchmark-ips gem  memory_profiler gem  rack-mini-profiler gem"
  },
  
  {
    "title": "Choosing the Right Stack: MERN vs Next.js vs Rails + Next.js",
    "url": "/posts/mern_vs_nextjs/",
    "categories": "MERN, NextJS",
    "tags": "mern, nextjs",
    "date": "2025-03-20 02:40:00 +0545",
    





    
    "snippet": "As a developer embarking on a new web project, one of the most crucial decisions you‚Äôll make is choosing the right technology stack. This decision will influence your development speed, application...",
    "content": "As a developer embarking on a new web project, one of the most crucial decisions you‚Äôll make is choosing the right technology stack. This decision will influence your development speed, application performance, maintainability, and even your team‚Äôs happiness. If you‚Äôre considering a JavaScript-based frontend, you have several excellent options for structuring your application.In this post, I‚Äôll explore three popular approaches for building modern web applications:  The MERN Stack (MongoDB, Express.js, React, Node.js)  Next.js as a full-stack solution  Ruby on Rails backend with Next.js frontendI‚Äôll compare these approaches across several dimensions including development speed, performance, scalability, and developer experience to help you make an informed decision for your project.Option 1: The MERN StackThe MERN stack is a popular JavaScript-based tech stack that uses MongoDB as the database, Express.js as the server framework, React for the frontend, and Node.js as the runtime environment.How It WorksIn a typical MERN stack architecture:  MongoDB stores your data as JSON-like documents with flexible schemas  Express.js provides a framework for building your API endpoints  React handles the user interface and client-side logic  Node.js executes your server-side JavaScript codeFor example, your Express server might define routes like:// routes/api/users.jsrouter.post('/', async (req, res) =&gt; {  try {    const { name, email, password } = req.body;        // Check if user exists    let user = await User.findOne({ email });    if (user) {      return res.status(400).json({ errors: [{ msg: 'User already exists' }] });    }        // Create new user    user = new User({      name,      email,      password    });        // Hash password    const salt = await bcrypt.genSalt(10);    user.password = await bcrypt.hash(password, salt);    await user.save();        // Generate JWT    const payload = { user: { id: user.id } };    jwt.sign(payload, config.get('jwtSecret'), { expiresIn: 360000 }, (err, token) =&gt; {      if (err) throw err;      res.json({ token });    });  } catch (err) {    console.error(err.message);    res.status(500).send('Server Error');  }});Advantages  JavaScript Everywhere: Using JavaScript for both frontend and backend means you don‚Äôt need to context-switch between languages.  Flexible Data Structure: MongoDB‚Äôs schema-less nature makes it easy to evolve your data structure over time.  Large Ecosystem: Each component of the MERN stack has extensive libraries and tools.  RESTful API Architecture: Clear separation between frontend and backend forces good API design practices.  Real-time Applications: Node.js excels at handling real-time, data-intensive applications.Challenges  Manual Setup for SEO: You‚Äôll need to implement additional solutions for SEO, as React‚Äôs client-side rendering isn‚Äôt optimal for search engines by default.  More Configuration: You‚Äôll need to set up routing, state management, and server-side rendering yourself.  DevOps Complexity: You‚Äôll need to deploy and manage both a Node.js server and a React application.  Learning Curve for NoSQL: If you‚Äôre coming from a relational database background, MongoDB might require some adjustment.Option 2: Next.js as a Full-Stack SolutionNext.js is a React framework that provides structure, features, and optimizations for your React application. Recent versions of Next.js have evolved to provide full-stack capabilities.How It WorksNext.js simplifies the development process by providing:  Server-Side Rendering (SSR): Renders pages on the server for better SEO and initial load times  Static Site Generation (SSG): Pre-renders pages at build time for optimal performance  API Routes: Create API endpoints directly within your Next.js application  File-based Routing: Define routes based on your file structureFor example, you might structure your API endpoints like this:// pages/api/users.jsimport bcrypt from 'bcryptjs';import jwt from 'jsonwebtoken';import User from '../../models/User';export default async function handler(req, res) {  if (req.method === 'POST') {    const { name, email, password } = req.body;    try {      // Check if user exists      let user = await User.findOne({ email });      if (user) {        return res.status(400).json({ errors: [{ msg: 'User already exists' }] });      }      // Create new user      user = new User({        name,        email,        password      });      // Hash password      const salt = await bcrypt.genSalt(10);      user.password = await bcrypt.hash(password, salt);      await user.save();      // Generate JWT      const payload = { user: { id: user.id } };      const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '100h' });      res.status(200).json({ token });    } catch (err) {      console.error(err.message);      res.status(500).json({ errors: [{ msg: 'Server error' }] });    }  } else {    res.status(405).end(); // Method Not Allowed  }}Advantages  Built-in SSR and SSG: Excellent for SEO and performance  Simplified Development: File-based routing and API routes reduce boilerplate  Unified Deployment: Deploy both frontend and backend as a single application  Image Optimization: Built-in image optimization for better performance  Incremental Static Regeneration (ISR): Update static content without rebuilding the entire siteChallenges  Learning Curve: Next.js has its own patterns and conventions to learn  Less Flexibility: The unified approach can be constraining for complex backend logic  Database Integration: You still need to set up and configure your database connection  Complex State Management: For large applications, you may need additional state management solutionsOption 3: Ruby on Rails Backend with Next.js FrontendThis approach combines the mature backend capabilities of Ruby on Rails with the modern frontend features of Next.js.How It WorksIn this architecture:  Ruby on Rails serves as an API-only backend, handling database operations, complex business logic, and authentication  Next.js handles the frontend, consuming the Rails APIYour Rails controller might look like:# app/controllers/api/users_controller.rbclass Api::UsersController &lt; ApplicationController  def create    user = User.new(user_params)    if user.save      token = JWT.encode({ user_id: user.id }, ENV['JWT_SECRET'], 'HS256')      render json: { token: token }, status: :created    else      render json: { errors: user.errors.full_messages }, status: :unprocessable_entity    end  end    private    def user_params    params.require(:user).permit(:name, :email, :password, :password_confirmation)  endendAnd your Next.js page might fetch data like:// pages/dashboard.jsexport async function getServerSideProps(context) {  const token = context.req.cookies.token;    try {    const res = await fetch(`${process.env.RAILS_API_URL}/api/dashboard`, {      headers: {        'Authorization': `Bearer ${token}`      }    });        if (res.ok) {      const data = await res.json();      return { props: { data } };    } else {      return {        redirect: {          destination: '/login',          permanent: false,        },      };    }  } catch (error) {    return {      redirect: {        destination: '/login',        permanent: false,      },    };  }}Advantages  Best of Both Worlds: Leverage Rails‚Äô mature backend capabilities with Next.js‚Äô frontend optimizations  Rails Ecosystem: Access to Rails‚Äô robust gems for things like authentication, authorization, and admin panels  Strong Conventions: Rails‚Äô ‚Äúconvention over configuration‚Äù philosophy can speed up backend development  Database Migrations: Rails‚Äô migration system makes database changes safe and manageable  Active Record: Rails‚Äô ORM simplifies database interactionsChallenges  Multiple Languages: Working with both Ruby and JavaScript requires context-switching  Deployment Complexity: You‚Äôll need to deploy and manage two separate applications  Authentication Coordination: Ensuring secure authentication between the two systems requires careful planning  API Design: You‚Äôll need to thoughtfully design the API contract between your frontend and backend  Team Expertise: Requires team members familiar with both ecosystemsWhich Stack Should You Choose?The best choice depends on your specific needs and constraints:Choose MERN if:  You want to work exclusively with JavaScript  Your team has strong Node.js and MongoDB experience  You value flexibility in your database schema  You‚Äôre building data-intensive applications with real-time features  You need fine-grained control over your backend architectureChoose Next.js if:  SEO is a critical concern for your application  You want faster development with less configuration  You prefer a unified deployment model  You‚Äôre comfortable with its conventions and constraints  Your backend logic is relatively straightforwardChoose Rails + Next.js if:  You have existing Rails expertise on your team  Your application requires complex backend business logic  You value Rails‚Äô mature ecosystem for things like admin interfaces  Data integrity and relational data are important for your application  You want to leverage Rails‚Äô battle-tested security featuresConclusionThere‚Äôs no universally ‚Äúright‚Äù choice among these three options - each has its strengths and weaknesses. Consider your team‚Äôs skills, your project‚Äôs specific requirements, and your long-term maintenance plans when making your decision.The JavaScript ecosystem continues to evolve rapidly, and each of these approaches represents a valid way to build modern web applications. By understanding the trade-offs involved, you can make a more informed decision that aligns with your project goals and team capabilities.Have you built applications using one of these stacks? What were your experiences? I‚Äôd love to hear your thoughts in the comments!This blog post was created to help developers understand the trade-offs between different tech stacks for building web applications. The code examples are simplified for illustration purposes."
  },
  
  {
    "title": "Mastering PostgreSQL Performance: Proactive Practices to Prevent Bottlenecks",
    "url": "/posts/postgresql-optimization-prevent-performance-bottleneck/",
    "categories": "Ruby on Rails, Performance, PostgreSQL",
    "tags": "ruby on rails, performance, postgresql",
    "date": "2025-03-20 01:11:10 +0545",
    





    
    "snippet": "Database performance is often the silent killer of application responsiveness. As your PostgreSQL database grows with your business, seemingly innocent operations can lead to significant performanc...",
    "content": "Database performance is often the silent killer of application responsiveness. As your PostgreSQL database grows with your business, seemingly innocent operations can lead to significant performance degradation. The proactive practices can help prevent performance bottlenecks before they impact end users.Understanding PostgreSQL Bloat: The Hidden Performance KillerOne of the most insidious performance issues in PostgreSQL is bloat. But what exactly is bloat, and why should you care about it?What Is PostgreSQL Bloat?Bloat occurs when PostgreSQL‚Äôs MVCC (Multi-Version Concurrency Control) system leaves behind dead tuples (rows) that aren‚Äôt immediately removed from tables and indexes. Consider this seemingly innocent Rails code:User.where(active: false).update_all(status: 'inactive')Behind the scenes, PostgreSQL doesn‚Äôt actually update the existing rows. Instead, it:  Creates new versions of these rows with the updated status value  Leaves the old versions as ‚Äúdead tuples‚Äù to maintain MVCC guarantees  Relies on VACUUM processes to eventually clean up these dead tuplesWithout proper vacuuming, these dead tuples accumulate, causing:  Wasted disk space  Slower queries (PostgreSQL must scan through dead tuples)  Degraded index performance  Increased I/O operationsDetecting Bloat in Your DatabaseBefore you can fix bloat, you need to detect it. Here are some queries that can help identify table and index bloat:-- For table bloat estimationSELECT schemaname, relname, n_dead_tup, n_live_tup,       round(n_dead_tup * 100.0 / (n_live_tup + n_dead_tup), 1) AS dead_percentageFROM pg_stat_user_tablesWHERE n_live_tup &gt; 0ORDER BY dead_percentage DESC;-- For index bloat estimation (simplified)SELECT indexrelname, relname, idx_scan,        pg_size_pretty(pg_relation_size(indexrelid)) AS index_sizeFROM pg_stat_user_indexesORDER BY pg_relation_size(indexrelid) DESCLIMIT 20;Strategies for Managing and Preventing Bloat1. Optimizing VACUUM OperationsVACUUM is PostgreSQL‚Äôs built-in mechanism for reclaiming space from dead tuples. There are two main approaches:Regular VACUUMVACUUM ANALYZE your_table;This command:  Reclaims space from dead tuples for future use  Updates statistics for the query planner  Is non-blocking (doesn‚Äôt lock the table)  Doesn‚Äôt return disk space to the operating systemVACUUM FULL (Use with Caution!)VACUUM FULL your_table;According to PostgreSQL experts, you should avoid using VACUUM FULL in production as it:  Requires an exclusive lock on the table  Completely rewrites the table (causes downtime)  Can cause extended service interruptionsInstead, for production environments, it‚Äôs recommended to use the pg_repack extension, which can reclaim space without the lengthy downtime of VACUUM FULL.2. Tuning AutoVacuum for Optimal PerformanceAutoVacuum is PostgreSQL‚Äôs background process that automatically runs VACUUM on tables that meet certain thresholds. For tables with heavy write loads or bulk operations, default settings may not be aggressive enough.Recommended settings for tables with high write activity:ALTER TABLE high_write_table SET (  autovacuum_vacuum_scale_factor = 0.01,  autovacuum_vacuum_threshold = 50,  autovacuum_analyze_scale_factor = 0.005,  autovacuum_analyze_threshold = 50);You can also adjust global settings in postgresql.conf:autovacuum_naptime = 10s                  # Run more frequentlyautovacuum_vacuum_scale_factor = 0.01     # Trigger at 1% of table sizeautovacuum_max_workers = 6                # More workers for larger systemsTo monitor current autovacuum activity:SELECT datname, usename, query, state, backend_typeFROM pg_stat_activityWHERE query LIKE '%autovacuum%';3. Managing Index BloatIndexes suffer from bloat too, sometimes even more severely than tables. When indexes become bloated:  Query performance degrades as PostgreSQL must scan through more index pages  Memory usage increases as more of the bloated index needs to be cached  Write operations slow down as index updates become more expensiveSafe Reindexing in ProductionFor small tables, a simple reindex works:REINDEX INDEX your_index;However, this locks the table for writes. For production systems, the recommended approach is:-- Create a new index without blocking operationsCREATE INDEX CONCURRENTLY new_index_name ON your_table(column);-- Update dependencies (constraints, etc.) to use the new indexALTER TABLE your_table DROP CONSTRAINT constraint_name;ALTER TABLE your_table ADD CONSTRAINT constraint_name   PRIMARY KEY USING INDEX new_index_name;-- Drop the old indexDROP INDEX CONCURRENTLY old_index_name;Scheduling monthly concurrent reindexing for critical tables can be a good preventative measure.4. Data Type Considerations for PerformanceWhile UUIDs are popular for distributed systems:  Random UUIDs cause scattered writes across B-tree indexes  This scattering leads to increased index fragmentation and bloatInstead, consider:  Using ULID (Universally Unique Lexicographically Sortable Identifier)  Sequential UUIDs  PostgreSQL 18 will have improved handling of UUID indexingBeyond Bloat: Other PostgreSQL Performance OptimizationsMemory ConfigurationPostgreSQL performance heavily depends on effective memory usage:  OS Page Cache: The operating system‚Äôs cache for recently accessed disk pages  PostgreSQL Buffer Cache: PostgreSQL‚Äôs own cache for table and index dataYou can query the buffer cache effectiveness:SELECT   sum(heap_blks_read) as heap_read,  sum(heap_blks_hit) as heap_hit,  sum(heap_blks_hit) / (sum(heap_blks_hit) + sum(heap_blks_read)) as ratioFROM pg_statio_user_tables;A ratio above 0.99 (99%) indicates good cache utilization.Checkpoint TuningCheckpoints write dirty pages from memory to disk. Too-frequent checkpoints can cause I/O spikes.Recommended settings:checkpoint_timeout = 300s        # 5 minutes between checkpointsmax_wal_size = 4GB               # Allow more WAL before checkpointcheckpoint_completion_target = 0.9 # Spread checkpoint over more timeConnection ManagementPostgreSQL creates a separate process for each connection, which can become a bottleneck:  Keep connections under 1,000 if possible  Use a connection pooler like PgBouncer for high-connection applications  Consider the architecture: AppServer ‚Üí Pooler ‚Üí PostgreSQLQuery Optimization ToolsTo identify problematic queries:  pg_stat_statements: Collects statistics on all SQL executed  pg_stat_activity: Shows currently running queries  auto_explain: Logs execution plans for slow queries  PG logs: Rich source of information about query performanceLooking Ahead: PostgreSQL Version UpgradesSome of the PostgreSQL improvements includes:  PostgreSQL 16: Introduces pg_stat_io for better I/O monitoring  PostgreSQL 17: Improved SLRU handling and lock partitioning  PostgreSQL 18: Better handling of UUID indexes and continued performance improvementsPractical Takeaways for Rails Developers  Batch Your Operations: Instead of updating records in a loop, use update_all or background jobs  Monitor Bloat Regularly: Set up monitoring for tables with high write activity  Optimize for Reads: Most applications are read-heavy; optimize indexes accordingly  Consider Data Volume Growth: What works for thousands of rows might fail for millionsConclusionDatabase performance isn‚Äôt about reactive firefighting‚Äîit‚Äôs about proactive maintenance and smart design choices. Understanding concepts like bloat, proper indexing, and autovacuum tuning can prevent performance issues before they impact your users.Regular monitoring, combined with the strategic application of the techniques above, will help ensure your PostgreSQL database scales with your application needs. Remember that performance optimization is a continuous process, not a one-time fix."
  },
  
  {
    "title": "The Paradox of Expression: What AI Can Learn from Human Misreading",
    "url": "/posts/the-paradox-of-expression/",
    "categories": "Artificial Intelligence (AI), Emotions",
    "tags": "AI, emotions, mindfulness, deepthoughts",
    "date": "2025-03-19 06:01:10 +0545",
    





    
    "snippet": "There‚Äôs a curious phenomenon in human interactions. When people observe others in moments of deep focus, they often misinterpret serious expressions as unhappiness or discontent. The reality couldn...",
    "content": "There‚Äôs a curious phenomenon in human interactions. When people observe others in moments of deep focus, they often misinterpret serious expressions as unhappiness or discontent. The reality couldn‚Äôt be further from this perception - internally, these focused individuals are typically content and engaged, simply absorbed in thought.This disconnect between external appearance and internal state raises a fascinating question about artificial intelligence. If humans, with all their emotional intelligence and evolutionary adaptations for social reading, frequently misinterpret each other‚Äôs emotional states, what implications does this have for AI systems attempting to analyze human sentiment?We expect machines to accurately decode emotions when even we, as humans, misread the facial cues and body language of our fellow beings. This fundamental challenge highlights the complexity of emotional intelligence and the sophisticated nuance required to bridge the gap between appearance and reality.Perhaps the most profound insights about AI sentiment analysis come not from its successes, but from understanding these very human moments of misinterpretation that remind us how complex and internally rich our emotional lives truly are."
  },
  
  {
    "title": "The AI Revolution: How Business Software is Evolving Beyond SaaS",
    "url": "/posts/how-business-software-is-evolving-beyond-saas/",
    "categories": "Artificial Intelligence (AI), SaaS",
    "tags": "AI, SaaS",
    "date": "2025-02-18 08:10:12 +0545",
    





    
    "snippet": "The Shift from SaaS to AI-Driven Business SoftwareThe landscape of business software is undergoing a seismic transformation. In a recent interview on the BG2 Pod, Satya Nadella, CEO of Microsoft, s...",
    "content": "The Shift from SaaS to AI-Driven Business SoftwareThe landscape of business software is undergoing a seismic transformation. In a recent interview on the BG2 Pod, Satya Nadella, CEO of Microsoft, shared his insights on the future of business applications, suggesting that traditional Software as a Service (SaaS) is reaching its end. Instead, AI-powered platforms are emerging as the new foundation for business operations, automating workflows and seamlessly integrating disparate tools.The Rise and Peak of SaaSFor decades, SaaS applications have been the backbone of enterprise software, offering businesses cloud-based solutions for everything from customer relationship management to project collaboration. Companies like Salesforce pioneered the ‚Äúno software‚Äù model, enabling users to access tools without the need for local installations. The subscription-based pricing structure of SaaS made it a scalable and cost-effective solution, fueling its rapid adoption.During the COVID-19 pandemic, SaaS tools became indispensable. Cloud-based applications facilitated remote work, and platforms like Microsoft Teams ensured uninterrupted communication and collaboration. As businesses adapted, the number of SaaS applications in use grew exponentially, with enterprises now managing an average of 130 different SaaS tools.The Growing Challenges of SaaSDespite its advantages, the SaaS model is not without flaws. Organizations struggle with fragmented data, inefficient workflows, and disjointed user experiences due to the sheer volume of applications in use. Managing multiple tools leads to silos, making seamless integration and automation increasingly difficult.This is where artificial intelligence is set to redefine the game.AI-Powered Business Software: The Next EvolutionNadella envisions an AI-centric future where software applications act less as standalone products and more as intelligent orchestrators of business operations. AI will handle complex tasks across multiple systems, eliminating redundant manual processes.Imagine a scenario where AI autonomously compiles sales data, generates reports, and creates presentations‚Äîtasks that currently require users to navigate multiple applications. AI-driven agents will seamlessly coordinate these workflows, shifting businesses from tool-centric models to outcome-based automation.Microsoft‚Äôs Role in the AI TransitionMicrosoft‚Äôs Magentic-One is a testament to this transformation. Built on the AutoGen framework, this multi-agent system enables AI to independently perform tasks such as data analysis, web interactions, and process automation. Unlike conventional software that executes predefined functions, AI-powered agents dynamically adapt to complex workflows, making business processes more efficient and intelligent.Key Impacts of AI on Business Software1. Decoupling Frontend and BackendAI will serve as an intelligent middleware, integrating with various back-end databases without being restricted to a single SaaS solution. This allows businesses to be more flexible in how they manage and update their data.2. Automated Workflow OrchestrationRather than relying on multiple SaaS tools, AI agents will streamline processes across different applications, reducing inefficiencies and improving productivity.3. Rethinking Business ApplicationsTraditional business software will no longer function in isolation. Instead, AI-driven platforms will become the nerve center of business operations, enabling decision-making and execution without excessive manual intervention.4. Intelligent Assistants in Daily OperationsMicrosoft 365 Copilot exemplifies this shift, acting as an AI-powered assistant that integrates across applications to automate complex workflows. From drafting legal documents to optimizing financial reports, AI tools will allow businesses to focus on strategic goals rather than mundane tasks.The Future of AI-Integrated Business PlatformsThe transition from SaaS to AI-driven platforms marks a fundamental shift in how businesses leverage technology. AI‚Äôs ability to integrate, automate, and optimize workflows will drive efficiency and innovation at an unprecedented scale. Organizations that embrace AI will not only streamline their operations but also gain a competitive edge in an increasingly digital world.While SaaS has served as a transformative force, AI is now shaping the future of business software. As Nadella‚Äôs vision suggests, AI is not just a feature‚Äîit is the new foundation of enterprise technology, set to revolutionize how businesses operate and grow in the years ahead."
  },
  
  {
    "title": "Query Optimization with PostgreSQL Execution Plan Visualizer",
    "url": "/posts/pg-query-plan-visualize/",
    "categories": "PostgreSQL, Performance",
    "tags": "postgresql, performance",
    "date": "2024-03-10 10:40:10 +0545",
    





    
    "snippet": "In the world of database management systems, PostgreSQL stands tall as one of the most powerful and versatile options available. However, even seasoned developers can find themselves facing challen...",
    "content": "In the world of database management systems, PostgreSQL stands tall as one of the most powerful and versatile options available. However, even seasoned developers can find themselves facing challenges when it comes to optimizing database queries for performance. Enter the PostgreSQL Execution Plan Visualizer‚Äîa tool that can turn the seemingly complex task of query optimization into a streamlined and intuitive process.Understanding the PostgreSQL Execution PlanBefore we delve into the visualizer itself, let‚Äôs take a moment to understand what the PostgreSQL execution plan is all about. Essentially, the execution plan outlines the steps that PostgreSQL will take to execute a given query. This includes details such as which indexes will be used, the order in which tables will be scanned, and any additional operations that may be necessary, such as sorting or joining data sets.The Challenge of Query OptimizationOptimizing database queries for performance can be a daunting task, particularly for queries that involve multiple tables, complex joins, or large data sets. Without a clear understanding of how PostgreSQL will execute a given query, developers may find themselves resorting to trial and error‚Äîa time-consuming and often frustrating process.Introducing the PostgreSQL Execution Plan VisualizerThis is where the PostgreSQL Execution Plan Visualizer comes into play. Developed with the needs of developers in mind, this powerful tool provides a visual representation of the execution plan for any given query. By simply inputting a query into the visualizer, developers can instantly see how PostgreSQL plans to execute it, allowing them to identify potential bottlenecks or inefficiencies at a glance.The significance of using EXPLAIN ANALYZE in SQL query is to interpret the resulting execution plans. This will provide valuable insights into query performance optimization.-- Example 1: Simple SELECT queryEXPLAIN ANALYZESELECT * FROM users WHERE age &gt; 25;-- Example 2: JOIN queryEXPLAIN ANALYZESELECT u.name, p.titleFROM users uJOIN posts p ON u.id = p.user_idWHERE u.age &gt; 25;-- Example 3: Aggregation queryEXPLAIN ANALYZESELECT department, AVG(salary) AS avg_salaryFROM employeesGROUP BY department;Key Features and BenefitsVisual Representation: The visualizer presents the execution plan in an intuitive and easy-to-understand format, making it accessible to developers of all skill levels.Identify Performance Issues: By visualizing the execution plan, developers can quickly identify potential performance issues such as sequential scans, inefficient joins, or missing indexes.Optimize with Confidence: Armed with insights from the visualizer, developers can make informed decisions about how to optimize their queries for maximum performance, saving time and frustration in the process.Getting Started with the PostgreSQL Execution Plan VisualizerReady to supercharge your query optimization efforts? Getting started with the PostgreSQL Execution Plan Visualizer is easy. Simply visit https://explain.depesz.com/ or https://explain.dalibo.com and input your query. Within seconds, you‚Äôll have a clear visual representation of how PostgreSQL plans to execute it, allowing you to optimize with confidence.To optimize performance there is a term called N + 1 queries which needs to avoid. Thus, we might need to load associated records in advance and limit the number of SQL queries call made to the database using :includes also referred to as eager loading. Depending on the requirement of your query, :includes will use either the ActiveRecord method :preload or :eager_load.But there might be certain situation, where we blindly follow :includes, and, add unused association just a shake of solving N + 1, and later, it creates another performance issue something like PG::InternalError: ERROR: invalid memory alloc request size. That means we are preloading huge number of unwanted records in memory and the size of memory exhausted, issue is visualize in following screen. In this case, we need to optimize by removing unwanted association added inside includes that exhaust memory.ConclusionIn the fast-paced world of database management, optimizing query performance is essential. With the PostgreSQL Execution Plan Visualizer, developers can take the guesswork out of query optimization and streamline the process for maximum efficiency. Try it out for yourself and see the difference it can make in your development workflow."
  },
  
  {
    "title": "Tailwind CSS Transitions And Animations",
    "url": "/posts/tailwind-css-transitions-and-animations/",
    "categories": "Tailwind CSS, Transitions and Animations",
    "tags": "css, tailwind_css, UI",
    "date": "2024-01-10 10:30:18 +0545",
    





    
    "snippet": "Transitions and animations can add a polished and interactive feel to your web application. Tailwind CSS provides utility classes to easily apply transitions and animations to elements.TransitionsT...",
    "content": "Transitions and animations can add a polished and interactive feel to your web application. Tailwind CSS provides utility classes to easily apply transitions and animations to elements.TransitionsTransitions allow you to smoothly animate changes to CSS properties, such as changing colors, sizes, or positions. Tailwind CSS provides utility classes to specify transition properties and durations.Here‚Äôs how you can use transition classes in Tailwind CSS:&lt;button class=\"bg-blue-500 hover:bg-blue-700 transition-colors duration-300 text-white font-bold py-2 px-4 rounded\"&gt;    Hover over me&lt;/button&gt;In this example:  transition-colors class specifies that the transition will be applied to color changes.  duration-300 class specifies the duration of the transition in milliseconds (300ms in this case).When you hover over the button, you‚Äôll notice that the color change is animated smoothly over the specified duration.AnimationsTailwind CSS also provides utility classes to apply pre-defined animations to elements. These animations are based on the popular animate.css library.Here‚Äôs how you can use animation classes in Tailwind CSS:&lt;div class=\"animate-bounce\"&gt;Bouncing element&lt;/div&gt;In this example, the animate-bounce class applies a bouncing animation to the element.Customizing Transitions and AnimationsTailwind CSS allows you to customize transitions and animations by defining custom CSS variables in your configuration file (tailwind.config.js) and then using those variables in your utility classes.For example, you can define custom transition durations:// tailwind.config.jsmodule.exports = {  theme: {    extend: {      transitionDuration: {        '2000': '2000ms',      }    }  }}Then, you can use the custom transition duration in your HTML:&lt;button class=\"bg-blue-500 hover:bg-blue-700 transition-colors duration-2000 text-white font-bold py-2 px-4 rounded\"&gt;    Hover over me&lt;/button&gt;This will apply a transition with a duration of 2000 milliseconds (2 seconds) when the button is hovered over."
  },
  
  {
    "title": "AI And Future",
    "url": "/posts/ai-and-future/",
    "categories": "Artificial Intelligence (AI)",
    "tags": "AI",
    "date": "2024-01-09 12:00:10 +0545",
    





    
    "snippet": "Artificial Intelligence (AI), a term first introduced by John McCarthy, is a discipline that focuses on the creation of intelligent machines that work and react like humans, and The term ‚ÄúMachine I...",
    "content": "Artificial Intelligence (AI), a term first introduced by John McCarthy, is a discipline that focuses on the creation of intelligent machines that work and react like humans, and The term ‚ÄúMachine Intelligence‚Äù was first coined by Alan Turing, who conducted substantial research in this field. The concept of ‚ÄúArtificial Brain‚Äù was born out of the desire to replicate human intelligence in machines. AI as a field of study was officially recognized in 1956 and has since experienced periods of hype and disillusionment. The AI renaissance of the late 2010s was driven by breakthroughs in deep learning and the transformer model, leading to a surge in interest and funding, primarily from companies and research institutions in the United States.AI technology has found its way into a wide range of sectors, governments, and scientific disciplines. Notable applications include sophisticated search engines such as Bing, recommendation algorithms used by YouTube, Amazon, Spotify, Alibaba, and Netflix, voice interactions like Google Assistant, Cortana, Siri, and Alexa, autonomous vehicles like Waymo, Tesla, creative tools like ChatGPT, AI Arit, DALL-E and AI music, and superior gameplay and analysis in strategic games like chess and Go.The concept of an AI takeover, where artificial intelligence surpasses human intelligence and gains control over the planet, is a recurring theme in science fiction. Prominent individuals like Stephen Hawking and Elon Musk have advocated for research to ensure that superintelligent machines remain under human control.Esteemed physicist Stephen Hawking, Microsoft co-founder Bill Gates, and SpaceX founder Elon Musk have all voiced serious concerns about the potential for AI to evolve to a point where it becomes uncontrollable by humans. Hawking even speculated that such a scenario could ‚Äúsignify the end of the human race‚Äù. He once stated, ‚ÄúAchieving AI would be the most significant event in human history. Regrettably, it might also be the last unless we learn how to avoid the risks.‚Äù Hawking predicted that AI could offer ‚Äúimmeasurable benefits and risks‚Äù in the coming decades, including ‚Äútechnology outsmarting financial markets, out-inventing human researchers, out-manipulating human leaders, and developing weapons we cannot even comprehend.‚Äù In 2015, Nick Bostrom, along with Stephen Hawking, Max Tegmark, Elon Musk, Lord Martin Rees, Jaan Tallinn, and numerous AI researchers, signed the Future of Life Institute‚Äôs open letter addressing the potential risks and benefits associated with artificial intelligence.A consensus among experts suggests that research on making AI systems robust and beneficial is both important and timely. They propose that there are tangible research directions that can be pursued today.According to OpenAI, AI is not on the verge of taking over the world. Tech experts argue that it is improbable that a single AI system could become so powerful as to dominate the world, and AI is not expected to replace humans in the near future.However, some speculate that AI could actually be the savior of the world. For example, Google Health predicts that by 2050, we could see personalized treatment plans, AI-assisted surgeries, and even predictive healthcare models.Others caution that the rapid advancement of AI could significantly impact labor markets globally. However, there are certain jobs that AI cannot replace. Some examples include:  Mental Health Professionals  Social Workers and Community Outreach Roles  Artists anad Musicians  Strategic Planners and Analysts  Research Scientists and Engineers  Judges  Leadership and Management RolesAI is not a threat to humanity, but a powerful tool that affects our lives in various ways. However, we should be careful about the alignment and ethics of AI systems, as they could surpass human intelligence and capabilities in many domains. AI also changes the nature of work and creates new challenges and opportunities for human workers. The future of AI is not a dystopia, but a dynamic and exciting world that requires adaptation and innovation."
  },
  
  {
    "title": "Tailwind CSS Flex and Grid",
    "url": "/posts/tailwind-css-flex-and-grid/",
    "categories": "Tailwind CSS, Flex and Grid",
    "tags": "css, tailwind_css, UI",
    "date": "2024-01-08 11:40:18 +0545",
    





    
    "snippet": "Let‚Äôs explore utility classes for working with Flex and Grid in Tailwind CSS. Flexbox and Grid can be utilized in Tailwind CSS to create responsive and flexible layouts with minimal effort.FlexThis...",
    "content": "Let‚Äôs explore utility classes for working with Flex and Grid in Tailwind CSS. Flexbox and Grid can be utilized in Tailwind CSS to create responsive and flexible layouts with minimal effort.FlexThis section demonstrates the use of Flexbox in Tailwind CSS. The flex class is used on the parent container to create a flex container. The justify-between class is applied to evenly distribute the child elements along the main axis (horizontally) with space between them. Each child element has flex-1 class to make them grow and fill the available space equally.&lt;div class=\"container mx-auto py-6\"&gt;    &lt;!-- Flexbox Example --&gt;    &lt;p class=\"text-lg text-left text-gray-600 font-bold\"&gt;Flexbox Example&lt;/p&gt;    &lt;div class=\"flex justify-between\"&gt;        &lt;div class=\"flex-1 bg-gray-200 p-4\"&gt;Item 1&lt;/div&gt;        &lt;div class=\"flex-1 bg-gray-300 p-4\"&gt;Item 2&lt;/div&gt;        &lt;div class=\"flex-1 bg-gray-400 p-4\"&gt;Item 3&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;GridThis section showcases the usage of Grid in Tailwind CSS. The grid class is used on the parent container to create a grid container. Different grid-cols-{number} classes are applied to define the number of columns at different screen sizes. The gap-4 class adds a gap of 1rem between grid items.&lt;div class=\"container mx-auto py-6\"&gt;    &lt;!-- Grid Example --&gt;    &lt;p class=\"text-lg text-left text-gray-600 font-bold\"&gt;Grid Example&lt;/p&gt;    &lt;div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4\"&gt;        &lt;div class=\"bg-gray-200 p-4\"&gt;Item 1&lt;/div&gt;        &lt;div class=\"bg-gray-300 p-4\"&gt;Item 2&lt;/div&gt;        &lt;div class=\"bg-gray-400 p-4\"&gt;Item 3&lt;/div&gt;        &lt;div class=\"bg-gray-500 p-4\"&gt;Item 4&lt;/div&gt;        &lt;div class=\"bg-gray-600 p-4\"&gt;Item 5&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;"
  },
  
  {
    "title": "Tailwind CSS Form Components",
    "url": "/posts/tailwind-css-form-components/",
    "categories": "Tailwind CSS, Form Components",
    "tags": "css, tailwind_css, UI",
    "date": "2024-01-07 11:40:18 +0545",
    





    
    "snippet": "Let‚Äôs explore utility classes for working with forms and inputs in Tailwind CSS.Here are some examples of how you can style forms and inputs using Tailwind CSS utility classes.Form LayoutTailwind C...",
    "content": "Let‚Äôs explore utility classes for working with forms and inputs in Tailwind CSS.Here are some examples of how you can style forms and inputs using Tailwind CSS utility classes.Form LayoutTailwind CSS provides utility classes for creating form layouts easily. You can use flexbox utilities to align form elements horizontally or vertically.&lt;form class=\"flex flex-col\"&gt;    &lt;!-- Vertical form layout --&gt;    &lt;label for=\"username\"&gt;Username:&lt;/label&gt;    &lt;input type=\"text\" id=\"username\" name=\"username\" class=\"border p-2 mb-4\"&gt;    &lt;label for=\"password\"&gt;Password:&lt;/label&gt;    &lt;input type=\"password\" id=\"password\" name=\"password\" class=\"border p-2 mb-4\"&gt;    &lt;button type=\"submit\" class=\"bg-blue-500 text-white font-bold py-2 px-4 rounded\"&gt;Submit&lt;/button&gt;&lt;/form&gt;Input StylesYou can style inputs using utility classes like border, p, rounded, etc. You can also use focus and hover states to add interactivity.&lt;input type=\"text\" class=\"border border-gray-300 p-2 rounded focus:outline-none focus:ring focus:border-blue-500\"&gt;Checkboxes and Radio ButtonsTailwind CSS provides styles for checkboxes and radio buttons as well.&lt;label class=\"inline-flex items-center\"&gt;    &lt;input type=\"checkbox\" class=\"form-checkbox text-blue-500\"&gt;    &lt;span class=\"ml-2\"&gt;Remember me&lt;/span&gt;&lt;/label&gt;&lt;label class=\"inline-flex items-center\"&gt;    &lt;input type=\"radio\" class=\"form-radio text-blue-500\" name=\"radio\"&gt;    &lt;span class=\"ml-2\"&gt;Option 1&lt;/span&gt;&lt;/label&gt;&lt;label class=\"inline-flex items-center\"&gt;    &lt;input type=\"radio\" class=\"form-radio text-blue-500\" name=\"radio\"&gt;    &lt;span class=\"ml-2\"&gt;Option 2&lt;/span&gt;&lt;/label&gt;Select MenusYou can style select menus using Tailwind CSS classes.&lt;select class=\"border p-2 rounded\"&gt;    &lt;option&gt;Option 1&lt;/option&gt;    &lt;option&gt;Option 2&lt;/option&gt;    &lt;option&gt;Option 3&lt;/option&gt;&lt;/select&gt;Validation StatesYou can use utility classes to style form elements based on their validation states.&lt;input type=\"text\" class=\"border p-2 rounded focus:outline-none focus:ring focus:border-blue-500\"&gt;&lt;span class=\"text-red-500\"&gt;Invalid input&lt;/span&gt;Tailwind classes used in Image components&lt;div class=\"container mx-auto py-6\"&gt;    &lt;!-- Responsive Image --&gt;    &lt;img src=\"https://source.unsplash.com/random/800x600\" alt=\"Random Image\" class=\"w-full\"&gt;    &lt;!-- Image with Specific Size --&gt;    &lt;img src=\"https://source.unsplash.com/random/400x300\" alt=\"Random Image\" class=\"w-64 h-48\"&gt;    &lt;!-- Rounded Corners --&gt;    &lt;img src=\"https://source.unsplash.com/random/800x600\" alt=\"Random Image\" class=\"rounded-lg\"&gt;    &lt;!-- Image with Shadow --&gt;    &lt;img src=\"https://source.unsplash.com/random/800x600\" alt=\"Random Image\" class=\"shadow-md\"&gt;    &lt;!-- Image with Aspect Ratio --&gt;    &lt;div class=\"aspect-w-16 aspect-h-9\"&gt;        &lt;img src=\"https://source.unsplash.com/random/800x600\" alt=\"Random Image\" class=\"object-cover\"&gt;    &lt;/div&gt;&lt;/div&gt;"
  },
  
  {
    "title": "Tailwind CSS Button Styling",
    "url": "/posts/tailwind-css-button-styling/",
    "categories": "Tailwind CSS, Button Styling",
    "tags": "css, tailwind_css, UI",
    "date": "2024-01-06 11:40:18 +0545",
    





    
    "snippet": "Let‚Äôs dive into buttons and interactive elements in Tailwind CSS.Button StylesTailwind CSS provides utility classes to easily style buttons. You can use classes like bg-blue-500, text-white, font-b...",
    "content": "Let‚Äôs dive into buttons and interactive elements in Tailwind CSS.Button StylesTailwind CSS provides utility classes to easily style buttons. You can use classes like bg-blue-500, text-white, font-bold, py-2, px-4, rounded, etc., to create visually appealing buttons.&lt;button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"&gt;    Click me&lt;/button&gt;Button SizesYou can adjust the size of buttons using utility classes like text-xs, text-sm, text-lg, etc.&lt;button class=\"bg-blue-500 text-white font-bold py-2 px-4 rounded text-xs\"&gt;    Small Button&lt;/button&gt;&lt;button class=\"bg-blue-500 text-white font-bold py-2 px-4 rounded text-lg\"&gt;    Large Button&lt;/button&gt;Button StatesTailwind CSS allows you to define styles for different states of buttons, such as hover, focus, active, and disabled.&lt;button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"&gt;    Hoverable Button&lt;/button&gt;&lt;button class=\"bg-blue-500 active:bg-blue-700 text-white font-bold py-2 px-4 rounded\"&gt;    Clicked Button&lt;/button&gt;&lt;button class=\"bg-gray-300 text-gray-500 font-bold py-2 px-4 rounded cursor-not-allowed\" disabled&gt;    Disabled Button&lt;/button&gt;Button GroupsYou can group multiple buttons together using flexbox utilities to create button groups.&lt;div class=\"flex space-x-4\"&gt;    &lt;button class=\"bg-blue-500 text-white font-bold py-2 px-4 rounded\"&gt;Button 1&lt;/button&gt;    &lt;button class=\"bg-blue-500 text-white font-bold py-2 px-4 rounded\"&gt;Button 2&lt;/button&gt;    &lt;button class=\"bg-blue-500 text-white font-bold py-2 px-4 rounded\"&gt;Button 3&lt;/button&gt;&lt;/div&gt;These are some examples of how you can create and style buttons and interactive elements using Tailwind CSS utility classes."
  },
  
  {
    "title": "Tailwind CSS Styling Background and Borders",
    "url": "/posts/tailwind-css-background-and-borders/",
    "categories": "Tailwind CSS, Styling Background And Borders",
    "tags": "css, tailwind_css, UI",
    "date": "2024-01-05 11:40:18 +0545",
    





    
    "snippet": "Let‚Äôs explore some basic utility classes provided by Tailwind CSS for styling text elements.Background ColorYou can set the background color of an element using utility classes like bg-red-500, bg-...",
    "content": "Let‚Äôs explore some basic utility classes provided by Tailwind CSS for styling text elements.Background ColorYou can set the background color of an element using utility classes like bg-red-500, bg-blue-700, etc., where the number represents the shade of the color.&lt;div class=\"bg-red-500 p-4\"&gt;    &lt;p&gt;Red Background&lt;/p&gt;&lt;/div&gt;&lt;div class=\"bg-blue-700 p-4\"&gt;    &lt;p&gt;Blue Background&lt;/p&gt;&lt;/div&gt;Background OpacityYou can also adjust the opacity of the background color using utility classes like bg-opacity-25, bg-opacity-50, etc.&lt;div class=\"bg-red-500 bg-opacity-25 p-4\"&gt;    &lt;p&gt;Red Background with 25% Opacity&lt;/p&gt;&lt;/div&gt;&lt;div class=\"bg-blue-700 bg-opacity-50 p-4\"&gt;    &lt;p&gt;Blue Background with 50% Opacity&lt;/p&gt;&lt;/div&gt;BorderTailwind CSS provides utility classes for adding borders to elements. You can use classes like border, border-solid, border-dashed, border-dotted, etc.&lt;div class=\"border border-black p-4\"&gt;    &lt;p&gt;Border&lt;/p&gt;&lt;/div&gt;&lt;div class=\"border border-red-500 border-solid p-4\"&gt;    &lt;p&gt;Red Border&lt;/p&gt;&lt;/div&gt;Rounded CornersYou can apply rounded corners to elements using classes like rounded-sm, rounded-md, rounded-lg, etc.&lt;div class=\"bg-gray-300 rounded-lg p-4\"&gt;    &lt;p&gt;Rounded Corners&lt;/p&gt;&lt;/div&gt;Box ShadowYou can add box shadows to elements using utility classes like shadow-sm, shadow-md, shadow-lg, etc.&lt;div class=\"bg-gray-300 rounded-lg shadow-md p-4\"&gt;    &lt;p&gt;Box Shadow&lt;/p&gt;&lt;/div&gt;These are some of the basic utility classes for styling backgrounds, borders, and shadows in Tailwind CSS. Experiment with these classes to achieve the desired visual effects for your elements."
  },
  
  {
    "title": "Tailwind CSS Text Styles",
    "url": "/posts/tailwind-css-text-styles/",
    "categories": "Tailwind CSS, Text Styles",
    "tags": "css, tailwind_css, UI",
    "date": "2024-01-04 11:40:18 +0545",
    





    
    "snippet": "Let‚Äôs explore some basic utility classes provided by Tailwind CSS for styling text elements.Text Color:Tailwind CSS provides utility classes for changing the color of text. You can use classes like...",
    "content": "Let‚Äôs explore some basic utility classes provided by Tailwind CSS for styling text elements.Text Color:Tailwind CSS provides utility classes for changing the color of text. You can use classes like text-black, text-white, text-red-500, etc., where the number represents the shade of the color.&lt;p class=\"text-black\"&gt;Black Text&lt;/p&gt;&lt;p class=\"text-red-500\"&gt;Red Text&lt;/p&gt;&lt;p class=\"text-blue-700\"&gt;Blue Text&lt;/p&gt;Text SizeYou can adjust the size of text using classes like text-xs, text-sm, text-lg, etc., which stand for extra small, small, large, etc.&lt;p class=\"text-xs\"&gt;Extra Small Text&lt;/p&gt;&lt;p class=\"text-lg\"&gt;Large Text&lt;/p&gt;&lt;p class=\"text-3xl\"&gt;Extra Large Text&lt;/p&gt;Font WeightTo change the font weight, use classes like font-thin, font-normal, font-bold, etc.&lt;p class=\"font-thin\"&gt;Thin Font&lt;/p&gt;&lt;p class=\"font-bold\"&gt;Bold Font&lt;/p&gt;Text AlignmentYou can align text using classes like text-left, text-center, text-right, etc.&lt;p class=\"text-left\"&gt;Left Aligned Text&lt;/p&gt;&lt;p class=\"text-center\"&gt;Center Aligned Text&lt;/p&gt;&lt;p class=\"text-right\"&gt;Right Aligned Text&lt;/p&gt;Text DecorationTo add text decoration like underline, line-through, etc., use classes like underline, line-through.&lt;p class=\"underline\"&gt;Underlined Text&lt;/p&gt;&lt;p class=\"line-through\"&gt;Line-through Text&lt;/p&gt;These are just a few examples of the text utility classes provided by Tailwind CSS. You can combine these classes to achieve the desired styling for your text elements."
  },
  
  {
    "title": "Tailwind CSS Navigation",
    "url": "/posts/tailwind-css-navigation/",
    "categories": "Tailwind CSS, Navigation",
    "tags": "css, tailwind_css, UI",
    "date": "2024-01-03 11:40:18 +0545",
    





    
    "snippet": "Let‚Äôs explore utility classes for working with navigation menus and dropdowns in Tailwind CSS.Horizontal Navigation Menu:You can create a horizontal navigation menu using flexbox utilities to align...",
    "content": "Let‚Äôs explore utility classes for working with navigation menus and dropdowns in Tailwind CSS.Horizontal Navigation Menu:You can create a horizontal navigation menu using flexbox utilities to align menu items horizontally.&lt;nav class=\"flex\"&gt;    &lt;a href=\"#\" class=\"p-2\"&gt;Home&lt;/a&gt;    &lt;a href=\"#\" class=\"p-2\"&gt;About&lt;/a&gt;    &lt;a href=\"#\" class=\"p-2\"&gt;Services&lt;/a&gt;    &lt;a href=\"#\" class=\"p-2\"&gt;Contact&lt;/a&gt;&lt;/nav&gt;Vertical Navigation Menu:Similarly, you can create a vertical navigation menu using flexbox utilities to align menu items vertically.&lt;nav class=\"flex flex-col\"&gt;    &lt;a href=\"#\" class=\"p-2\"&gt;Home&lt;/a&gt;    &lt;a href=\"#\" class=\"p-2\"&gt;About&lt;/a&gt;    &lt;a href=\"#\" class=\"p-2\"&gt;Services&lt;/a&gt;    &lt;a href=\"#\" class=\"p-2\"&gt;Contact&lt;/a&gt;&lt;/nav&gt;Dropdown Menu:You can create dropdown menus using nested lists and CSS. Tailwind CSS provides utility classes for styling dropdowns and managing their visibility.&lt;nav&gt;    &lt;ul class=\"flex\"&gt;        &lt;li&gt;            &lt;a href=\"#\" class=\"p-2\"&gt;Home&lt;/a&gt;        &lt;/li&gt;        &lt;li&gt;            &lt;a href=\"#\" class=\"p-2\"&gt;About&lt;/a&gt;        &lt;/li&gt;        &lt;li&gt;            &lt;a href=\"#\" class=\"p-2\"&gt;Services&lt;/a&gt;            &lt;ul class=\"absolute hidden bg-gray-100 p-2\"&gt;                &lt;li&gt;&lt;a href=\"#\" class=\"block\"&gt;Service 1&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=\"#\" class=\"block\"&gt;Service 2&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=\"#\" class=\"block\"&gt;Service 3&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/li&gt;        &lt;li&gt;            &lt;a href=\"#\" class=\"p-2\"&gt;Contact&lt;/a&gt;        &lt;/li&gt;    &lt;/ul&gt;&lt;/nav&gt;Responsive Navigation:You can use responsive classes to create navigation menus that adapt to different screen sizes.&lt;nav class=\"flex flex-col lg:flex-row\"&gt;    &lt;!-- Menu items here --&gt;&lt;/nav&gt;These are some examples of how you can create navigation menus and dropdowns using Tailwind CSS utility classes. Experiment with these classes to create navigation structures that match your design requirements.Here is full example code:&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;    &lt;head&gt;        &lt;meta charset=\"UTF-8\"&gt;        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;        &lt;title&gt;Let's explore Tailwind CSS&lt;/title&gt;        &lt;link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\"&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;!-- Your content goes here --&gt;        &lt;div class=\"container mx-auto py-6\"&gt;            &lt;h1 class=\"text-3xl font-bold text-center text-gray-800\"&gt;Welcome! Let's walkthrough with Tailwind CSS&lt;/h1&gt;            &lt;p class=\"text-lg text-center text-gray-600\"&gt;Let's explore Tailwind!&lt;/p&gt;        &lt;/div&gt;        &lt;div class=\"container mx-auto py-6\"&gt;            &lt;p class=\"text-lg text-left text-gray-600 font-bold\"&gt;Horizontal Nav&lt;/p&gt;            &lt;nav&gt;                &lt;ul class=\"flex\"&gt;                    &lt;li&gt;                        &lt;a href=\"#\" class=\"p-2\"&gt;Home&lt;/a&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;a href=\"#\" class=\"p-2\"&gt;About&lt;/a&gt;                    &lt;/li&gt;                    &lt;li class=\"relative\"&gt;                        &lt;a href=\"#\" class=\"p-2\"&gt;Services&lt;/a&gt;                        &lt;ul class=\"dropdown-menu hidden bg-gray-100 absolute top-full left-0\"&gt;                            &lt;li&gt;&lt;a href=\"#\" class=\"block p-2\"&gt;Service 1&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=\"#\" class=\"block p-2\"&gt;Service 2&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=\"#\" class=\"block p-2\"&gt;Service 3&lt;/a&gt;&lt;/li&gt;                        &lt;/ul&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;a href=\"#\" class=\"p-2\"&gt;Contact&lt;/a&gt;                    &lt;/li&gt;                &lt;/ul&gt;            &lt;/nav&gt;            &lt;p class=\"text-lg text-left text-gray-600 font-bold\"&gt;Vertical Nav&lt;/p&gt;            &lt;nav class=\"flex flex-col\"&gt;                &lt;a href=\"#\" class=\"p-2\"&gt;Home&lt;/a&gt;                &lt;a href=\"#\" class=\"p-2\"&gt;About&lt;/a&gt;                &lt;a href=\"#\" class=\"p-2\"&gt;Services&lt;/a&gt;                &lt;a href=\"#\" class=\"p-2\"&gt;Contact&lt;/a&gt;            &lt;/nav&gt;        &lt;/div&gt;        &lt;!-- JavaScript --&gt;        &lt;script type=\"text/javascript\"&gt;            document.addEventListener(\"DOMContentLoaded\", function() {                // Get all dropdown toggle buttons                var dropdownToggleButtons = document.querySelectorAll('.relative &gt; a');                                // Add event listeners to toggle dropdown visibility                dropdownToggleButtons.forEach(function(button) {                    button.addEventListener('click', function(event) {                        event.preventDefault(); // Prevent default anchor behavior                        var dropdownMenu = this.parentElement.querySelector('.dropdown-menu');                        dropdownMenu.classList.toggle('hidden');                    });                });                // Close dropdowns when clicking outside                document.addEventListener('click', function(event) {                    if (!event.target.closest('.relative')) {                        var dropdownMenus = document.querySelectorAll('.dropdown-menu');                        dropdownMenus.forEach(function(menu) {                            menu.classList.add('hidden');                        });                    }                });            });        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;"
  },
  
  {
    "title": "Tailwind CSS Setup",
    "url": "/posts/tailwind-css-setup/",
    "categories": "Tailwind CSS, Setup",
    "tags": "css, tailwind_css, UI",
    "date": "2024-01-02 11:40:18 +0545",
    





    
    "snippet": "To begin using Tailwind CSS in your project, you first need to set up a project environment. Here‚Äôs how you can set up Tailwind CSS in a simple HTML project:      Create an HTML file: Let‚Äôs create ...",
    "content": "To begin using Tailwind CSS in your project, you first need to set up a project environment. Here‚Äôs how you can set up Tailwind CSS in a simple HTML project:      Create an HTML file: Let‚Äôs create an index.html file where we‚Äôll write our HTML code.        Include Tailwind CSS: You can include Tailwind CSS in your HTML file by either linking to a CDN or by installing it via npm and including the compiled CSS file. For simplicity, we‚Äôll use the CDN approach here.  &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;    &lt;meta charset=\"UTF-8\"&gt;    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;    &lt;title&gt;My Tailwind CSS Project&lt;/title&gt;    &lt;link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\"&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- Your content goes here --&gt;&lt;/body&gt;&lt;/html&gt;Start using Tailwind classes: Now you can start using Tailwind CSS classes directly in your HTML elements to style them. For example:&lt;div class=\"container mx-auto py-6\"&gt;    &lt;h1 class=\"text-3xl font-bold text-center text-gray-800\"&gt;Welcome to My Tailwind CSS Project&lt;/h1&gt;    &lt;p class=\"text-lg text-center text-gray-600\"&gt;Let's explore Tailwind together!&lt;/p&gt;&lt;/div&gt;In this example, container, mx-auto, py-6, text-3xl, font-bold, text-center, text-gray-800, text-lg, text-gray-600 are Tailwind CSS utility classes that style the HTML elements.That‚Äôs it! You‚Äôve successfully set up Tailwind CSS in your project. Now you can continue exploring and using Tailwind‚Äôs utility classes to style your HTML elements further."
  },
  
  {
    "title": "Forecasting the Future: How Automated ML and Tools Like BQML Can Save You Time and Effort",
    "url": "/posts/automated-demand-forecasting-and-auto-ml/",
    "categories": "Artificial Intelligence (AI), Machine Learning, BigQuery",
    "tags": "AI, ML, BigQuery",
    "date": "2023-04-10 09:40:18 +0545",
    





    
    "snippet": "In the age of big data, predicting future trends is no longer a crystal ball endeavor. Machine learning (ML) has emerged as a powerful tool for businesses to unlock insights from their data and gai...",
    "content": "In the age of big data, predicting future trends is no longer a crystal ball endeavor. Machine learning (ML) has emerged as a powerful tool for businesses to unlock insights from their data and gain a competitive edge. But what happens when building and deploying ML models feels like navigating a complex labyrinth? That‚Äôs where Automated ML (AutoML) and platforms like BigQuery ML (BQML) come in, ready to simplify the process and make forecasting accessible to everyone.AutoML vs. Manual ML: A Tale of Two ApproachesImagine two scenarios:Google Cloud AI Platform:You‚Äôre a data analyst with a solid understanding of ML concepts. You meticulously craft features, experiment with different algorithms, and fine-tune your model like a seasoned sculptor. This approach offers fine-grained control, but it requires significant time and expertise.Google‚Äôs AutoML boasts an intuitive interface that allows users to create and deploy custom machine learning models with minimal manual effort. For instance, AutoML Vision enables the creation of image recognition models by simply uploading labeled images, showcasing Google‚Äôs commitment to making AI accessible.Microsoft Azure Machine Learning:You‚Äôre a business owner with a mountain of data but limited ML knowledge. You simply upload your data, define the desired outcome (e.g., demand forecasting), and let Azure‚Äôs AutoML work its magic. It automatically explores various algorithms and configurations, presenting you with the best performing model ‚Äì no coding required.On the Azure front, Microsoft‚Äôs Automated ML simplifies the end-to-end machine learning process, assisting in data preparation, algorithm selection, and hyperparameter tuning. Businesses can leverage Azure‚Äôs offering for tasks ranging from forecasting to classification, making machine learning accessible across various domains.Both approaches have their merits. Google‚Äôs platform caters to data scientists who want to tinker and optimize, while Azure‚Äôs AutoML empowers non-technical users to leverage the power of ML for real-world applications.BQML: Forecasting on AutopilotGoogle Cloud‚Äôs BigQuery ML is a shining example of AutoML in action. Built directly into BigQuery, the data warehouse beloved by many businesses, BQML lets you train and deploy machine learning models directly using SQL queries. This means no more jumping between platforms or wrestling with complex coding ‚Äì just write familiar queries and let BQML handle the heavy lifting.Demand Forecasting without Breaking a SweatNow, let‚Äôs talk about the future you‚Äôre eager to predict: demand. Building a custom forecasting model from scratch can be daunting. But here‚Äôs the good news: you don‚Äôt have to!Several tools and services can help you forecast demand without the coding crunch:BigQuery Forecasting:BQML offers pre-built forecasting templates specifically designed for time series data. Simply choose the template that matches your needs, specify the target variable (e.g., sales), and BQML automatically generates a forecast.Google Cloud Vertex AI:This unified AI platform offers various forecasting options, including pre-trained models and AutoML capabilities. You can leverage pre-trained models like Prophet for quick predictions or tap into AutoML Forecasting for more customized solutions.Microsoft Azure Forecasting Services:Similar to Google‚Äôs offerings, Azure provides pre-built models and AutoML features for demand forecasting. You can choose from various algorithms and let Azure find the best fit for your data.The Takeaway:The future of forecasting is automated, accessible, and ready to empower businesses of all sizes. By embracing AutoML tools like BigQuery ML and utilizing pre-built models, you can unlock valuable insights from your data and confidently navigate the ever-changing landscape of demand. So, ditch the crystal ball, embrace the power of ML, and let the future unfold before your eyes."
  },
  
  {
    "title": "Unlocking Creativity: Prompt Engineering in Generative AI",
    "url": "/posts/generative-ai-with-prompt-engineering/",
    "categories": "Artificial Intelligence (AI), Prompt Engineering, ChatGPT",
    "tags": "chatGPT, prompt_engineering, AI, LLM",
    "date": "2023-04-05 10:40:18 +0545",
    





    
    "snippet": "In the ever-evolving landscape of Generative AI, one concept has taken center stage, becoming a catalyst for creativity and innovation‚ÄîPrompt Engineering. This technique, akin to providing a well-c...",
    "content": "In the ever-evolving landscape of Generative AI, one concept has taken center stage, becoming a catalyst for creativity and innovation‚ÄîPrompt Engineering. This technique, akin to providing a well-crafted instruction to a creative assistant, has proven to be a powerful tool in harnessing the potential of models like ChatGPT (Utilizes OpenAI‚Äôs Transformer architecture), Bard (built on Google‚Äôs PaLM 2 architecture) and other Large Language Models (LLMs). Let‚Äôs embark on a journey to understand the nuances and impact of prompt engineering in the realm of Generative AI.What is Generative AI?Generative AI is an AI that can create  Text  Images  Audio  Videos  3D modelsGiving Generative AIs input is known as AI Prompt Writing or AI Prompt Engineering.What is Prompt Engineering?Prompt engineering is the strategic construction of prompts or input instructions given to generative models, particularly Large Language Models (LLMs), to elicit desired outputs. In the context of Generative AI, such as ChatGPT, the quality and specificity of prompts play a pivotal role in influencing the model‚Äôs responses. It‚Äôs not just about input; it‚Äôs about crafting a precise and context-rich instruction that guides the model to generate relevant and coherent content.The Art and Science of Crafting Effective Prompts  Clarity and Specificity:The more specific and clear the prompt, the better the model, including Large Language Models (LLMs), understands the desired outcome. Explore techniques for refining prompts to achieve optimal results.  Contextual Cues:Leveraging contextual cues in prompts enhances the model‚Äôs, including Large Language Models (LLMs), ability to grasp nuances and maintain coherence in responses. Dive into examples that showcase the impact of context in prompt engineering.  Creative Exploration:Beyond specificity, prompt engineering opens doors to creative exploration, especially with the capabilities of Large Language Models (LLMs). Learn how to balance guidance with openness, allowing the model to generate imaginative and unexpected content.Applications Across Industries  Content Generation:Discover how prompt engineering, coupled with Large Language Models (LLMs), is revolutionizing content creation by enabling writers, marketers, and creatives to collaborate with AI models to generate compelling and customized content.  Problem Solving:Explore real-world applications of prompt engineering, driven by Large Language Models (LLMs), in problem-solving scenarios, where the technique aids in generating solutions, ideas, and insights.Challenges and ConsiderationsWhile prompt engineering, especially with Large Language Models (LLMs), offers immense potential, it comes with its set of challenges. From over-specification to balancing creativity, understanding the pitfalls is crucial for effective utilization.The Future of Prompt EngineeringAs Generative AI, driven by Large Language Models (LLMs), continues to advance, the role of prompt engineering is expected to grow. Explore emerging trends and potential developments that could shape the future of this innovative approach.The Role of Large Language Models (LLMs) in Prompt Engineering:Central to the success of prompt engineering is the advent of Large Language Models (LLMs), such as GPT-3 and similar advanced systems. These models, with their vast neural networks and extensive training data, possess an unparalleled ability to understand and generate human-like text. Leveraging the prowess of Large Language Models (LLMs) in prompt engineering amplifies the impact of well-crafted instructions, as these models can comprehend intricate contextual cues and produce responses with a level of coherence and creativity that was once unprecedented. As we explore the intricacies of prompt engineering, recognizing the symbiotic relationship between effective prompts and the capabilities of Large Language Models (LLMs) becomes paramount for unlocking new dimensions of generative AI creativity and utility.Let us look at some examples of prompts specifically on ChatGPT.Conclusion: Embracing the Power of PrecisionIn the dynamic landscape of Generative AI, prompt engineering, particularly with Large Language Models (LLMs), stands out as a key driver of precision and creativity. As we unlock new possibilities in human-AI collaboration, mastering the art of crafting effective prompts becomes essential. Whether you‚Äôre a developer, content creator, or industry professional, understanding and harnessing the power of prompt engineering is a journey worth taking."
  },
  
  {
    "title": "What is Artificial Intelligence",
    "url": "/posts/what-is-artificial-intelligence/",
    "categories": "Artificial Intelligence (AI)",
    "tags": "AI",
    "date": "2023-01-04 12:00:10 +0545",
    





    
    "snippet": "AI, or Artificial Intelligence, refers to the development of computer systems that can perform tasks that typically require human intelligence. These tasks include learning, reasoning, problem-solv...",
    "content": "AI, or Artificial Intelligence, refers to the development of computer systems that can perform tasks that typically require human intelligence. These tasks include learning, reasoning, problem-solving, perception, natural language understanding, and even the ability to interact with the environment. The goal of AI is to create machines that can mimic cognitive functions associated with human minds.There are two main types of AI:Narrow or Weak AI:This type of AI is designed and trained for a particular task. It can excel at that specific task but lacks the broad cognitive abilities of a human. Examples include virtual personal assistants like Siri or Alexa.General or Strong AI:This hypothetical form of AI would have the ability to understand, learn, and apply knowledge across a wide range of tasks, similar to human intelligence.General AI, also known as Strong AI or Artificial General Intelligence (AGI), refers to a type of artificial intelligence that has the ability to understand, learn, adapt, and apply knowledge across a wide range of tasks at a level equal to or beyond a human being.Strong AI doesn‚Äôt just mimic or simulate human intelligence. It‚Äôs supposed to understand, reason, plan, learn, communicate in natural language, and integrate all these skills towards common goals, just like a human would. It should be able to transfer knowledge from one domain to another, handling tasks that it was not specifically programmed for.It could understand and apply its knowledge to various situations, learn new skills on its own, and possibly even experience consciousness. AGI could bring about revolutionary changes in numerous fields, from healthcare and science to economics and social sciences. However, ethical considerations and potential risks also need careful examination.As of now, Strong AI remains largely theoretical, with no practical examples in use today. Most AI in use today is considered Weak AI (also known as Narrow AI), which is designed to perform a narrow task (e.g., only facial recognition or only internet searches or only driving a car).AI systems can be categorized into several subfields, including:Machine Learning (ML):A subset of AI that focuses on the development of algorithms that enable computers to learn from and make predictions or decisions based on data.Natural Language Processing (NLP):A field that involves the interaction between computers and human languages, enabling machines to understand, interpret, and generate human-like text.Computer Vision:The ability of computers to interpret visual information, enabling them to ‚Äúsee‚Äù and make decisions based on visual input.Robotics:The integration of AI and machines to create intelligent robots capable of performing tasks in the physical world.AI has a wide range of applications, including healthcare diagnostics, autonomous vehicles, recommendation systems, language translation, and many more. As technology continues to advance, AI is expected to play an increasingly significant role in various aspects of our lives. However, ethical considerations, transparency, and responsible development are crucial aspects to address as AI technologies progress."
  },
  
  {
    "title": "Ruby find_all vs. select",
    "url": "/posts/ruby-find-all-vs-select/",
    "categories": "Ruby, select vs. find_all",
    "tags": "ruby, find_all, select",
    "date": "2022-08-15 10:40:18 +0545",
    





    
    "snippet": "About find_all vs. select Ruby methodfind_all or select returns an array which contains all elements of enum for which the given block returns a true value, and, if no block is given, an Enumerator...",
    "content": "About find_all vs. select Ruby methodfind_all or select returns an array which contains all elements of enum for which the given block returns a true value, and, if no block is given, an Enumerator is returned.Here are some examples:arr = 1..8 h = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}arr.select{|x| x.even?} # =&gt; [2, 4, 6, 8]a.find_all{|x| x.even?} # =&gt; [2, 4, 6, 8]On hash select returns hash and find_all returns array.h.select { |k, v| v.even? }   # =&gt; {:b=&gt;2, :d=&gt;4, :f=&gt;6, :h=&gt;8}h.find_all { |k, v| v.even? } # =&gt; [[:b, 2], [:d, 4], [:f, 6], [:h, 8]]"
  },
  
  {
    "title": "Webpacker in Rails6",
    "url": "/posts/rails6-webpacker/",
    "categories": "Ruby on Rails, Webpacker",
    "tags": "ruby on rails, webpacker",
    "date": "2020-06-05 01:45:18 +0545",
    





    
    "snippet": "Webpacker  Webpacker is the JavaScript compiler which compiles the JavaScript code.  Prior to Rails6, JS code were inside app/assets/javascripts  In Rails6, no app/assets/javascripts and have new d...",
    "content": "Webpacker  Webpacker is the JavaScript compiler which compiles the JavaScript code.  Prior to Rails6, JS code were inside app/assets/javascripts  In Rails6, no app/assets/javascripts and have new dir app/javascript to load all the js files which has channels &amp; packs and all Javascript components like Turbolinks, ActiveStorage, Rails-UJS, ActionCable support Webpacker.  Other dir channels generated by Rails ActionCable component  Another dir packs which has app/packs/javascriptsapp/javascript/packs/application.jsrequire(\"@rails/ujs\").start()require(\"turbolinks\").start()require(\"@rails/activestorage\").start()require(\"channels\")  any js files inside packs/ will autocompiled by WebpackAbout Pack  Webpack uses webpacker gem which wraps webpack and used to compile the javascript code which are on the packs directory. This gem creates the application pack as application.js inside app/javascript/packs which is similar to assets pipeline (app/assets/javascripts/application.js) and application pack is the entry point for all the JavaScript code that contains Action Cable, Active Storage, Turbolinks Rails components.  gem webpacker is automatically placed inside the Gemfile of Rails6 application, and yarn is used to install npm packages when creating new Rails 6 application.Gem also generates settings:config/webpacker.yml  As like assets pipeline, JavaScript code using Webpacker and webpack automatically compiles in development mode when running rails server.  Gem also generates the file bin/webpack-dev-server which is used to live reloading the development phase. Inorder to see the live reloading in development mode we need to run the webpack-dev-server with command ./bin/webpack-dev-server separately.  However, in production mode, rake assets:precompile also override the rake webpacker:compile which will compile the assets pipleline and compile the files to be compiled by webpack which updates the package.json.Way to use the JavaScript code in the appwe can use the helper method javascript_pack_tag to include the webpacker packs file which is similar to asset pipeline javascript_link_tag and works on both development and production mode.# app/views/layouts/application.html.erb&lt;%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %&gt;  Prior to Rails 6 application do not install gem webpacker by default, include it in Gemfile, and run the command rake webpacker:install"
  },
  
  {
    "title": "Elastic Search with Chewy",
    "url": "/posts/elastic-search-with-chewy/",
    "categories": "Ruby on Rails, Elastic search Chewy",
    "tags": "elastic_search, chewy",
    "date": "2019-10-25 07:01:18 +0545",
    





    
    "snippet": "Chewy is one of the elastic search Ruby client.Chewy usages:      Multi-model indicesYou can define several types for index one per indexed model.        Every index is observable by all the relate...",
    "content": "Chewy is one of the elastic search Ruby client.Chewy usages:      Multi-model indicesYou can define several types for index one per indexed model.        Every index is observable by all the related models.Most of the indexed models are related to other and it is necessary to denormalize this related data and put at the same object. Chewy is useful for example when we need index for an array of tags together with an article since it specify updated index for every model seperately so corressponding articles will be reindexed on any tag update.        Bulk import everywhereIt supports bulk elastic search api for full reindex and index updates.        Powerful querying DSLChewy has an ActiveRecord style query DSL.        Support for ActiveRecord, Mongoid and Sequel.  Installation Steps:gem 'chewy'bundle installor gem install chewyClient settings:Chewy.settings hash and chewy.yml are two ways in which Chewy client can be configured.Run the command rails g chewy:install to generate the file or create one manually.# config/chewy.yml# separate environment configstest:  host: 'localhost:9250'  prefix: 'test'development:  host: 'localhost:9200'config/initializers/chewy.rbChewy.settings = {host: 'localhost:9250'} # do not use environmentsAws Elastic SearchConfiguration for using AWS‚Äôs elastic search using an IAM user policy, sign your requests for the es:* action by injecting the headers passing a proc to transport_options.Chewy.settings = {    host: 'http://my-es-instance-on-aws.us-east-1.es.amazonaws.com:80',    transport_options: {      headers: { content_type: 'application/json' },      proc: -&gt; (f) do          f.request :aws_signers_v4,                    service_name: 'es',                    region: 'us-east-1',                    credentials: Aws::Credentials.new(                      ENV['AWS_ACCESS_KEY'],                      ENV['AWS_SECRET_ACCESS_KEY'])      end    }  }Type accessFollowing API is used to access index-defined typesUsersIndex::UserUsersIndex.type_hash['user']UsersIndex.type('user')UsersIndex.type('foo')UsersIndex.types # [UserIndex::User]UsersIndex.type_names # [\"user\"] Index ManipulationUsersIndex.delete # destroy existed indexUsersIndex.delete!UsersIndex.create # create indexUsersIndex.create!UsersIndex.purgeUsersIndex.purge! # deletes then creates indexUsersIndex::User.import # import with 0 arguments process all the data specified in type definitionUsersIndex::User.import User.where('rating &gt; 100') # or import specified users scopeUsersIndex::User.import User.where('rating &gt; 100').to_a # or import specified users arrayUsersIndex::User.import [1, 2, 42] # pass even ids for import, it will be handled in the most effective wayUsersIndex::User.import user: User.where('rating &gt; 100')  # if update fields are specified - it will update their values only with the `update` bulk action.UsersIndex.reset! # purges index and imports default data for all typesPractical on Ruby on Rails applicationapp/chewy/user_index.rbclass UserIndex &lt; Chewy::Index    settings analysis: {      analyzer: {        email: {          tokenizer: 'keyword',          filter: ['lowercase']        }      }    }      define_type User do      field :name, {type: 'text'}      field :email, analyzer: 'email'      field :phone, {type: 'text'}    end  endapp/controllers/users_controller.rbclass UsersController &lt; ApplicationController    def search      @users = UsersIndex.query(query_string: { fields: [:name, :email, :phone], query: search_params[:query], default_operator: 'and' })        render json: @users.to_json, status: :ok    end      private      def search_params      params.permit(:query, :page, :per)    end  endapp/models/user.rbclass User &lt; ApplicationRecord    update_index('user') { self }    enum status: { unconfirmed: 0, confirmed: 1 }endroutes.rbresources :users do    get :search, on: :collectionendIf you access the url http://localhost:3000/users/search?query=test1Following results are seen on the browser0\tid\t\"18\"name\t\"test1\"status\t\"unconfirmed\"email\t\"test1@example.com\"phone\t\"090111111\"_score\t0.5389965_explanation\tnull1\tid\t\"3\"name\t\"test1\"status\t\"unconfirmed\"email\t\"test1@example.com\"phone\t\"090111112\"_score\t0.5389965_explanation\tnull2\tid\t\"45\"name\t\"test1\"email\t\"test1@example.com\"phone\t\"090111111\"_score\t0.5389965_explanation\tnulland if we inspect the result of @users object on controller.first on console, we will see@_data=  {\"_index\"=&gt;\"user\",   \"_type\"=&gt;\"user\",   \"_id\"=&gt;\"18\",   \"_score\"=&gt;0.5389965,   \"_source\"=&gt;{\"name\"=&gt;\"test1\", \"status\"=&gt;\"unconfirmed\", \"email\"=&gt;\"test1@example.com\", \"phone\"=&gt;\"090111111\"}}, @attributes=  {\"id\"=&gt;\"18\",   \"name\"=&gt;\"test1\",   \"status\"=&gt;\"unconfirmed\",   \"email\"=&gt;\"test1@example.com\",   \"phone\"=&gt;\"090111111\",   \"_score\"=&gt;0.5389965,   \"_explanation\"=&gt;nil}We can refactor the searching as:Create a dir called as app/searches/user_search.rb# user_search.rb# frozen_string_literal: trueclass UserSearch  include ActiveModel::Model  DEFAULT_PER_PAGE = 10  DEFAULT_PAGE = 0  attr_accessor :query, :page, :per  def search    [query_string].compact.reduce(&amp;:merge).page(page_num).per(per_page)  end  def query_string    index.query(query_string: { fields: [:name, :email, :phone], query: query, default_operator: 'and' }) if query.present?  end  private  def index    UsersIndex  end  def page_num    page || DEFAULT_PAGE  end  def per_page    per || DEFAULT_PER_PAGE  endendNow call the UserSearch class and implement it inside the UsersControllerclass UsersController &lt; ApplicationController  def search    user_search = UserSearch.new(search_params)    @users = user_search.search    render json: @users, status: :ok  end  private  def search_params    params.permit(:query, :page, :per)  endendNow modify the search action as:class UsersController &lt; ApplicationController  def search    user_search = UserSearch.new(search_params)    @users = user_search.search  end  private  def search_params    params.permit(:query, :page, :per)  endendsearch.html.erb&lt;% if @users.any? %&gt;    &lt;table border=\"1\"&gt;        &lt;tr&gt;            &lt;th&gt;Id&lt;/th&gt;            &lt;th&gt;Name&lt;/th&gt;            &lt;th&gt;Phone&lt;/th&gt;            &lt;th&gt;Email&lt;/th&gt;            &lt;th&gt;Status&lt;/th&gt;        &lt;/tr&gt;        &lt;% @users.each do |user| %&gt;        &lt;% res = user.attributes %&gt;        &lt;tr&gt;            &lt;td&gt;&lt;%= res[\"id\"] %&gt;&lt;/td&gt;            &lt;td&gt;&lt;%= res[\"name\"] %&gt;&lt;/td&gt;            &lt;td&gt;&lt;%= res[\"phone\"] %&gt;&lt;/td&gt;            &lt;td&gt;&lt;%= res[\"email\"] %&gt;&lt;/td&gt;            &lt;td&gt;&lt;%= res[\"status\"] %&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;% end %&gt;    &lt;/table&gt;&lt;% else %&gt;    &lt;p&gt;No users found.&lt;/p&gt;&lt;% end %&gt;"
  },
  
  {
    "title": "Elastic Search",
    "url": "/posts/elastic-search/",
    "categories": "Ruby on Rails, Elastic search",
    "tags": "elastic_search",
    "date": "2019-10-18 08:01:18 +0545",
    





    
    "snippet": "Introduction to Elastic SearchElastic Search is a full-text search engine which can be used as NoSQL database and can be used as analytics engine.It is schema-less, easy to scale, near real-time an...",
    "content": "Introduction to Elastic SearchElastic Search is a full-text search engine which can be used as NoSQL database and can be used as analytics engine.It is schema-less, easy to scale, near real-time and provides a restful interface for different operations.Elastic search is used as primary backend of your web application which can be added to an existing system which run through existing data source. Elastic search can be used to monitor and analysis of the existing application without affecting the behaviour of the current application.Various UseCases of Elastic Search are:  Web Application Search Solution  Data Visualization and Analytics  Log Management  Online Database Storage  Monitoring System  Autocomplete and instant searchElastic Search has following components:      ClusterA cluster is a collection of one or more server/nodes which holds your entire data together and provides indexing and search capabilities across all nodes. ‚Äúelasticsearch‚Äù is unique default cluster.        NodeA node is a single server which is a part of a cluster which stores your data, participate‚Äôs in cluster‚Äôs indexing and search capabilities. A node is unique name and by default Universally Unique Identifier (UUID).        IndexAn index is a data structure which is a collection of documents having similar characteristics which is used to improve query execution time. Index are created for table primary keys, foreign keys, unique numbers, etc so that query executed 250 times faster than query without indexing.        TypeType is used to store various types of data in the same index, in order to keep the total number of indices. The _type field is added to every document which is used for filtering the data when searching with a specific type.        Document  Document is the row of record for the table or collection which is a single piece of information and it can be indexed.        Shard    The data is shared or divided into two or multiple nodes/machines/servers in the cluster when data grows really fast and run out of space which is called as shard.  Sharding is useful as it horizontally scale your content volume and it allows to distribute and parallelize operations across shards which increases the performance.  Installation of ElasticSearch on Ubuntu 18.04  You need to use sudo login      Install the deb package from the official Elasticsearch repository    Install apt-transport-https package that necessary to access a repository over HTTPs.$ sudo apt update$ sudo apt install apt-transport-https  Install OpenJDK 8sudo apt install openjdk-8-jdk  Verify the java installation$ java -version# this gives output as belowopenjdk version \"1.8.0_222\"OpenJDK Runtime Environment (build 1.8.0_222-8u222-b10-1ubuntu1~18.04.1-b10)OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)  Import repository‚Äôs GPG using the following wget commandwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -      The output of above command should be OK which means the key is imported successfully and packages from this repository will be considered trusted.        Add the Elasticsearch repository to the system by issuing:  sudo sh -c 'echo \"deb https://artifacts.elastic.co/packages/7.x/apt stable main\" &gt; /etc/apt/sources.list.d/elastic-7.x.list'  Now update apt package list and install Elasticsearch engine by following commands:sudo apt updatesudo apt install elasticsearch  Start the Elasticsearch processessudo systemctl enable elasticsearch.servicesudo systemctl start elasticsearch.service  Verify Elasticsearch is running by commandcurl -X GET \"localhost:9200/\"# it's output is as shown below{  \"name\" : \"crystal-Aspire-E5-575G\",  \"cluster_name\" : \"elasticsearch\",  \"cluster_uuid\" : \"9IFdxeCaRZmSj5c33WxEEg\",  \"version\" : {    \"number\" : \"7.4.0\",    \"build_flavor\" : \"default\",    \"build_type\" : \"deb\",    \"build_hash\" : \"22e1767283e61a198cb4db791ea66e3f11ab9910\",    \"build_date\" : \"2019-09-27T08:36:48.569419Z\",    \"build_snapshot\" : false,    \"lucene_version\" : \"8.2.0\",    \"minimum_wire_compatibility_version\" : \"6.8.0\",    \"minimum_index_compatibility_version\" : \"6.0.0-beta1\"  },  \"tagline\" : \"You Know, for Search\"}```Ruby* Log messages can be seen by using following commandsudo journalctl -u elasticsearch* Some useful directoriesdata storage - /var/lib/elasticsearchconfiguration file - /etc/elasticsearchJava startup options configuration - /etc/default/elasticsearch#### Remote Access SetupElasticsearch by default listen to localhost, so if database also in the same host, it is single node cluster and default configuration works.Anyone can access Elasticsearch by HTTP API as Elasticsearch lacks authentication. So you need to give access to Elasticsearch server to only trusted client which is done by configuring firewall (check firewall tool UFW on ubuntu) and give access to port 9200.First add a rule which allow incoming SSH```Rubysudo ufw allow 22Allow access from trusted clientsudo ufw allow from 192.168.1.65 to any port 9200# replace remote ip address with 192.168.1.65Enable UFWsudo ufw enableCheck firewall statussudo ufw status// o/p looks like thisStatus: activeTo                         Action      From--                         ------      ----22                         ALLOW       Anywhere9200                       ALLOW       192.168.1.6522 (v6)                    ALLOW       Anywhere (v6)  Next edit Elasticsearch configuration allow it to listen to external connectionssudo vim /etc/elasticsearch/elasticsearch.ymlUncomment line having network.host, change the value to 0.0.0.0. To make Elasticsearch listen on specified interface among multiple network interfaces on your machine you can specify interface IP address.Restart the Elasticsearch service and now connection to Elasticsearch server from remote is ready.sudo systemctl restart elasticsearch"
  },
  
  {
    "title": "Elastic Search with Searchkick",
    "url": "/posts/elastic-search-with-searchkick/",
    "categories": "Ruby on Rails, Elastic search Searchkick",
    "tags": "elastic_search, searchkick, ruby on rails",
    "date": "2019-10-18 08:01:18 +0545",
    





    
    "snippet": "What is Searchkick?Searchkick is a smart and intillegent search engine Rubygems that creates quicker search results based on user search activity.Before using Searchkick make sure Elasticsearch is ...",
    "content": "What is Searchkick?Searchkick is a smart and intillegent search engine Rubygems that creates quicker search results based on user search activity.Before using Searchkick make sure Elasticsearch is installed on your system.Steps to use Searchkick  Create a Rails applicationrails new institutions -d postgres  Generate the scaffold for Studentrails g scaffold Student name:string roll:integer grade:string fee:decimal      Run rake db:create rake db:migrate        Configure the routes  root \"students#index\"resources :students  Add following gem into Gemfilegem 'searchkick'Here is the Guide for Elasticsearch 6 or 7.  In each models you need to add keyword searchkick to make searchkick work as shown belowclass Student &lt; ApplicationRecord\tsearchkickend  Now add data to search index by using following code and you need to run this command everytime as model changesStudent.reindexThere are many ways search options based on necessity::word # default:word_start:word_middle:word_end:text_start:text_middle:text_endHere is an example of using :word_start for partial match criteriaclass Student &lt; ApplicationRecord  searchkick word_start: [:name, :role, :grade, :fee]  def search_data    {      name: name,      role: role,      grade: grade,      fee: fee    }  endendSearch EverythingStudent.search \"*\"Partial MatchesStudent.search \"Shiv Raj Badu\" # Shiv AND Raj AND BaduBook.search \"Shiv Raj Badu\", operator: \"or\"Exact MatchesStudent.search params[:search], fields:[{fee: :exact}, :name]Phrase MatchesStudent.search \"another name\", match: :phraseModel associationsStudent.search \"shiv raj\", track: {user_id: current_user.id}Autocomplete and Instant Searchclass Student &lt; ApplicationRecord  searchkick match: :word_start, searchable: [:name, :roll]endLanguage supported based on listsearchkick word_start: [:title, :author, :genre], language: \"turkish\"class StudentsController &lt; ApplicationController  before_action :set_student, only: [:show, :edit, :update]  def searchcriteria    render json: Student.search(params[:query], {      fields: [\"name\", \"roll\", \"grade\", \"fee\"],      limit: 10,      load: false,      misspellings: {below: 5}    }).map(&amp;:title)  endendImplement JavaScript searchbox as below&lt;input type=\"text\" id=\"query\" name=\"query\" /&gt;  $(\"#query\").typeahead({    name: \"student\",    remote: \"/students/search_criteria?query=%QUERY\"  });Suggestions generatorclass Student &lt; ApplicationRecord  searchkick suggest: [:name, :roll, :fee, :grade]endHighlight search result fields like this:class Student &lt; ApplicationRecord  searchkick highlight: [:name]endCreate custom and advanced mapping like this:class Student &lt; ApplicationRecord  searchkick mappings: {    student: {      properties: {        name: {type: \"string\", analyzer: \"keyword\"},        grade: {type: \"string\", analyzer: \"keyword\"}      }    }  }end"
  },
  
  {
    "title": "JQuery",
    "url": "/posts/jquery/",
    "categories": "JQuery, Cheatsheet",
    "tags": "jquery",
    "date": "2019-10-13 08:01:18 +0545",
    





    
    "snippet": "IntroductionjQuery is a JavaScript library created by John Resig in 2006 with an objectives Write less, do more. The main features of jQuery are event handling, Ajax interactions, animations, trave...",
    "content": "IntroductionjQuery is a JavaScript library created by John Resig in 2006 with an objectives Write less, do more. The main features of jQuery are event handling, Ajax interactions, animations, traversing, DOM manipulation, Cross Browser Support,  etc.jQuery Syntax$(selector).action()Here $ sign is used to define jQuery, a selector is used to find HTML DOM elements and an action is jQuery function to be performed on the HTML elements.`$(this).hide()` // To hide current element use`$(\"h1\").hide()` // To hide all h1 elements use`$(\"#myDiv\").hide()` // To hide element with id \"myDiv\" use`$(\".myDiv\").hide()` // To hide element with class \"myDiv\" usejQuery event should call inside $(document).ready() function in order to work on HTML page and script inside this function will exectuted before loaded the page contents and when DOM is loaded.$(document).ready(function() {   // The script written here will execute when DOM is ready});Example Usage&lt;html&gt;    &lt;head&gt;        &lt;title&gt;jQuery Example&lt;/title&gt;        &lt;script type = \"text/javascript\"          src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"&gt;        &lt;/script&gt;        &lt;script type=\"text/javascript\"&gt;            $(document).ready(function() {                $(\"#header\").click(function() {                    alert(\"jQuery triggered\");                });            });        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;      &lt;div id=\"header\"&gt;        Click Me      &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;Steps to install jQueryjQuery can be installed in two ways:  Download jQuery library in your system and include in HTML code.          Download latest version of jQuery into your project directory from https://jquery.com/download/        Here is the example code  &lt;html&gt;    &lt;head&gt;        &lt;title&gt;jQuery&lt;/title&gt;        &lt;script type=\"text/javascript\" src=\"/js/jquery-3.4.1.min.js\"&gt;&lt;/script&gt;        &lt;script type=\"text/javascript\"&gt;            $(document).ready(function() {                console.log(\"Hello jQuery\");                document.write(\"Hello jQuery\");            });        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;p&gt;jQuery&lt;/p&gt;    &lt;/body&gt;&lt;/html&gt;  Include jQuery library in your HTML code from Content Delivery Network (CDN).Here is the example code&lt;html&gt;    &lt;head&gt;        &lt;title&gt;jQuery&lt;/title&gt;        &lt;script type = \"text/javascript\"          src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"&gt;      &lt;/script&gt;        &lt;script type=\"text/javascript\"&gt;            $(document).ready(function() {                console.log(\"Hello jQuery\");                document.write(\"Hello jQuery\");            });        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;p&gt;jQuery&lt;/p&gt;    &lt;/body&gt;&lt;/html&gt;jQuery SelectorsjQuery Selectors are used to select HTML elements based on their name, id, classes, types, attributes, values to perform various tasks.jQuery selectors start with the factory function which starts with dollar sign followed by parentheses $() which is synonym of jQuery(). Sometime conflict occurs with $ sign when using other JavaScript library in that case use jQuery() instead of $() to avoid conflict.Here are few lists of jQuery selectors            Selector                  $(‚Äú*‚Äù) # Selects all element              $(this) # Selects current element              $(‚Äú#myDivId‚Äù) # Selects an element with an Id=‚ÄùmyDivId‚Äù              $(‚Äú#myDivClass‚Äù)  # Selects an element with class=‚ÄùmyDivId‚Äù              $(‚Äúp‚Äù) # Selects all paragraph element matched by &lt;p&gt;              $(‚Äúp &gt; *‚Äù) # Selects all elements that are children of paragraph element              $(‚Äúp.myDivClass‚Äù) # Select all paragraph elements having class=‚ÄùmyDivClass‚Äù              $(‚Äúp:first‚Äù) # Select first paragraph element              $(‚Äúul li:first‚Äù) # Select first &lt;li&gt; element of the first &lt;ul&gt;              $(‚Äúul li:first-child‚Äù) # Select first &lt;li&gt; element of every &lt;ul&gt;              $(‚Äú#myDiv p‚Äù) # Select &lt;p&gt; elements under div element with id=‚ÄùmyDiv‚Äù              $(‚Äúli &gt; ul‚Äù) # Select all &lt;ul&gt; elements which are children of &lt;li&gt; elements              $(‚Äúp a.myClass‚Äù) # Select all links or  elements having class=‚ÄùmyClass‚Äù which is children of &lt;p&gt; elements              $(‚Äúa#myId.myClass‚Äù) # Selects links with an id=‚ÄùmyId‚Äù and class=‚ÄùmyClass‚Äù              $(‚Äúli:not(.myclass‚Äù) # Selects all elements matched by &lt;li&gt; which do not have class=‚Äùmyclass‚Äù              $(‚Äú[href]‚Äù) # Selects all elements with an href attribute              $(‚Äúa[target=‚Äô_blank‚Äô]‚Äù) # Selects all  elements with a target attribute value equal to ‚Äú_blank‚Äù              $(‚Äúa[target!=‚Äô_blank‚Äô]‚Äù) # Selects all  elements with a target attribute value NOT equal to ‚Äú_blank‚Äù              $(‚Äú:button‚Äù) # Selects all button elements and input elements of type=‚Äùbutton‚Äù              $(‚Äútr:even‚Äù) # Selects all even &lt;tr&gt; elements              $(‚Äútr:odd‚Äù) # Selects all odd &lt;tr&gt; elements              $(‚Äústrong + em‚Äù) # Selects all elements matched by  which is followed by               $(‚Äúp ~ ul‚Äù) # Selects all elements matched by &lt;ul&gt; which is followed by &lt;p&gt;              $(‚Äúcode, em, strong‚Äù) # Selects all elements which is matched by  or  or               $(‚Äúp strong, .myDivClass‚Äù) # Select all strong elements which are followed by &lt;p&gt; and having class=‚ÄùmyDivClass‚Äù              $(‚Äú:empty‚Äù) # Select all elements having no children              $(‚Äúp:empty‚Äù) # Select all paragraph elements having no children              $(‚Äúdiv[p]‚Äù) # Select all elements having &lt;div&gt; which contains &lt;p&gt;              $(‚Äúp[.myDivClass]‚Äù) # Select all paragraph elements having class=‚ÄùmyDivClass‚Äù              $(‚Äú:radio‚Äù) # Selects all the radio buttons in the form              $(‚Äú:checked‚Äù) # Selects all the checkbox in the form              $(‚Äú:input‚Äù) # Selects input element of the form like: input, textarea, select, button, etc              $(‚Äú:text‚Äù) # Selects all input text elements              $(‚Äúp:lt(3)‚Äù) # Selects all first three elements              $(‚Äúp:gt(2)‚Äù) # Selects all paragraph elements excluding first two or after third one              $(‚Äúdiv/p‚Äù) # Selects all paragraph elements which are under div tag              $(‚Äúdiv//code‚Äù) # Selects all  elements which are descendants of &lt;div&gt;              $(‚Äú//p//a‚Äù) # Selects all links that are descendants of paragraph              $(‚Äú:parent‚Äù) # Selects all elements which are parent of another element, including text              $(‚Äúli:contains(second)‚Äù) # Selects all elements matched by &lt;li&gt; that contain the text second      jQuery attributesSome jQuery methods used to get or set the value of attributes, property, html, etc are postulated below:attr() - get or set the specified attribute of the target element.prop() - get or set the specified property of the target element.html() - get or set the html content to the specified target element.val() - get or set the value of the specified target element.text() - get or set the text for the specified target element.jQuery attributes are almost uses with properties like className, id, tagName, href, title, src, rel. HTML tags are the h1, h2, p, img, div, head, body, bold(b), anchor(a), form, hr, br, input, li, ul, ol, link, option, strong, small, table, td, tr, th, u, tt, center, etc.jQuery attr() methodsattr() is used to get value of attributes and attr(name, value) is used to set the attribute with new value which will apply to all elements.&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"&gt;        &lt;/script&gt;        &lt;script&gt;            $(document).ready(function () {                     alert($(\"div\").attr(\"style\")); // Select div tag and get the value of style attributes                $(\"p\").attr(\"class\", \"greenColorStyle\"); // all paragraph tag's class will update to greenColorStyle                var title = $(\"p\").attr(\"title\"); // get value of paragraph's attributes title                $(\"#progTitle\").text(title); // inspect div id progTitle and replace text defined by variable title            });        &lt;/script&gt;    &lt;style type=\"text/css\"&gt;        .greenColorStyle {        color: green;        }    &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;div style=\"color: red; \"&gt;This is a paragraph under div&lt;/div&gt;    &lt;p title=\"Programming Tutorials\"&gt;Get value of title attributes and replace div having id progTitle&lt;/p&gt;    &lt;div&gt;        &lt;p&gt;After page loads all paragraph should be in green color&lt;/p&gt;        &lt;p&gt;Another text&lt;/p&gt;    &lt;/div&gt;    &lt;div id=\"progTitle\"&gt;&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;addClass(className)addClass(className) is used to apply defined styles to selected elements.&lt;html&gt;    &lt;head&gt;        &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"&gt;        &lt;/script&gt;        &lt;script&gt;            $(document).ready(function () {                 $(\"#myDiv\").addClass(\"greenColorStyle\");            });        &lt;/script&gt;    &lt;style type=\"text/css\"&gt;        .greenColorStyle {        color: green;        }    &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;div id=\"myDiv\"&gt;This is a paragraph under div&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;Some more attr methods are:  removeAttr()  Removes an attribute of matched elements  removeClass(class)  Removes the class of matched elements  hasClass(class)   check if class present then returns true  toggleClass(class)  add the class if absent and remove the class if present  html()   Get the html contents of an element  html(val)   set the html content with value of element  text()   get the combined text contents of elements  text(val)   set the text content of element  val()   get input value of first matched element  val(val)   set the value attribute of every matched elementjQuery TraversingjQuery traversing is used to find html elements based on their relation to other elements.jQuery traversing means to move over elements to find a particular or entire element.Here are some list of jQuery traversing methods:  add()Collects one or more matched elements which are passed inside the method to create an object which can be manipulated at the same time.&lt;html&gt;&lt;head&gt;\t&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"&gt;\t&lt;/script&gt;\t&lt;script&gt;\t\t$(document).ready(function () {     \t\t  var jqObj = $('div').add('p').add('span').css( \"background\", \"yellow\" );\t\t  jqObj.addClass('greenColorStyle');\t\t});\t&lt;/script&gt;   &lt;style type=\"text/css\"&gt;  \t.greenColorStyle {      color: green;    }   &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=\"myDiv\" style=\"text-align: center; padding: 20px\"&gt;This is a paragraph under div&lt;/div&gt;  &lt;p&gt;Some more text&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;  addBack()adds the previous set of elements with current set and maintains them in a stack which can be manipulated.# add together paragraph tags with myDiv div tag and implement bgGreen color to both$(\"div.myDiv\").find(\"p\").addBack().addClass(\"bgGreen\");  not()get all elements which do not match specific selectorTree TraversingDescendants  childrenGet all the child elements of the selected element.$(selector).children();  find()Get all the specified child elements of each selected element.Ancestors  closestfind the first ancestor of the selected selector.$(selector).closest(selector or element);  parentget the parent element of specified selector$(selector).parent();  parentsget all ancestor elements of specified selector$(selector).parents();  parentsUntil()get all ancestor elements between specified selector and arguments.$(selector).parentsUntil(selector, element)  offsetParent()get the first parent element of specified selector.Siblings  siblingsget all siblings of the specified selector.$(selector).siblings()  next()get next sibling element of the specified selector.$(selector).next()  nextAll()get all next sibling elements of the specified selector.$(selector).nextAll()  nextUntil()get all next sibling between specified selector and arguments.$(selector).nextUntil()  prev()get the previous sibling element of the specified selector.$(selector).prev(selector)  prevAll()get all the previous siblings of specified selector.$(selector).prevAll(selector, filter_element)  prevUntil()get all the previous siblings between specified selector and arguments.$(selector).prevUntil(selector, filter_element)filtering  first()get the first element of the specified selector  last()get the last element of the specified selector  eq()get the element with specified index number of the specified selector.$(selector).eq(index)  filter()remove or get the element which are matched with specified selector$(selector).is(selector or function or elements)  has()get all elements which have one or more elements within and are matched with specified selector.$(selector).has(selector)  is()it checks if one of the specified selector is matched with arguments..is(selector or function or elements)  map()traverse arrays and objects and results a new arrayjQuery.map(array, function(val, i) {    // do stuff here});  slice(start, end)get the subset of specified selector based on it‚Äôs argument index or start and stop value.$(selector).slice(start, end)jQuery EffectsjQuery helps us to add various types of visual effects on our webpage.jQuery effects are listed below:            Display Effects      Sliding Effects      Fading Effects      Other Effects                  show()      slideUp()      fadeIn()      delay()              hide()      slideDown()      fadeOut()      animate()              toggle()      slideToggle()      fadeToggle()      fadeTo()              ¬†      ¬†      fadeTo()      ¬†      Here are the description of some jQuery effect methods:show()Display the selected elementsUsage:$(\"#btn-hide\").click(function() {    $(\"p\").hide()});$(\"#btn-show\").click(function() {    $(\"p\").show()});hide()Hide the selected elementstoggle()This function is used to show to hide (toggle) the matched elementsUsage:    $(btn-toggle).click(function() {        $(\"p\").toggle()    })slideUp()This function is used to display the slideup effects which first hide the element and then show the element with sliding effects once it is completed execute the callback function, thus this function is used to slide up an element.Syntax$(selector).slideUp(speed,callback);  speed - valid speed values are slow, normal, fast  callback - which is optional parameter and this function is called once the animation is completed.Usage$(\"#btnUp\").click(function(){    $(\".target\").slideUp('slow', function(){         $(\"#div-id\").text('Slide Up Effect');    });});slideDown()This function is used to slide down the element.Syntax$(selector).slideDown(speed,callback);Usage$(\"#btnDown\").click(function(){    $(\".target\").slideDown( 'slow', function(){         $(\"#div2-id\").text('Slide Down Effect');    });});slideToggle()slideToggle() method is used to toggle between slideUp() and slideDown() which means if the element if slide down this function helps them slide up and vice versa.Syntax:$(selector).slideToggle(speed,callback);fadeIn()This function is used to show fades in effect from the hidden element to make it visible.$(selector).fadeIn(speed,easing,callback)  speed - valid speed values are slow, normal, fast  callback - which is optional parameter and this function is called once the animation is completed.  easing - This is optional. This feature shows the effect in various speed in various dimension. Various options are:          swing - moves faster in the middle dimension and slower at the start or end.      linear - moves in constant speed.      fadeOut()This function is used to show fades out effect from the visible element to make it hidden.$(selector).fadeOut(speed,easing,callback)fadeToggle()This method is used to toggle between fadeIn() and fadeOut() which will fades in the element if it is fades out and vice versa.Syntax$(selector).fadeOut(speed,easing,callback)fadeTo()This method is used to show the fading effect of an element partially in or out to make it transparent.Syntax$(selector).fadeTo(speed,opacity,callback);      speed - valid speed values are slow, fast, or milliseconds        opacity - The values of opacity are between 0 and 10 - fully transparent (hidden)1- fully opaque (shown)        callback - which is optional parameter and this function is called once the animation is completed.  delay()The delay() is an inbuilt method in jQuery which is used to set a timer to delay the execution of the next item in the queue.Syntax$(selector).delay(speed,queueName)The paremeters used are explained here:  speed - The values are milliseconds, ‚Äúslow‚Äù, ‚Äúfast‚Äù  queueName - The default value if ‚Äúfx‚Äù and you can set the queue name here and is the optional parameter.Usage$(\"#mybtn\").click(function() {    $(\"#slow-delay-div\").delay(\"slow\").fadeIn();    $(\"#fast-delay-div\").delay(\"fast\").fadeIn();    $(\"#ms-div\").delay(1000).fadeIn();});animate()This method is used to create custom animations which gives special effects using style properties of the element.Specify the selector to get the reference of an element and call animate() to apply animation, this animate() function takes json object for style properties, speed of animation, and other options.Syntax$(selector).animate({ params },speed, callback);$(selector).animate({ stylePropertyName: 'value', duration, easing, callback }, { options })Usage&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;\t&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"&gt;    &lt;/script&gt;    &lt;script&gt;        $(document).ready(function () {\t\t\t$('#animateEx').animate({                        height: '50px',                        width: '50px'                    });\t\t\t});    &lt;/script&gt;\t&lt;style&gt;        .green {            background-color: green;            height: 350px;            width: 350px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;\t&lt;h1&gt;Here is an example of jQuery animate()&lt;/h1&gt;\t&lt;div id=\"animateEx\" class=\"green\"&gt;\t&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
  },
  
  {
    "title": "Metaprogramming in Ruby",
    "url": "/posts/metaprogramming-in-ruby/",
    "categories": "Ruby, Metaprogramming",
    "tags": "ruby, metaprogramming",
    "date": "2019-09-02 09:23:58 +0545",
    





    
    "snippet": "Metaprogramming in RubyMetaprogramming is a programming concept which treats other programs as their data and computer programs are written in such a way that is executed at runtime instead of comp...",
    "content": "Metaprogramming in RubyMetaprogramming is a programming concept which treats other programs as their data and computer programs are written in such a way that is executed at runtime instead of compile time.It helps in reducing development time by minimizing the lines of codes, also efficiently manages the programs with new solutions without recompilation.Metaprogramming includes :  compile code generation or Runtime code generation (or both)  Aspect-Oriented Thinking or Aspect Oriented Programming  DRY ThinkingIt is advisable to mastering Metaprogramming before using it as it is very powerful.ExamplesMake a getter methods which return instance variables if they are not nil, if they are nil set it to some default value and return it.class Foo    def foo        @foo ||= 0    endendSuppose if you have multiple such getters then instead of writing them all we can use metaprogramming like this:class Foo    {foo: 0, bar: '', baz: []}.each do |method_name, default_value|        define_method method_name do            instance_var = :\"@#{method_name}\"            instance_variable_get(instance_var) ||            instance_variable_set(instance_var, default_value)        end    endendmodule GettersWithDefault    def getters_with_default(spec)        spec.each do |method_name, default_value|            define_method method_name do                instance_var = :\"@#{method_name}\"                instance_variable_get(instance_var) ||                instance_variable_set(instance_var, default_val)            end        end    endendclass Foo    include GettersWithDefault    getters_with_default foo: 0, bar: '', baz: {}endA common example of Metaprogrammingclass Post    def initialize(status)        @status = status    end    %w(published unpublished draft).each do |possible_status|        define_method(\"#{possible_status}?\") do            @status == possible_status        end    endendIt seems like it saves time, because we don‚Äôt need to write separate methods for published?, unpublished?, and draft?. However, there are tradeoffs. For example, metaprogramming like this makes searching for method definitions later difficult. It‚Äôs certainly faster to type, but it‚Äôs harder to find and read later. Since we spend so much more time reading code than writing it, code that‚Äôs easier to write than read is actually a bad tradeoff.Domain Specific LanguageA Domain Specific Language or DSL is a custom language that solves a specific domain or problem. In Ruby‚Äôs case, a DSL is written in Ruby but looks different from standard Ruby code. Some examples of Ruby DSL are Rails Routes, Rspec, Factory Girl, etc. Factory Girl has cmplicated internal code but it allows you to write expressive, declarative code.FactoryGirl.define do    sequence :github_username do |n|        \"github_#{n}\"    end    factory :user do        description \"Learn all about Git\"        github_username        trait :admin do            admin true        end    endendDSL Structuredescribe \"User\" do  # ...endFactoryGirl.define do    # ...endRails.application.routes.draw do  # ...endBe carefulIf there is a less-complicated solution to a problem, reach for that first. Metaprogramming is usually not a good first solution to a problem, and DSLs require a good understanding of the problem‚Äôs domain. Once you do understand the problem well, though, DSLs are a great option.Talk about MonkeypatchingCode Discoverty and ReadabilityOne problem with metaprogramming solutions are their obstruction of code discovery. When entering a new project or simply trying to re-familiarize onself with existing one, tracing code executiion in a text editor can be quite difficult if method definitions do not exist.For example we can assume that a User class exists with a set of metaprogrammed methods:class User    [        :password,        :email,        :first_name,        :last_name    ].each do |attribute|        define_method(:\"has_#{attribute}?\") do            self.send(attribute).nil?        end    endendAlthough a little contrived, this code is a list of simple convenience methods on a User class. This solution is easily extended to include additional attributes without a full method definition per attribute.However, these methods can not be found using grep, silver searcher, or other ‚Äúfind all‚Äù tools. Since the method has_password? is never explicitly defined in the code, it is not discoverable.A Work Around:To combat this issue, some developers choose to write a comment listing the defined method names above metaprogramming block. This simple solution can greatly help the readability of the code.class User    # has_password?, has_email?, has_first_name?, has_last_name? method definitions    [        :password,        :email,        :first_name,        :last_name    ].each do |attribute|        define_method(:\"has_#{attribute}?\") do            self.send(attribute).nil?        end    endendPerformanceDepending on the amount of times a piece of code is executed, performance considerations can be extremely important. ‚ÄúHot code‚Äù is a term used to describe code that is called frequently during an application‚Äôs request cycle. Since not all code is created equally, understanding the performance implications of different metaprogramming approaches is imperative when writing or modifying hot code."
  },
  
  {
    "title": "How to create Rails application with MongoDB?",
    "url": "/posts/Rails-app-with-MongoDB/",
    "categories": "MongoDB, Ruby on Rails",
    "tags": "mongodb, rails_setup",
    "date": "2019-08-30 09:23:58 +0545",
    





    
    "snippet": "Setup Rails 5 with mongoid gemAt first we need to install MongoDB in our system, the steps to install MongoDB is descripted in my previous blog. Confirm mongoDB is installed by browsing http://loca...",
    "content": "Setup Rails 5 with mongoid gemAt first we need to install MongoDB in our system, the steps to install MongoDB is descripted in my previous blog. Confirm mongoDB is installed by browsing http://localhost:27017/ and you will get following message:It looks like you are trying to access MongoDB over HTTP on the native driver port.Create a Rails application with the keyword ‚Äú‚Äìskip-active-record‚Äù so that ActiveRecord is not included in the generated app.rails new myapp --skip-active-recordEdit your GemfileRemove this Gem if existsgem 'sqlite3'And add following Gems:gem 'mongoid', '~&gt; 6.2.0'gem 'bson_ext'Generate configuration file to support MongoDB which generates config/mongoid.ymlrails g mongoid:configThere is a file called /config/mongoid.yml‚Äô which contains database configuration and it is required.The Rails generators for ‚Äòmodel‚Äô, ‚Äòscaffold‚Äô etc have been overridden by Mongoid. Any models, scaffolds etc that you create will create classes that include the Mongoid::Document module instead of inheriting from ApplicationRecord in the models folder.Associationrails generate scaffold article title:stringrails generate scaffold comment body:string article_id:string # Here article_id required when implementing has_many association but not required in case of embedds many and even records are not saved inside Comment document which is included inside Article document.Association embeds_many with embedded_inclass Article  include Mongoid::Document  field :title, type: String  embeds_many :commentsendclass Comment  include Mongoid::Document  field :title, type: String  field :article_id, type: String  embedded_in :articleendarticle = Article.new(title: \"Embeds Many association on MongoDB\")article.comments.build(title: 'Embeds Many association will connect child records inside parent record')# if you check the mongo console `db.articles.find()` you will notice Comments records are also included inside the Article record and no seperate comment document is created inside comment collection.{ \"_id\" : ObjectId(\"5d6f75b567ef9b0d9e8373b4\"), \"title\" : \"Embeds Many association on MongoDB\", \"comments\" : [ { \"_id\" : ObjectId(\"5d6f75bd67ef9b0d9e8373b5\") }, { \"_id\" : ObjectId(\"5d6f75ef67ef9b0d9e8373b6\"), \"title\" : \"Embeds Many association will connect child records inside parent record\" } ] }Association has_many with belongs_toclass Article  include Mongoid::Document  field :title, type: String  has_many :commentsendclass Comment  include Mongoid::Document  field :title, type: String  field :article_id, type: String  belongs_to :articleend`db.articles.find()`{ \"_id\" : ObjectId(\"5d6f6a8067ef9b06fed2c32e\"), \"title\" : \"first article\" }`db.comments.find()`{ \"_id\" : ObjectId(\"5d6f6e2567ef9b0c888373b1\"), \"title\" : \"comment title\", \"article_id\" : ObjectId(\"5d6f6a8067ef9b06fed2c32e\") }In this senario, the records are saved inside two independed mongoDB collection Articles and Comments. And inside Comment Document we will have article_id whose value is the corressponding Article Id. But in embeds_many technique the child records do not save inside the Comment collection but inside Article Collection included inside Article document."
  },
  
  {
    "title": "Notes on MongoDB",
    "url": "/posts/MongoDB-notes/",
    "categories": "MongoDB, Data Operation",
    "tags": "mongodb, data_operation",
    "date": "2019-08-30 09:23:58 +0545",
    





    
    "snippet": "Introduction to MongoDBMongoDB is a open source document-oriented NoSQL database used for high volume data storage. If database is not already created switch to the database and insert data into it...",
    "content": "Introduction to MongoDBMongoDB is a open source document-oriented NoSQL database used for high volume data storage. If database is not already created switch to the database and insert data into it, this way database is created.Each record in a MongoDB collection is a document. MongoDB collections are like table and documents are like rows of the relational databases.Create Databaseuse NewDatabase # switched to db NewDatabasedb.products.insert({name: 'product', price: 20}) # Create a collection name as products with new document as a recordView database and collections&gt; show dbs;adminconfiglocalNewDatabase&gt; use NewDatabaseswitched to db NewDatabase&gt; show collectionsproductsDelete Database&gt; db.dropDatabase(){ \"dropped\" : \"NewDatabase\", \"ok\" : 1 }Crud operationsInsert a Single Documentdb.collection.insertOne() inserts a single document into a collection.MongoDB adds the _id field with an ObjectId value to the new document.db.customers.insertOne(    {        profile_name: 'customer name',        email: 'email@example.com',        age: 32,        tags: [\"regular\"],        full_name: { first_name: 'firstname', mid_name: 'midname', last_name: 'last_name' }    })when you run the above command, you will get following output{\t\"acknowledged\" : true,\t\"insertedId\" : ObjectId(\"5d6ccbfda82b6d69714cebeb\")}Insert multiple documentsdb.collection.insertMany()db.customers.insertMany(    [        {          profile_name: 'customer name 2',          email: 'email10@example.com',          age: 22,          tags: [\"regular\"],          full_name: { first_name: 'firstname2', mid_name: 'midname2', last_name: 'last_name2' }        },        {          profile_name: 'customer name 3',          email: 'email11@example.com',          age: 22,          tags: [\"regular\"],          full_name: { first_name: 'firstname3', mid_name: 'midname3', last_name: 'last_name3' }        },        {          profile_name: 'customer name 4',          email: 'email12@example.com',          age: 22,          tags: [\"regular\"],          full_name: { first_name: 'firstname4', mid_name: 'midname4', last_name: 'last_name4' }        }    ])=&gt; output when executing above query{\t\"acknowledged\" : true,\t\"insertedIds\" : [\t\tObjectId(\"5d6ccdf9a82b6d69714cebec\"),\t\tObjectId(\"5d6ccdf9a82b6d69714cebed\"),\t\tObjectId(\"5d6ccdf9a82b6d69714cebee\")\t]}View Record&gt; db.customers.find({profile_name: 'customer name'}){ \"_id\" : ObjectId(\"5d6ccbfda82b6d69714cebeb\"), \"profile_name\" : \"customer name\", \"email\" : \"email@example.com\", \"age\" : 32, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname\", \"mid_name\" : \"midname\", \"last_name\" : \"last_name\" } }multiple matched records&gt; db.customers.find({age: 22}){ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebee\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email4@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559364\"), \"profile_name\" : \"customer name 2\", \"email\" : \"email10@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559365\"), \"profile_name\" : \"customer name 3\", \"email\" : \"email11@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname3\", \"mid_name\" : \"midname3\", \"last_name\" : \"last_name3\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559366\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email12@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }  db.customers.find({profile_name: ‚Äúcustomer name 4‚Äù})  { \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebee\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email4@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559366\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email12@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }    db.customers.find({profile_name: ‚Äúcustomer name 4‚Äù, ‚Äúemail‚Äù: ‚Äúemail4@example.com‚Äù})  { \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebee\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email4@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }    db.customers.find({profile_name: ‚Äúcustomer name 4‚Äù}).limit(1)  { \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebee\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email4@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }  Show all records  db.customers.find()  { \"_id\" : ObjectId(\"5d6ccbfda82b6d69714cebeb\"), \"profile_name\" : \"customer name\", \"email\" : \"email@example.com\", \"age\" : 32, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname\", \"mid_name\" : \"midname\", \"last_name\" : \"last_name\" } }{ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebec\"), \"profile_name\" : \"customer name 2\", \"email\" : \"email2@example.com\", \"age\" : 30, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2\" } }{ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebed\"), \"profile_name\" : \"customer name 3\", \"email\" : \"email3@example.com\", \"age\" : 36, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname3\", \"mid_name\" : \"midname3\", \"last_name\" : \"last_name3\" } }{ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebee\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email4@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559364\"), \"profile_name\" : \"customer name 2\", \"email\" : \"email10@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559365\"), \"profile_name\" : \"customer name 3\", \"email\" : \"email11@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname3\", \"mid_name\" : \"midname3\", \"last_name\" : \"last_name3\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559366\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email12@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }  Upsert Option (updateOne(), updateMany(), replaceOne())Replace a record except an ID fielddb.customers.replaceOne({email: 'email@example.com'}, {\"profile_name\" : \"customer name\", \"email\" : \"email@example.com\", \"age\" : 15, \"tags\" : [ \"nonregular\" ], \"full_name\" : { \"first_name\" : \"firstname\", \"mid_name\" : \"midname\", \"last_name\" : \"last_name\" }}){ \"acknowledged\" : true, \"matchedCount\" : 1, \"modifiedCount\" : 1 }When you search the record which is just updated, you will notice update has been made:db.customers.find({email: 'email@example.com'}){ \"_id\" : ObjectId(\"5d6ccbfda82b6d69714cebeb\"), \"profile_name\" : \"customer name\", \"email\" : \"email@example.com\", \"age\" : 15, \"tags\" : [ \"nonregular\" ], \"full_name\" : { \"first_name\" : \"firstname\", \"mid_name\" : \"midname\", \"last_name\" : \"last_name\" } }Update a record execpt an ID fieldFirst track the record you want to update&gt; db.customers.find({email: 'email2@example.com'}){ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebec\"), \"profile_name\" : \"customer name 2\", \"email\" : \"email2@example.com\", \"age\" : 30, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2\" } }&gt;Apply Update command&gt; db.customers.updateOne({email: 'email2@example.com'}, {$set: {\"profile_name\": 'customer name 2 updated', \"full_name.last_name\": \"last_name2 updated\", tags: [\"regular updated\"]}}){ \"acknowledged\" : true, \"matchedCount\" : 1, \"modifiedCount\" : 1 }Now check the record and you will notice the record is updated&gt; db.customers.find({email: 'email2@example.com'}){ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebec\"), \"profile_name\" : \"customer name 2 updated\", \"email\" : \"email2@example.com\", \"age\" : 30, \"tags\" : [ \"regular updated\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2 updated\" } }Add lastModified field when you update the record which will add new column&gt; db.customers.updateOne({email: 'email2@example.com'}, {$set: {\"profile_name\": 'customer name 2 updated', \"full_name.last_name\": \"last_name2 updated\", tags: [\"regular updated\"]}, $currentDate: { lastModified: true }}){ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebec\"), \"profile_name\" : \"customer name 2 updated\", \"email\" : \"email2@example.com\", \"age\" : 30, \"tags\" : [ \"regular updated\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2 updated\" }, \"lastModified\" : ISODate(\"2019-09-02T08:55:35.114Z\") }``1The update action involves following operations:uses the $set operator to update the value of the size.uom field to \"cm\" and the value of the status field to \"P\",uses the $currentDate operator to update the value of the lastModified field to the current date. If lastModified field does not exist, $currentDate will create the field. See $currentDate for details.#### UpdateManyUpdate all the documents where age is greater than 22db.customers.updateMany(    {        ‚Äúage‚Äù: { $gt: 22 }    },    {        $set: { ‚Äútags‚Äù: ‚ÄúMultiple Update‚Äù, active: ‚Äútrue‚Äù },        $currentDate: { lastModified: true }    })&gt;&gt; { \"acknowledged\" : true, \"matchedCount\" : 2, \"modifiedCount\" : 2 }Now it's time to check updated record:  db.customers.find({‚Äúage‚Äù: {$gt: 22}}){ ‚Äú_id‚Äù : ObjectId(‚Äú5d6ccdf9a82b6d69714cebec‚Äù), ‚Äúprofile_name‚Äù : ‚Äúcustomer name 2 updated‚Äù, ‚Äúemail‚Äù : ‚Äúemail2@example.com‚Äù, ‚Äúage‚Äù : 30, ‚Äútags‚Äù : ‚ÄúMultiple Update‚Äù, ‚Äúfull_name‚Äù : { ‚Äúfirst_name‚Äù : ‚Äúfirstname2‚Äù, ‚Äúmid_name‚Äù : ‚Äúmidname2‚Äù, ‚Äúlast_name‚Äù : ‚Äúlast_name2 updated‚Äù }, ‚ÄúlastModified‚Äù : ISODate(‚Äú2019-09-02T12:56:37.700Z‚Äù), ‚Äúactive‚Äù : ‚Äútrue‚Äù }{ ‚Äú_id‚Äù : ObjectId(‚Äú5d6ccdf9a82b6d69714cebed‚Äù), ‚Äúprofile_name‚Äù : ‚Äúcustomer name 3‚Äù, ‚Äúemail‚Äù : ‚Äúemail3@example.com‚Äù, ‚Äúage‚Äù : 36, ‚Äútags‚Äù : ‚ÄúMultiple Update‚Äù, ‚Äúfull_name‚Äù : { ‚Äúfirst_name‚Äù : ‚Äúfirstname3‚Äù, ‚Äúmid_name‚Äù : ‚Äúmidname3‚Äù, ‚Äúlast_name‚Äù : ‚Äúlast_name3‚Äù }, ‚Äúactive‚Äù : ‚Äútrue‚Äù, ‚ÄúlastModified‚Äù : ISODate(‚Äú2019-09-02T12:56:37.700Z‚Äù) }```Some other options:db.collection.findOneAndReplace().db.collection.findOneAndUpdate().db.collection.findAndModify().db.collection.save().db.collection.bulkWrite()Delete document (deleteOne(), deleteMany())Delete only one record no matter multiple records for this profile name exists&gt; db.customers.deleteOne({profile_name: 'profile name'})o/p =&gt; { \"acknowledged\" : true, \"deletedCount\" : 1 }Delete many records at once&gt; db.customers.deleteMany({profile_name: 'profile name 1'})o/p =&gt; { \"acknowledged\" : true, \"deletedCount\" : 4 }Bulk Write with bulkWrite()try {    db.customers.bulkWrite([        { insertOne: { \"document\": {                        profile_name: 'foo bar',                        email: 'foo@shivrajbadu.com.np',                        age: 29,                        tags: [\"regular\"],                        full_name: { first_name: 'shiv', mid_name: 'raj', last_name: 'badu' }                    }                }            },            { insertOne: { \"document\": {                    profile_name: 'foo baz',                    email: 'baz@shivrajbadu.com.np',                    age: 25,                    tags: [\"regular\"],                    full_name: { first_name: 'foo', mid_name: 'bar', last_name: 'baz' }                    }                }            },            { updateOne: {                    \"filter\" : { email: 'email10@example.com' },                    \"update\" : { $set: {\"profile_name\": 'new name', tags: [\"irregular\"], \"full_name.first_name\": \"fn\", \"full_name.mid_name\": \"mn\", \"full_name.last_name\": \"ln\" } }                }            },            { deleteOne: {                    \"filter\": { profile_name: 'customer name' }                }            },            { replaceOne: {                 \"filter\": { email: 'email@example.com' },                \"replacement\": { \"profile_name\": 'profile name', \"email\": 'email@example.com', \"age\": 14, \"tags\": [\"irregular\"], \"full_name\": { \"first_name\": \"fn\", \"last_name\": \"ln\", \"mid_name\": \"mn\" }  }             } }        ]);} catch (e) {    print(e);}Text SearchTo perform text search use text index and $text operator, text indexes can include any field whose value is a string or an array of string elements. To perform text search queries, you must have a text index on your collection. A collection can only have one text search index, but that index can conver multiple fields.If index is not found you will get following error message:Error: error: {\t\"ok\" : 0,\t\"errmsg\" : \"text index required for $text query\",\t\"code\" : 27,\t\"codeName\" : \"IndexNotFound\"}So, you need to create Index firstdb.customers.createIndex({    profile_name: \"text\",    email: \"text\"})db.customers.find({    $text: {        $search: \"myemail@shivrajbadu.com.np\"    }})db.customers.aggregate(    [        { $match: { $text: { $search: \"first name\" } } }    ])To get exact match result of searched textdb.customers.aggregate(    [        { $match: { $text: { $search: \"\\\"customer name replaced\\\"\" } } }    ])Referencesuser document             contact document                            articles document-------------             -----------------                          -----------------{                         {                                            {    _id: &lt;ObjectId1&gt;,        _id: &lt;ObjectId2&gt;,                            _id: &lt;ObjectId3&gt;,    username: 'xyz'           user_id: &lt;ObjectId1&gt;,                       user_id: &lt;ObjectId1&gt;,}                             phone: '9852525252',                        title: 'first article',                              email: 'contact@shivrajbadu.com.np'         body: 'article body'                          }                                            }One-to-One Relationships with Embedded DocumentsContact document contains a reference to the User document.User Document{    _id: \"unique_id\",    username: 'uniquename'}Contact Document{    _id: ‚ÄúObjectId(‚Äú5d6df862e1b6226e35c6c519‚Äù)‚Äù,    _user_id: ‚Äúunique_id‚Äù,    phone: ‚Äú8585858585‚Äù,    email: ‚Äúcontact@shivrajbadu.com.np‚Äù}### One-to-Many Relationships with Embedded DocumentsIn the normalized data model, the articles documents contain a reference to the user document.User Document{    _id: ‚Äúunique_id‚Äù,    username: ‚Äòuniquename‚Äô}Article Document{    _id: \"ObjectId(\"5d6df9b5e1b6226e35c6c522\")\",    _user_id: \"unique_id\",    title: \"This is a title.\",    body: \"This is a description.\"}{    _id: \"ObjectId(\"9e7df9b5e1b6226e35c6c435\")\",    _user_id: \"unique_id\",    title: \"This is another title.\",    body: \"This is description for another title.\"}When implement one to many relationships, many child records will have many child document records so multiple queries need to be issued to resolve the references, we can also use another solution to make single query as shown below:{    _id: \"unique_id\",    username: 'uniquename',    articles: [        {            _id: \"ObjectId(\"5d6df9b5e1b6226e35c6c522\")\",            _user_id: \"unique_id\",            title: \"This is a title.\",            body: \"This is a description.\"        },        {            _id: \"ObjectId(\"9e7df9b5e1b6226e35c6c435\")\",            _user_id: \"unique_id\",            title: \"This is another title.\",            body: \"This is description for another title.\"        }    ]}"
  },
  
  {
    "title": "How to install MongoDB on Ubuntu 18.04?",
    "url": "/posts/MongoDB-installation/",
    "categories": "MongoDB, Installation",
    "tags": "mongodb, installation",
    "date": "2019-08-29 09:23:58 +0545",
    





    
    "snippet": "Install MongoDB Community Edition on Unbuntu 18.04 (Bionic)Import the MongoDB public GPG Key from https://www.mongodb.org/static/pgp/server-4.2.ascwget -qO - https://www.mongodb.org/static/pgp/serv...",
    "content": "Install MongoDB Community Edition on Unbuntu 18.04 (Bionic)Import the MongoDB public GPG Key from https://www.mongodb.org/static/pgp/server-4.2.ascwget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -Create the list file /etc/apt/sources.list.d/mongodb-org-4.2.list for your ubuntu versionecho \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.listReload local package databasesudo apt-get updateInstall MongoDB packagessudo apt-get install -y mongodb-orgOptional. Although you can specify any available version of MongoDB, apt-get will upgrade the packages when a newer version becomes available. To prevent unintended upgrades, you can pin the package at the currently installed version:echo \"mongodb-org hold\" | sudo dpkg --set-selectionsecho \"mongodb-org-server hold\" | sudo dpkg --set-selectionsecho \"mongodb-org-shell hold\" | sudo dpkg --set-selectionsecho \"mongodb-org-mongos hold\" | sudo dpkg --set-selectionsecho \"mongodb-org-tools hold\" | sudo dpkg --set-selectionsDirectories are at/var/lib/mongodb/var/log/mongodbConfiguration files are at/etc/mongod.confStart MongoDBsudo service mongod startTo verify MongoDB is started successfully, check the following content on /var/log/mongodb/mongod.log[initandlisten] waiting for connections on port 27017Processsudo service mongod stopsudo service mongod restartUse MongoDB using command shellmongoUninstall MongoDB stepssudo service mongod stopsudo apt-get purge mongodb-org* # remove mongoDB packages# remove data directoriessudo rm -r /var/log/mongodb sudo rm -r /var/lib/mongodb"
  },
  
  {
    "title": "Polymorphism in Ruby",
    "url": "/posts/polymorphism-in-ruby/",
    "categories": "Ruby, Polymorphism",
    "tags": "ruby, polymorphism",
    "date": "2019-08-28 09:23:58 +0545",
    





    
    "snippet": "Polymorphism in RubyThe term polymorphism means having many forms. In Ruby, polymorphism is carried out by using Inheritance. Polymorphism is achieved by using method overriding.class Animal    def...",
    "content": "Polymorphism in RubyThe term polymorphism means having many forms. In Ruby, polymorphism is carried out by using Inheritance. Polymorphism is achieved by using method overriding.class Animal    def eat # this method will overrides on other inherited classes        puts \"Animal eats grasses, water, milk, etc\"    endendclass Cat &lt; Animal    def eat        puts \"Cat eats milk &amp; water\"    endendclass Cow &lt; Animal    def eat        puts \"Cow eats grasses &amp; water\"    endendanimal = Animal.newanimal.eat=&gt; Animal eats grasses, water, milk, etcanimal = Cat.newanimal.eat=&gt; Cat eats milk &amp; wateranimal = Cow.newanimal.eat=&gt; Cow eats grasses &amp; water"
  },
  
  {
    "title": "Inheritance in Ruby",
    "url": "/posts/inheritance-in-ruby/",
    "categories": "Ruby, Inheritance",
    "tags": "ruby, inheritance",
    "date": "2019-08-28 09:23:58 +0545",
    





    
    "snippet": "Inheritance in RubyInheritance is the feature of OOP in which characteristics &amp; behaviours of one class inherits into another class. The class which is inheriting behaviour is called subclass a...",
    "content": "Inheritance in RubyInheritance is the feature of OOP in which characteristics &amp; behaviours of one class inherits into another class. The class which is inheriting behaviour is called subclass and class it inherits from is called superclass. Inheritance can also be used to remove duplication in your code and helps to achieve DRY ‚ÄúDon‚Äôt Repeat Yourself‚Äù principle.Class Inheritanceclass Animal    def eat # this method will overrides on other inherited classes        puts \"Animal eats grasses, water, etc\"    endendclass Cat &lt; Animalendclass Cow &lt; AnimalendHere Animal is the superclass and Cat, Cow is the subclass.cat = Cat.newcow = Cow.newcat.eat # =&gt; Animal eats grasses, water, etccow.eat # =&gt; Animal eats grasses, water, etcMethod overridingclass Animal    def eat        puts 'Animal eats grasses, water, etc'    endendclass Cat &lt; Animal    attr_accessor :food_name    def initialize(food_name)        @food_name = food_name    end    def eat        puts \"Cat eats #{food_name}\"    endendclass Dog &lt; Animalendcat = Cat.new(\"Milk and water\")cat.eat# =&gt; Milk and waterdog = Dog.newdog.eat# =&gt; Animal eats grasses, water, etcsupersuper is the inbuilt function of Ruby, which is used to call the methods up the inheritance hierarchy.class Animal  def eat    \"Animal\"  endendclass Cat &lt; Animal  def eat    super + \" - cat - eats milk and water.\"  endendcat = Cat.newcat.eat        # =&gt; \"Animal - cat - eats milk and water.\"Module Mixins in RubyModules are a way of grouping together methods, classes, and constants. Modules provide a namespace and prevent name clashes, and it implement the mixin facility. Mixins is like multiple inheritence.module ModuleName    def module_method        puts \"I am a module method\"    endendclass ClassName    include ModuleNameendobj = ClassName.newobj.module_method# =&gt; I am a module method"
  },
  
  {
    "title": "Features and functions of Active Record Model",
    "url": "/posts/ruby-on-rails-active-record-models-notes/",
    "categories": "Ruby on Rails, Active Record cheatsheet",
    "tags": "ruby on rails, active_record",
    "date": "2019-08-27 07:12:58 +0545",
    





    
    "snippet": "Notes on various features and functions of Active Record ModelQuery Methodsobj = User  .where(email: 'info@mydomain.np')  .where('id = 2')  .where('id = ?', 2)  .order(:tag_line)  .order(tag_line: ...",
    "content": "Notes on various features and functions of Active Record ModelQuery Methodsobj = User  .where(email: 'info@mydomain.np')  .where('id = 2')  .where('id = ?', 2)  .order(:tag_line)  .order(tag_line: :desc)  .order(\"tag_line DESC\")  .reorder(:tag_line) # Replaces any existing order defined on the relation with the specified order.  .where(active: true)  .rewhere(active: false) # Allows to change a previously set where condition for a given attribute, instead of appending to that condition.  .offset(1)  .limit(2)  .uniqSome other query methodsitems = Employer  .select(:id)  .select([:id, :name])  .group(:title)   # GROUP BY name  .group('title AS grouped_title, age')  .having('SUM(salary) &gt; 25000')  # needs to be chained with .group  .includes(:user)  .includes(user: [:articles])  .references(:comments)Finder methodsitem = ModelName.find(id)item = ModelName.find_by_email(email)item = ModelName.where(email: email).firstModel  .first  .last  .exists?(5)  .exists?(name: \"ShivRaj\")  .find_nth(4, [offset])Persistenceitem.new_record?item.persisted?item.destroyed?item.serialize_hash # Returns a serialized hash of your objectitem.saveitem.save!      # It does same as save, but raises an Exceptionitem.update  name: 'ShivRaj'  # Save the record immediatelyitem.update! name: 'ShivRaj'item.update_column  :name, 'ShivRaj'  # It skips validations and callbacksitem.update_columns  name: 'ShivRaj'item.update_columns! name: 'ShivRaj'item.touch                 # It updates :updated_atitem.touch :published_atitem.destroyitem.delete  # It skips callbacksModel.create     # It does same task which is done by new and saveModel.create!    # It does same as create but raises an ExceptionAttribute Assignmentitem.attributes                         # &lt;Hash&gt;item.attributes = { name: 'ShivRaj' }   # Merges attributes in but it Doesn't save.item.assign_attributes name: 'ShivRaj'  # Merges attributes in but it Doesn't save.Validationsitem.valid?item.invalid?Dirtyitem.changed?item.changed             # ['name']item.changed_attributes  # { 'name' =&gt; 'ShivRaj' } - original valuesitem.changes             # { 'name' =&gt; ['ShivRaj', 'PushpaRaj'] }item.previous_changes    # available after #saveitem.restore_attributesitem.name = 'ShivRaj'item.name_was         # 'ShivRaj'item.name_change      # [ 'ShivRaj', 'PushpaRaj' ]item.name_changed?    # trueitem.name_changed?(from: 'ShivRaj', to: 'PushpaRaj')CalculationsPerson.countPerson.count(:age)    # counts non-nil'sPerson.average(:age)Person.maximum(:age)Person.minimum(:age)Person.sum('2 * age')Person.calculate(:count, :all)Person.distinct.countPerson.group(:city).countDynamic attribute-based finders# Returns one recordPerson.find_by_name(name)Person.find_last_by_name(name)Person.find_or_create_by_name(name)Person.find_or_initialize_by_name(name)# Returns a list of recordsPerson.find_all_by_name(name)# Add a bang to make it raise an exceptionPerson.find_by_name!(name)# You may use `scoped` instead of `find`Person.scoped_by_user_namebelongs to Association  belongs_to :author,  :dependent      =&gt; :destroy    # or :delete  :class_name     =&gt; \"Seller\"  :select         =&gt; \"*\"  :counter_cache  =&gt; true  :counter_cache  =&gt; :custom_counter  :include        =&gt; \"Product\"  :readonly       =&gt; true  :conditions     =&gt; 'published = true'  :touch          =&gt; true  :touch          =&gt; :sellers_last_updated_at  :primary_key    =&gt; \"name\"  :foreign_key    =&gt; \"author_name\"Has many Associationbelongs_to :parent, :foreign_key =&gt; 'parent_id' class_name: 'Folder'has_many :folders, :foreign_key =&gt; 'parent_id', class_name: 'Folder'has_many :comments,    :order      =&gt; \"posted_on\"has_many :comments,    :include    =&gt; :authorhas_many :people,      :class_name =&gt; \"Person\"has_many :people,      :conditions =&gt; \"deleted = 0\"has_many :tracks,      :order      =&gt; \"position\"has_many :comments,    :dependent  =&gt; :nullifyhas_many :comments,    :dependent  =&gt; :destroyhas_many :tags,        :as         =&gt; :taggablehas_many :reports,     :readonly   =&gt; truehas_many :subscribers, :through    =&gt; :subscriptions, class_name: \"User\", :source =&gt; :userhas_many :subscribers, :finder_sql =&gt;    'SELECT DISTINCT people.* ' +    'FROM people p, post_subscriptions ps ' +    'WHERE ps.post_id = #{id} AND ps.person_id = p.id ' +    'ORDER BY p.first_name'Many-to-many Has many through Association If you have a join model:class Programmer &lt; ActiveRecord::Base  has_many :assignments  has_many :projects, :through =&gt; :assignmentsend  class Project &lt; ActiveRecord::Base  has_many :assignments  has_many :programmers, :through =&gt; :assignmentsend  class Assignment  belongs_to :project  belongs_to :programmerendMany-to-many (HABTM) Associationhas_and_belongs_to_many :projectshas_and_belongs_to_many :projects, :include =&gt; [ :milestones, :manager ]has_and_belongs_to_many :nations, :class_name =&gt; \"Country\"has_and_belongs_to_many :categories, :join_table =&gt; \"prods_cats\"has_and_belongs_to_many :categories, :readonly =&gt; truehas_and_belongs_to_many :active_projects, :join_table =&gt; 'developers_projects', :delete_sql =&gt;\"DELETE FROM developers_projects WHERE active=1 AND developer_id = #{id} AND project_id = #{record.id}\"Polymorphic associationsclass Post  has_many :attachments, as: :parentend class Image  belongs_to :parent, polymorphic: trueend And in migrations:create_table :images do |t|  t.references :post, polymorphic: trueendValidationclass Person &lt; ActiveRecord::Base  # Presence  validates :name,     presence: true   # Acceptance  validates :terms,    acceptance: true  # Confirm  validates :email,    confirmation: true  # Unique  validates :slug,     uniqueness: true  validates :slug,     uniqueness: { case_sensitive: false }  validates :holiday,  uniqueness: { scope: :year, message: 'yearly only' }  # Format  validates :code,     format: /regex/  validates :code,     format: { with: /regex/ }  # Length  validates :name,     length: { minimum: 2 }  validates :bio,      length: { maximum: 500 }  validates :password, length: { in: =&gt; 6..20 }  validates :number,   length: { is: =&gt; 6 }  # Include/exclude  validates :gender,   inclusion: %w(male female)  validates :gender,   inclusion: { in: %w(male female) }  validates :lol,      exclusion: %w(xyz)  # Numeric  validates :points,   numericality: true  validates :played,   numericality: { only_integer: true }  # ... greater_than, greater_than_or_equal_to,  # ... less_than, less_than_or_equal_to  # ... odd, even, equal_to  # Validate the associated records to ensure they're valid as well  has_many :books  validates_associated :books  # Length (full options)  validates :content, length: {    minimum:   300,    maximum:   400,    tokenizer: lambda { |str| str.scan(/\\w+/) },    too_short: \"must have at least %{count} words\",    too_long:  \"must have at most %{count} words\" }  # Multiple  validates :login, :email, presence: true  # Conditional  validates :description, presence: true, if: :published?  validates :description, presence: true, if: lambda { |obj| .. }  validates :title, presence: true, on: :save   # :save | :create | :updateendCustom validationsclass Person &lt; ActiveRecord::Base  validate :foo_cannot_be_nil  def foo_cannot_be_nil    errors.add(:foo, 'cannot be nil')  if foo.nil?  endendErrorsrecord.errors.valid?      # ‚Üí falserecord.errors             # ‚Üí { :name =&gt; [\"can't be blank\"] }record.errors.messages    # ‚Üí { :name =&gt; [\"can't be blank\"] }record.errors[:name].any?Mass updates# Updates article having id 8Article.update 8, name: \"\", age: 34Article.update [2,3], [{name: \"Shiv\"}, {name: \"Raj\"}]Joining# Basic joinsEmployer.joins(:companies).where(companies: { type: 'private' })Employer.joins(:companies).where('companies.type' =&gt; 'private' )# Multiple associationsBlog.joins(:category, :comments)# Nested associationsBlog.joins(comments: :guest)# SQLAuthor.joins(  'INNER JOIN posts ' +  'ON posts.author_id = authors.id ' +  'AND posts.published = \"t\"')Where interpolationwhere('name = ?', 'Shiv')where(['name = :name', { name: 'Shiv' }])Serializeclass User &lt; ActiveRecord::Base  serialize :preferencesend user = User.create(  preferences: {    'background' =&gt; 'black',    'display' =&gt; 'large'  })You can also specify a class option as the second parameter that‚Äôll raise an exception if a serialized object is retrieved as a descendant of a class not in the hierarchy.# Only Hash allowed!class User &lt; ActiveRecord::Base  serialize :preferences, Hashend # Reading it raises SerializationTypeMismatchuser = User.create(preferences: %w(one two three))User.find(user.id).preferencesOverriding accessorsclass Song &lt; ActiveRecord::Base  # Uses an integer of seconds to hold the length of the song  def length=(minutes)    write_attribute(:length, minutes.to_i * 60)  end  def length    read_attribute(:length) / 60  endend"
  },
  
  {
    "title": "Git Modify Author and Committer",
    "url": "/posts/git-modify-author-committer/",
    "categories": "Git, Modify Author And Committer",
    "tags": "git",
    "date": "2019-06-13 07:23:58 +0545",
    





    
    "snippet": "How to change all commits to have the same newly added author and committer?Go to appropriate branch and project directory and run the following command on console.  git filter-branch -f --env-filt...",
    "content": "How to change all commits to have the same newly added author and committer?Go to appropriate branch and project directory and run the following command on console.  git filter-branch -f --env-filter \"    GIT_AUTHOR_NAME='ShivRaj'     GIT_AUTHOR_EMAIL='shivrajbadu@gmail.com'    GIT_COMMITTER_NAME='ShivRaj'    GIT_COMMITTER_EMAIL='shivrajbadu@gmail.com'  \" HEADAbove command run successfully with following outputRewrite cd130b5306f93f52a1ef7cce7fd8c25ad5a68b14 (1/1) (0 seconds passed, remaining 0 predicted)    Ref 'refs/heads/master' was rewritten"
  },
  
  {
    "title": "Conditional Validations",
    "url": "/posts/conditional-validations-rails/",
    "categories": "Ruby on Rails, Conditional Validations",
    "tags": "ruby on rails, validation",
    "date": "2019-01-07 08:01:18 +0545",
    





    
    "snippet": "Senerio:  User may not provide Name when creating profile, so user name is not compulsory  But if Name is provided then minimum character should be 3 &amp; max character should be 10Solutions:# Nor...",
    "content": "Senerio:  User may not provide Name when creating profile, so user name is not compulsory  But if Name is provided then minimum character should be 3 &amp; max character should be 10Solutions:# Normally we do like this and is the best way in this situationvalidates :name, length: { minimum: 5, maximum: 15 },                          allow_blank: truevalidates :name, length: { minimum: 5, maximum: 15 },                if: :length_of_name_is_not_zerovalidates :name, length: { minimum: 5, maximum: 15 },                unless: Proc.new {|obj| obj.name.length == 0}def length_of_name_is_not_zero  return false if self.name.length.eql?(0)  trueendAnother example of conditional validationattr_accessor :stu_field_validatevalidates :no_of_students, :presence =&gt; { :if =&gt; \"student_no_validate?\" }def student_no_validate? self.stu_field_validate.present? and ['no_of_students'].include?(self.stu_field_validate)endPass field value as&lt;%= f.hidden_field :stu_field_validate, :value =&gt; \"no_of_students\" %&gt;"
  },
  
  {
    "title": "Blocks, Lambdas and Proc",
    "url": "/posts/blocks-proc-and-lambdas/",
    "categories": "Ruby, Block Lambda Proc",
    "tags": "ruby, block, lambda, proc",
    "date": "2019-01-07 08:01:18 +0545",
    





    
    "snippet": "Lambdas and ProcLambdas and Proc are block executing statement.Lambdas and Proc both are object of Proc.Lambdas and Proc are executed by call().Lambda declarationx = lambda { p \"This is lambda\" }x....",
    "content": "Lambdas and ProcLambdas and Proc are block executing statement.Lambdas and Proc both are object of Proc.Lambdas and Proc are executed by call().Lambda declarationx = lambda { p \"This is lambda\" }x.call=&gt; \"This is lambda\"obj = lambda do |x, y|  x+yendobj.call(2,3)=&gt; 5# if required arguments are not supplied lambda throws argument errorsobj.call(2,3,5)ArgumentError (wrong number of arguments (given 3, expected 2))Proc declarationx = Proc.new {p \"this is proc\"}x.call=&gt; \"this is proc\"obj = Proc.new do |x, y|  x+yendobj.call(2,3)=&gt; 5# if required arguments are not supplied it won't throw argument error like lambdaobj.call(2,3,5)=&gt; 5class Block  def hello(*args, &amp;block)    yield *args  end  proc = Proc.new do |*args|    puts *args.class    arr = *args    sum = 0    arr.flatten.each do |num|      sum = sum + num    end    puts sum  end  obj = Block.new  obj.hello([1,10,15], &amp;proc)end=&gt; Array26BlocksRuby blocks are anonymous functions are passed into methods. They are enclosed between {} brackets or in do/end statement.It accepts multiple arguments as |arg1, ‚Ä¶, argn|. Blocks are used with each.It allows to save code and use it later.#### single line blocks[20,30,40].each {|n| puts n}# here code inside {} are block#### multi-line blocks[20,30,40].each do |n|  puts nendRuby yield keywordyield is a keyword that calls and run the code inside the blockdef block_fun  yieldendblock_fun { puts \"Block is executing\" }"
  },
  
  {
    "title": "Engine on Rails",
    "url": "/posts/engines-on-rails/",
    "categories": "Ruby on Rails, Engines",
    "tags": "ruby on rails, engines",
    "date": "2019-01-07 08:01:18 +0545",
    





    
    "snippet": "Engines are small applications which provides functionality to their host applications. A Rails application is a engine with Rails::Application class inheriting a lot of behaviour from Rails::Engin...",
    "content": "Engines are small applications which provides functionality to their host applications. A Rails application is a engine with Rails::Application class inheriting a lot of behaviour from Rails::Engine. So Rails application and engine are alomost same thing and share common structure with slight differences.Engines also related with plugins, both shares lib/ directory structure, and both generated using rails plugin new generator. Engine is considered as full plugin using --full in generator while --mountable option includes features of full and some others. An engine can be a plugin and plugin can be an engine.Some example of engines are: Devise for authenticating parent application, Thredded for forum functionlity, Spree for ecommerce, Refinery CMS for CMS application.Create a Base application (e.g: base_app)Create engine e.g: engine_app with following command:  rails new plugin engine_app --mountableCustomize engine_app.gemspec file and edit, homepage, summary, description, etc as per your requirements.Go to base_app -  Gemfile  gem 'engine_app', path: 'lib/engine_app'  bundle installWhen everything is Ok, we will get some message like:Using engine_app 0.0.1 from source at lib/engine_appHow to make plugins -  routes easy?Go to routes.rb file of base app and paste the code:mount EngineApp::Engine, at: '/engine_app'orGo to plugins app/lib/engine_app/engine.rbisolate_namespace EngineAppinitializer \"engine_app\", before: :load_config_initializers do |app|      Rails.application.routes.append do          mount EngineApp::Engine, at: '/engine_app'      endendNow it is possible to run rake routes and we can see all engines routese.g: engine_app /engine_app EngineApp::EngineHow to check Plugins Rails Console?Go to main app&gt; rails console&gt; EngineApp::Article.newHow to make MVC in base and inside engines?To make model controller inside base go to base dir or else go to engine dirRails Engine MigrationsBase app has no knowledge of Engine migrations, we need to customize it or manually we need to run command:i) Manually we can run following command:rake engine_app:install:migrationsii) go to lib/engine.rb file and paste the following code initializer \"engine_app\", before: :load_config_initializers do |app|     config.paths[\"db/migrate\"].expanded.each do |expanded_path|         Rails.application.config.paths[\"db/migrate\"] &lt;&lt; expanded_path     end endNow rake db:migrate will work from base applicationHow to access plugins and base app‚Äôs controller action?For e.g: link_to 'Home', root_path, will not work if we want to access enginesresources because engine won‚Äôt able to understand root_path for it. So we need following codes:link_to 'Home', main_app.root_pathlink_to 'Plugin Home', engine_app.articles_pathHow to layout in base and engines?We have to call layouts inside application controller or wherever required and it can be accessed by:layouts 'application' # will call base layoutslayouts 'engine_app/application' # will call plugin layoutsHow to include gems inside engines?Go to .gemspec file e.g: engine_app.gemspecGem::Specification.new do |s|  s.add_dependency \"devise\"  s.add_dependency 'authority', '~&gt; 3.1'end"
  },
  
  {
    "title": "Pow alternatives prax !",
    "url": "/posts/pow-alternatives-prax/",
    "categories": "Ruby, Pow Alternatives Prax",
    "tags": "ruby, linux, prax, pow_alternate, rack gem",
    "date": "2019-01-05 09:01:18 +0545",
    





    
    "snippet": "Pow is zero-config Rack server for Mac OS X. Your application will run on myapp.test without modifying /etc/hosts.Those who use GNU/Linux and installed Ruby and Rack gem Prax is usefull. It is a we...",
    "content": "Pow is zero-config Rack server for Mac OS X. Your application will run on myapp.test without modifying /etc/hosts.Those who use GNU/Linux and installed Ruby and Rack gem Prax is usefull. It is a web server which start rack application in background and proxy all requests to that application.Configurations  git clone git://github.com/ysbaddaden/prax.git /opt/prax  cd /opt/prax/ &amp;&amp; ./bin/prax install  sudo /etc/init.d/prax start  # Go to application and run the command  # cd apps/yourappname  prax link  # open your application with this command  prax open  # or  google-chrome http://yourappname.dev/  # see the list of linking application using  prax listIf you are using (RVM) Ruby version manager, follow below steps:cd $HOMEtouch .praxconfigPaste this code in .praxconfig file# detect `$rvm_path`if [ -z \"${rvm_path:-}\" ] &amp;&amp; [ -x \"${HOME:-}/.rvm/bin/rvm\" ]then rvm_path=\"${HOME:-}/.rvm\"fiif [ -z \"${rvm_path:-}\" ] &amp;&amp; [ -x \"/usr/local/rvm/bin/rvm\" ]then rvm_path=\"/usr/local/rvm\"fi# load environment of current project rubyif  [ -n \"${rvm_path:-}\" ] &amp;&amp;  [ -x \"${rvm_path:-}/bin/rvm\" ] &amp;&amp;  rvm_project_environment=`\"${rvm_path:-}/bin/rvm\" . do rvm env --path2&gt;/dev/null` &amp;&amp;  [ -n \"${rvm_project_environment:-}\" ] &amp;&amp;  [ -s \"${rvm_project_environment:-}\" ]then  echo \"RVM loading: ${rvm_project_environment:-}\"  \\. \"${rvm_project_environment:-}\"else  echo \"RVM project not found at: $PWD\"fiWhen your host example.dev do not work, then you need to restart your application using prax:# Go to home directory and cd into .praxcd .prax# Go to your application directorycd example.dev# for first time run the command `prax start`, later you can restart itprax restart"
  },
  
  {
    "title": "Ruby - Arrays !",
    "url": "/posts/ruby-arrays/",
    "categories": "Ruby, Arrays",
    "tags": "ruby, arrays",
    "date": "2018-09-02 09:01:18 +0545",
    





    
    "snippet": "An array is an ordered collection of elements that can be of any type. Each element in an array is referred to by an index. Array can have objects like integer, string, float, Fixnum, Hash, Symbol....",
    "content": "An array is an ordered collection of elements that can be of any type. Each element in an array is referred to by an index. Array can have objects like integer, string, float, Fixnum, Hash, Symbol.Creating / Initialization of an Arrayarr = Array.newSet array sizearr = Array.new(50)puts arr.size # 50puts arr.length # 50Assign a value of an arrayarr1 = Array.new([1,2,3,4,5])arr2 = [1,2,3,4,5]Accessing elementesarr1[3] =&gt; 4arr1[50] =&gt; nilarr1[-3] =&gt; 3arr1[0, 4] =&gt; [1,2,3,4] # 0 is the indexing value and 4 is 4 items including indexing value 0arr1[1..3] =&gt; [2,3,4]arr1.at(1) =&gt; 2arr1.fetch(4) =&gt; 5arr1.first =&gt; 1arr1.last =&gt; 5arr1.take(3)=&gt; [1, 2, 3]arr1.drop(3)=&gt; [4, 5]arr = [1,2,3,4,5]arr.count =&gt; 5arr.empty? # =&gt; falsearr.include?(2) =&gt; trueCheck if two array objects are equal# checks the valuearr1.eql? arr2=&gt; true# checks the references of the object, object idarr1.equal? arr2=&gt; false# This is because object_id for both object is differentarr1.object_id = 11544620arr2.object_id = 11617600arr1 = arr2arr1.equal? arr2 =&gt; true# Now object_id for both object is samearr1.object_id = 11617600arr2.object_id = 11617600Check if there are same elements in both arraysarray1 = [1,2,3]array2 = [2,3,1]array1.to_set == array2.to_set=&gt; truearray1 = [1,2,3,4]array2 = [1,2,3]array1.to_set == array2.to_set=&gt; false#### In Ruby &gt;= 2.6 we can use array1.intersection(array2) method, if both are same it returns empty array [][ 1, 2, 3 ].difference([ 3, 2, 1 ])[ 1, 2, 3 ].difference([ 1, 2, 3 ])=&gt; []Word array create an array in which each entry is a single word.count  = %w{one two three four five}This is equivalent tocount = [\"one\", \"two\", \"three\", \"four\", \"five\"]Nested Array: Array can contains other arraysstaffs_info = [  [\"Ram\", \"0012\", \"Manager\"],  [\"Shyam\", \"0013\", \"HR Manager\"],  [\"Hari\", \"0014\", \"Receptionist\"]]Accessing value of nested arraystaffs_info[0][1]=&gt; \"0012\"Adding Data to Arraycount &lt;&lt; \"six\" =&gt; [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]count.push(\"seven\")=&gt; [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]# insert first position of an arraycount.unshift(\"zero\")=&gt; [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"]# insert at any positioncount.insert(5, \"between 4 &amp; 5\")=&gt; [\"zero\", \"one\", \"two\", \"three\", \"four\", \"between 4 &amp; 5\", \"five\"]# insert multivalues oncecount.insert(3, 'bet 2-3 1', 'bet2-3 2', 'bet2-3 3')=&gt; [\"zero\", \"one\", \"two\", \"bet 2-3 1\", \"bet2-3 2\", \"bet2-3 3\", \"three\", \"four\", \"between 4 &amp; 5\", \"five\"]Adding Data to nested Arraystaffs_info[0] &lt;&lt; \"Rs. 80,000\"=&gt; [\"Ram\", \"0012\", \"Manager\", \"Rs. 80,000\"]staffs_info=&gt; [[\"Ram\", \"0012\", \"Manager\", \"Rs. 80,000\"], [\"Shyam\", \"0013\", \"HR Manager\"], [\"Hari\", \"0014\", \"Receptionist\"]]Array pop / Remove items from an arrayarr = [1,2,3,4,5]arr.pop=&gt; 5arr=&gt; [1,2,3,4]# array.unshift(0) will add o to start of an array while array.shift will remove first elementarr = [1,2,3,4,5]arr.shift =&gt; 1arr[2,3,4,5]# delete an item at particular index use delete_at(index_position)arr = [1,2,3,4,5]arr.delete_at(2)=&gt; 3arr[1,2,4,5]# compact() is used to remove nil value from an arrayarr = [nil, 1, 2, 3, nil, 4, nil, 5]arr.compact[1,2,3,4,5]arr=&gt; [nil, 1, 2, 3, nil, 4, nil, 5]arr.compact!=&gt; [1,2,3,4,5]arr=&gt; [1,2,3,4,5]arr = [1,1,2,2,3,3,4,4,5,6,7]arr.uniq=&gt; [1, 2, 3, 4, 5, 6, 7]Iterating over an Arrayarr = [1,2,3,4,5]arr.each {|item| p item+10}=&gt; it prints 11,12,13,14,15arr = [1,2,3,4,5]arr.reverse_each {|item| p item+10}=&gt; it prints 15,14,13,12,11arr = [1,2,3,4,5]arr.map {|item| p item+10}=&gt; it prints 11,12,13,14,15arr=&gt; 1,2,3,4,5arr.map! {|item| p item+10}arr=&gt; [11, 12, 13, 14, 15]Selecting items from an ArrayNon-destructive Selectionarr = [1,2,3,4,5,6,7,8]arr.select {|a| a &gt; 3}# =&gt; [4,5,6,7,8]arr.reject {|a| a &lt; 3}# =&gt; [3,4,5,6,7,8]arr.drop_while {|a| a &lt; 5}# =&gt; [5,6,7,8]arr=&gt; [1,2,3,4,5,6,7,8] Destructive SelectionDestructive methods are select! and reject!arr.select! {|a| a &gt; 3}=&gt; [4, 5, 6, 7, 8]arr=&gt; [4, 5, 6, 7, 8]&gt; arr = [1,2,3,4,5,6,7,8]=&gt; [1, 2, 3, 4, 5, 6, 7, 8] &gt; arr.delete_if { |a| a &lt; 4 }=&gt; [4, 5, 6, 7, 8] &gt; arr=&gt; [4, 5, 6, 7, 8]arr = [1, 2, 3, 4, 5, 6, 7, 8]arr.keep_if { |a| a &lt; 4 }[1,2,3]arr=&gt; [1, 2, 3]            Public methods like &amp;,      , &amp;&amp;,      ¬†      a = [1, 2, 3, 4]b = [3, 4, 5, 6]Set intersection:a &amp; b=&gt; [3, 4]a | b=&gt; [1, 2, 3, 4, 5, 6]a || b=&gt; [1, 2, 3, 4]a &amp;&amp; b=&gt; [3, 4, 5, 6]Concatenating two arrays:[\"a\", \"b\"] + [\"c\", \"d\"]=&gt; [\"a\", \"b\", \"c\", \"d\"]Difference of arrays:[\"a\", \"b\", \"c\", \"d\", \"e\"] - [\"c\", \"d\"]=&gt; [\"a\", \"b\", \"e\"]Arrarys can be chained together and returns an array (arr ¬´¬†obj -&gt; arr)[\"a\", \"b\"] &lt;&lt; 10 &lt;&lt; [\"c\", \"d\"]=&gt; =&gt; [\"a\", \"b\", 10, [\"c\", \"d\"]]array &lt;=&gt; another_array -&gt; -1, 0, +1 or nila = [1,2]b = [3,4]a &lt;=&gt; b =&gt; -1a = [1, 2]b = [1, 2]a &lt;=&gt; b =&gt; 0 a = [1, 2, 3] b = [1, 2] a &lt;=&gt; b =&gt; 1 a = [1, 2, 3] b = [1, 2, :v] a&lt;=&gt;b =&gt; nilarr == another_arr -&gt; bool[1,3] == [1,3] #=&gt; true[1,3] == [1,3,4] #=&gt; false            bsearch {      x      block} -&gt; elm      Binary search finds a value from this array which meets the given condition in O(log n) where n is the size of the array.arr = [0,1,2,3,4,5]arr.bsearch {|x| x &gt;= 2}=&gt; 2Clear an Arrayarr = [1,2,3,4,5]arr.clear# =&gt; []a = [1,2,3,4,5]a.collect {|x| x.to_s+\"!\"}=&gt; [\"1!\", \"2!\", \"3!\", \"4!\", \"5!\"]a.collect.with_index {|x,i| p i}=&gt; [0, 1, 2, 3, 4]a.map.with_index {|x,i| p i}=&gt; [0, 1, 2, 3, 4]Combinationa = [1,2,3,4,5]a.combination(1).to_a#=&gt; [[1], [2], [3], [4], [5]]a.combination(2).to_a=&gt; [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]]a.combination(3).to_a=&gt; [[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]compact[1,2,nil,'a','b',4].compact#=&gt; [1,2,'a','b',4]concat[1,2].concat([5,6])#=&gt; [1,2,5,6]cycleCalls the given block for each element n times or forever if nil is given.Does nothing.a=[\"a\",\"b\",\"c\"]a.cycle {|x| puts x} # infinite loopa.cycle(2) {|x| puts x} # =&gt; a b c a b c Array fillarr = [1,2,3]arr.fill('a')=&gt; [\"a\", \"a\", \"a\"]flattenarr = [[1,2], 3,4,[5]]arr.flatten# =&gt; [1,2,3,4,5]replacearr = ['a', 'b']arr.replace([1,2])=&gt; [1,2]sorta = [5,4,6,8]a.sort=&gt; [4, 5, 6, 8]Conversionto_s =&gt; returns the stringto_h =&gt; returns hash i.e. [key, value] pairs&gt; [[1,:b], [2,:c]].to_h=&gt; {1=&gt;:b, 2=&gt;:c}to_a =&gt; returns selfto_ary =&gt; returns selftranspose matrixa = [[1,2], [3,4], [5,6]]a.transpose=&gt; [[1,3,5], [2,4,6]]"
  },
  
  {
    "title": "Ruby - Switch Case Statement !",
    "url": "/posts/ruby-switch-case/",
    "categories": "Ruby, Switch Case",
    "tags": "ruby, switch_case",
    "date": "2018-09-01 07:12:18 +0545",
    





    
    "snippet": "Ruby uses the case expression with one or more when conditions. After execution it returns one of the when statement or default else case.case gets.chompwhen '1'  puts \"You have entered 1\"when '2' ...",
    "content": "Ruby uses the case expression with one or more when conditions. After execution it returns one of the when statement or default else case.case gets.chompwhen '1'  puts \"You have entered 1\"when '2'  puts \"You have entered 2\"else  puts 'You have entered number other than 1 &amp; 2'end"
  },
  
  {
    "title": "Ruby - Loops & Iterators !",
    "url": "/posts/ruby-loops-and-iterators/",
    "categories": "Ruby, Loops & iterators",
    "tags": "ruby, loops",
    "date": "2018-09-01 04:19:12 +0545",
    





    
    "snippet": "Loop is the process in which set of instructions or block of codes are repeated in a specified number of times under certain condition is satisfied. for, while, do while are example of loops.while ...",
    "content": "Loop is the process in which set of instructions or block of codes are repeated in a specified number of times under certain condition is satisfied. for, while, do while are example of loops.while loopRuby while loop is used to execute a program until condition is true, once condition fails execution is terminated from loop. While loop is used when number of needed iterations is not fixed.count = 0while count &lt; 5 do  p count  count = count+1enddo while loop# syntaxloop do  # some code here  break if &lt;condition&gt;end# Examplei = 1while true  puts i  i = i + 1  break if i &gt; 5endi = 1loop do  puts i  i = i + 1  break if i &gt; 5endfor loopfor loop is used to run block of code in a specific number of times when number of needed iterations is known.for num in 1..100  puts numend Range loopRuby each method is used to iterator over individual item in an array.(1..100).each do |num|  puts numend# loop through an array using each[1, 2, 3].each do |i|  puts iend# loop through hash using eachhash_var = {name: 'Car', color: 'Red', model: '2018'}hash_var.each do |key, value|  puts \"#{key} =&gt; #{value}\"end# find index in loop using each_with_index[10, 11, 12].each_with_index do |val, key|  p keyend=&gt; 0   1   2Times loop5.times {|i| puts \"number #{i}\"}skip iterations with the next keyword10.times do |i|  res = i % 2  next unless res==0  puts iendstop a loop early using breakarr = [2,4,6,8,10,12]arr.each do |el|  break if el &gt; 10  puts elend"
  },
  
  {
    "title": "Ruby - Control Flow Statement !",
    "url": "/posts/ruby-if-else-unless-statements/",
    "categories": "Ruby, Control Statement",
    "tags": "ruby, control_structure",
    "date": "2018-08-30 09:23:58 +0545",
    





    
    "snippet": "if Statement in Rubyif, elsif and else block in Ruby controls decision based on the condition to true/false resulting in the different execution of the code.key = 10if key &gt; 15  puts 'Key is gre...",
    "content": "if Statement in Rubyif, elsif and else block in Ruby controls decision based on the condition to true/false resulting in the different execution of the code.key = 10if key &gt; 15  puts 'Key is greater than 15'elsif key &lt; 8  puts 'key is less than 8'else  puts 'key is between 8 and 15'end unless statement is inverse of if statement. unless statement is executed if expression is not truenum = 10unless num == 9  puts \"Selected number is not 10\"endTernary OperatorTernary operator is short hand for if else expression. Two symbols ? : are used.x = 2x &gt; 5 ? 'Greater' : 'Smaller' "
  },
  
  {
    "title": "Ruby String !",
    "url": "/posts/ruby-string/",
    "categories": "Ruby, String",
    "tags": "ruby, string",
    "date": "2018-08-30 09:23:58 +0545",
    





    
    "snippet": "About StringString holds and manipulates an arbitrary sequence of bytes which is group of characters. String in ruby is defined using single quote and double quote as:strvar = 'this is string'strva...",
    "content": "About StringString holds and manipulates an arbitrary sequence of bytes which is group of characters. String in ruby is defined using single quote and double quote as:strvar = 'this is string'strvar1 = \"this is string #{some_dynamic_var}\"Find string lengthsize() and length() are used to find string length\"string\".size=&gt; 6String Interpolationstr = \"String\"puts \"This Is #{str}\"Ruby calls to_s() on the string interpolation block which is used to convert object itself into string.Extract a Substringstr = \"longstring\"str[0,4]# longstr[4,6]# stringstr[0..-2]# longstrinstr[0..3] = ''# stringinclude? is used to find if string contains another stringstr = \"My name is Mr. ABC\"str.include?(\"ABC\")# trueindex() can be used to find the start position / index position of the stringstr = \"My name is Mr. ABC\"str.index(\"ABC\")# 15In Ruby String add more string like this:str = \"string\"str.rjust(18, \"0\") =&gt; \"000000000000string\"str.ljust(18, \"0\") =&gt; \"string000000000000\" Case in Stringvar1 = \"str\"var2 = \"Str\"var1.upcase == var2.upcase=&gt; truevar1.casecmp?(var2) # casecmp? Case-insensitive version of String=&gt; trueTrim a String &amp; Remove a White Spacestr = \"   string   \"str.strip=&gt; \"string\"Trim left and right stringstr = \"   string   \"str.lstrip =&gt; \"string   \"str.rstrip =&gt; \"   string\" String prefix and suffixstart_with?, end_with?str = \"a red car\"str.start_with?(\"a\")# truestr.start_with?(\"car\")# trueRuby 2.5 has two methods delete_prefix &amp; delete_suffixstr = \"a red car\"str.delete_prefix(\"a red\") =&gt; \" car\" str.delete_suffix(\"red car\") =&gt; \"a \"Convert string to array of charactersstr = \"string\"str.split(\"\")=&gt; [\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]Convert arrary to stringarr = [\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]arr.join=&gt; \"string\"arr.join(\"-\") =&gt; \"s-t-r-i-n-g\"Count specific characters\"lophophorous\".count(\"o\")=&gt; 4#### Convert string to integer\"str\".to_i=&gt; 0\"50\".to_i=&gt; 50check string is a numbermatch() is introduced in Ruby 2.4\"123\".match?(/\\A-?\\d+\\Z/)=&gt; true\"123sadf\".match?(/\\A-?\\d+\\Z/)=&gt; falseAppend Charactersstr = \"\"str &lt;&lt; \"Ruby\"str &lt;&lt; \" \"str &lt;&lt; \"Rails\"# \"Ruby Rails\"Note: When you use += for string concatenation, this way new string will be created every time which is not good for performance.Loop through characters\"hello world\".each_char {|ch| puts ch}\"hello world\".chars =&gt; [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"] String Case\"hello\".upcase=&gt; \"HELLO\"\"HELLO\".downcase=&gt; \"hello\"Multiline Stringsb = &lt;&lt;-STRINGhelloworldSTRINGa = %Q(helloworld) =&gt; \"hello\\nworld\\n\"Gsub() replace textstr = \"The color of car is red\"str.gsub(\"red\", \"blue\")=&gt; \"The color of car is blue\"str = \"helloooo\"str.gsub(\"o\", '')=&gt; \"hell\"str = \"my id is 5\"str.gsub(/\\d+/, '1001')=&gt; \"my id is 1001\" str.gsub(/\\w+/) {|w| w.capitalize} =&gt; \"My Id Is 5\"Remove last character of a string\"hello\".chomp(\"o\")=&gt; hellRemove first and last character if first and last letter satisfied some valuestr = \"{'a','b','c'}\"str[1..-1] if str.chars.first == '{'str[0...-1] if str.chars.last == '}'Change string encodings\"string\".encoding =&gt; #&lt;Encoding:UTF-8&gt;\"string\".force_encoding(\"UTF-8\")Find out number of occurrence of each character in a given stringstr = \"hello world\"arr = str.split(\"\")arr.uniq.each {|x| p \"Count of #{x} = #{str.count(x)}\" if x != \" \"output:\"Count of h = 1\"\"Count of e = 1\"\"Count of l = 3\"\"Count of o = 2\"\"Count of w = 1\"\"Count of r = 1\"\"Count of d = 1\""
  },
  
  {
    "title": "Get user input in Ruby!",
    "url": "/posts/ruby-get-user-input/",
    "categories": "Ruby, Get user input",
    "tags": "ruby, get_user_input",
    "date": "2018-08-30 09:23:58 +0545",
    





    
    "snippet": "Getting user inputgets keyword is used to get the user input as a string.#!/usr/bin/rubyputs 'what is your name?'name = gets.chompputs \"How are you #{name}\"String#chomp method returns string after ...",
    "content": "Getting user inputgets keyword is used to get the user input as a string.#!/usr/bin/rubyputs 'what is your name?'name = gets.chompputs \"How are you #{name}\"String#chomp method returns string after removing extra line."
  },
  
  {
    "title": "Ruby Put and Print Commands !",
    "url": "/posts/ruby-puts-print-command/",
    "categories": "Ruby, Puts vs. Print",
    "tags": "ruby, print",
    "date": "2018-08-30 05:12:38 +0545",
    





    
    "snippet": "puts vs printputs and print both are used to display the result of evaluating Ruby code.Major difference between these two are: puts adds a newline after executing but print does not add new line.p...",
    "content": "puts vs printputs and print both are used to display the result of evaluating Ruby code.Major difference between these two are: puts adds a newline after executing but print does not add new line.puts \"one two\"one two=&gt; nilprint \"one two\"one two =&gt; nilprint [1,2,nil][1, 2, nil] =&gt; nilputs [1,2,nil]12=&gt; nil "
  },
  
  {
    "title": "Sql Having & GroupBy!",
    "url": "/posts/sql-having/",
    "categories": "SQL, Having - Group by",
    "tags": "sql, having_group_by",
    "date": "2018-08-29 09:23:58 +0545",
    





    
    "snippet": "Having &amp; Group Clause  Having is used to restrict the rows affected by the Group By clause as it iis similar to Where clause.  Having applies to summarized group records, whereas Where applies ...",
    "content": "Having &amp; Group Clause  Having is used to restrict the rows affected by the Group By clause as it iis similar to Where clause.  Having applies to summarized group records, whereas Where applies to individual records.  Only the groups that meets Having criteria will be returned.  Having requires that the GROUP BY clause is present so both are in the same query.  Group By in sql is used to return distinct rows based on table column supplied on group by or group() method.We have following records in our database, now we want to group record based on i) title ii) id, title combination, and filter further to get count result for articles id greater than 2.&lt;Article id: 1, title: \"\", created_at: \"2019-04-23 05:44:22\", updated_at: \"2019-04-23 05:44:23\"&gt;&lt;Article id: 2, title: \"WND\", created_at: \"2019-04-23 05:46:20\", updated_at: \"2019-04-23 05:46:20\"&gt;&lt;Article id: 3, title: \"a\", created_at: \"2019-04-25 07:35:49\", updated_at: \"2019-04-25 07:35:50\"&gt;&lt;Article id: 4, title: \"a\", created_at: \"2019-04-25 07:35:52\", updated_at: \"2019-04-25 07:35:52\"&gt;]Article.group(:title).countSELECT COUNT(*) AS count_all, \"articles\".\"title\" AS articles_title FROM \"articles\" GROUP BY \"articles\".\"title\"=&gt; {\"\"=&gt;1, \"WND\"=&gt;1, \"a\"=&gt;2}Article.group(:id, :title).countSELECT COUNT(*) AS count_all, \"articles\".\"id\" AS articles_id, \"articles\".\"title\" AS articles_title FROM \"articles\" GROUP BY \"articles\".\"id\", \"articles\".\"title\"=&gt; {[1, \"\"]=&gt;1, [2, \"WND\"]=&gt;1, [3, \"a\"]=&gt;1, [4, \"a\"]=&gt;1}Article.group(:title).having(\"articles.id&gt;2\").countSELECT COUNT(*) AS count_all, \"articles\".\"title\" AS articles_title FROM \"articles\" GROUP BY \"articles\".\"title\" HAVING (articles.id&gt;2)=&gt; {\"a\"=&gt;2}#group_by is used to group the record and #transform_values can be used to count each grouped records.Institution.first.items.includes(:vendor).group_by{|item| item.vendor.name}.transform_values {|values| values.count}=&gt; {\"Vendor 1\"=&gt;1, \"Vendor 2\"=&gt;3, \"Vendor 3\"=&gt;3, \"Vendor 4\"=&gt;1, \"Vendor 5\"=&gt;10 }"
  },
  
  {
    "title": "Ruby Variables!",
    "url": "/posts/Ruby-variables/",
    "categories": "Ruby, Variable",
    "tags": "ruby, variable",
    "date": "2018-08-29 09:23:58 +0545",
    





    
    "snippet": "What is Ruby variables?Variables are like containers used to store information for later use. Values can be stored in the form of Integer, String, Boolean, Float, Decimal, Array, Hashes, etc.Variab...",
    "content": "What is Ruby variables?Variables are like containers used to store information for later use. Values can be stored in the form of Integer, String, Boolean, Float, Decimal, Array, Hashes, etc.Variable can be declared as:num = 10str = \"this is string\"char = 'A'arr = [0,1,2,3,4]hash_var = {name: 'Shiv Raj', code: '00145', address: 'Nepal', \"email\" =&gt; 'shivrajbadu@gmail.com'}bool_var = falseMany languages like C, Java are strong or static variable typing. That means you must define a variable type when declaring them e.g. if it is integer you must write int var_name, if string you must write varchar var_name. But Ruby is dynamically typed language which means we do not need to define type of the variable, and once variable is declared, you can later on change the variable type in the code, these are the advantage of dynamically typed lanaugage.Way to know Ruby Variable TypeUse kind_of? method of Object class.num = 10num.kind_of?(Integer) # trueTo get the class method name used by the variablenum.class=&gt; Fixnumstr = 'this is string'str.class=&gt; String  Variable type can be changed just by assigning new valuex = 10x.class # Fixnumx = \"Ten\"x.class # String  Convert the values of the variablesx=10=&gt; 10x.to_f=&gt; 10.0x.to_s=&gt; \"10\"x.to_s(2) # convert to base 2 binary=&gt; 1010x.to_s(16) # convert to hexadecimal=&gt; \"a\"x.to_s(8) # convert to octal=&gt; \"12\""
  },
  
  {
    "title": "Ruby Variables Scope!",
    "url": "/posts/Ruby-variables-scope/",
    "categories": "Ruby, Variable Scope",
    "tags": "ruby, variable",
    "date": "2018-08-29 09:23:58 +0545",
    





    
    "snippet": "Scope of Ruby variables  Global VariableGlobal Variables can be accessed inside classes and it‚Äôs methods. Global variable are available everywhere. It is defined by prefacing the variable name with...",
    "content": "Scope of Ruby variables  Global VariableGlobal Variables can be accessed inside classes and it‚Äôs methods. Global variable are available everywhere. It is defined by prefacing the variable name with $ symbol. Before initialization it has value nil.$global_variable = 'This is a global variable !'class Example  def test_global    puts $global_variable  endend# instantiation and callobj = Example.newobj.test_global # This is a global variable !  Instance VariableInstance Variable is accessible in any instance method in a particular instance of a class. It is defined by prefacing the variable name with @ symbol.class Vehicle  def initialize(name, color)    @name = name    @color = color  end  def full_info    puts \"Name of vehicle is: #{@name} with color #{@color} !\"  endend# instantiatevehicle = Vehicle.new('Car', 'Red');# method callvehicle.full_info # Name of vehicle is: Car with color Red !  Local VariableLocal variable has local scope which be accessed inside the code where they are declared, that is when local variable is decared inside method or loop it cannot be used outside of method or loop. It is defined by small letter or begin with underscore.class LocalVariable  def fun    local_var1 = 'one'    _LocalVar2 = 'two'    puts local_var1 + _LocalVar2  endend# instantiation and callLocalVariable.new.fun # onetwo  Class VariableA class variable is a variable that is shared amongst all instances of the class. Class variable are declared with @@ sign. Class variable are called on the class itself. Class variables are like global variable but inside the class scope.class Vehicle  @@name = 'Honda'  def self.name    puts @@name  endendVehicle.name  Ruby ConstantRuby constant are the values whose value cannot be changed once it is assigned. Constant declared within a class are available anywhere within the context of class, and when declared outside of class are assined with a global scope. Constants are written in uppercase letter with underscore to seperate different word.PROJECT_VALUE=100"
  },
  
  {
    "title": "Write Comments on Ruby!",
    "url": "/posts/Comments-in-Ruby/",
    "categories": "Ruby, Comments",
    "tags": "ruby, comments",
    "date": "2018-08-28 09:23:58 +0545",
    





    
    "snippet": "How to write comments on RubyComments in Ruby can be written in two ways:  Single line commentSingle line comment followed by # symbol  # This is a single line comment.  Multi line commentsMultilin...",
    "content": "How to write comments on RubyComments in Ruby can be written in two ways:  Single line commentSingle line comment followed by # symbol  # This is a single line comment.  Multi line commentsMultiline comments starts with =begin and ends with =end=begin  This is multiline comments.  One can write number of lines as per need.=end"
  },
  
  {
    "title": "Backup and Restore PostgreSQL Database",
    "url": "/posts/backup-and-restore-postgresql-databases-on-ubuntu-16-04/",
    "categories": "PostgreSQL, Backup Restore",
    "tags": "postgresql, backup_restore",
    "date": "2018-08-27 09:23:58 +0545",
    





    
    "snippet": "Backup Databasepg_dump is the PostgreSQL utility to backup the database.To backup a single database, run below command in command line interface as superuser.~ sudo pg_dump -U postgres -h localhost...",
    "content": "Backup Databasepg_dump is the PostgreSQL utility to backup the database.To backup a single database, run below command in command line interface as superuser.~ sudo pg_dump -U postgres -h localhost name-of-database &gt; name-of-backup-fileRestore DatabaseBackup file created can be useful to restore your system.To restore it is essential to create a empty database and then you can restore database using following command:psql new_Database_name &lt; path_to_backup_fileHere is the full script to restore the single databasesudo su - postgrespostgres@usr-Aspire-E5-575G:~$ psqlpostgres=# CREATE DATABASE new_database_name TEMPLATE template0;postgres@usr-Aspire-E5-575G:~$ psql new_database_name &lt; /home/siv/name-of-backup-file"
  },
  
  {
    "title": "How to install Ruby on Windows?",
    "url": "/posts/Ruby-Install-Win-And_Run_App/",
    "categories": "Ruby, Operate on WindowsOS",
    "tags": "ruby, windowsOS",
    "date": "2018-08-06 04:23:58 +0545",
    





    
    "snippet": "When you are on Windows machineYou can install BitnamiRubyStack Installers or RubyInstaller. But BitnamiRubyStack always doesnot have latest ruby supported for Win.When you are dealing with RubyEnc...",
    "content": "When you are on Windows machineYou can install BitnamiRubyStack Installers or RubyInstaller. But BitnamiRubyStack always doesnot have latest ruby supported for Win.When you are dealing with RubyEncoder you might need the same Ruby Version in which application is build. So here is the tips how you can switch your ruby versions in your Win Machine.Let say by BitnamiRubyStack your ruby version is already installed to 2.0.x ver and it is deafault version used in your system. Also you had already installed Ruby 2.4.x version using RubyInsaller but it is not the default just installed. So what you need to do is:- Uninstall default ruby 2.0- load the installed ruby 2.4.x bin executable path- check from any dir say c:/&gt;ruby -v , it should display ruby 2.4.2- Now everything is Ok to move aheadYou may get following errors:ERR:C:\\Users\\Siv\\Desktop\\2314\\newtest&gt;bundle installC:/Ruby24-x64/lib/ruby/2.4.0/rubygems/dependency.rb:308:in `to_specs': Could not find 'bundler' (&gt;= 0) among 13 total gem(s) (Gem::MissingSpecError)Checked in 'GEM_PATH=C:/Users/Siv/.gem/ruby/2.4.0;C:/Ruby24-x64/lib/ruby/gems/2.4.0', execute `gem env` for more information        from C:/Ruby24-x64/lib/ruby/2.4.0/rubygems/dependency.rb:320:in `to_spec'        from C:/Ruby24-x64/lib/ruby/2.4.0/rubygems/core_ext/kernel_gem.rb:65:in `gem'To Resolve just rungem install bundlerERR:C:\\Users\\Siv\\Desktop\\2314\\newtest&gt;rails sC:/Ruby24-x64/lib/ruby/2.4.0/rubygems/dependency.rb:308:in `to_specs': Could not find 'railties' (&gt;= 0) among 14 total gem(s) (Gem::MissingSpecError)Checked in 'GEM_PATH=C:/Users/Siv/.gem/ruby/2.4.0;C:/Ruby24-x64/lib/ruby/gems/2.4.0', execute `gem env` for more information        from C:/Ruby24-x64/lib/ruby/2.4.0/rubygems/dependency.rb:320:in `to_spec'        from C:/Ruby24-x64/lib/ruby/2.4.0/rubygems/core_ext/kernel_gem.rb:65:in `gem'        from C:/Ruby200/bin/rails:22:in `&lt;main&gt;'Just run following commandsbundle installAdd the gemPlease add the following to your Gemfile to avoid polling for changes:gem 'wdm', '&gt;= 0.1.0' if Gem.win_platform?"
  },
  
  {
    "title": "Set up docker on Ruby on Rails application",
    "url": "/posts/setup-docker-on-ror/",
    "categories": "Docker, Ruby on Rails",
    "tags": "docker, ruby on rails",
    "date": "2018-07-25 09:23:58 +0545",
    





    
    "snippet": "First you need to install docker, docker-compose, docker-machine, on your system.We need following files initially# install scripts dockerfile # ignore while pushing the code .dockerignore # list e...",
    "content": "First you need to install docker, docker-compose, docker-machine, on your system.We need following files initially# install scripts dockerfile # ignore while pushing the code .dockerignore # list env vars .env # run the processes, containers and apps docker-compose.ymlRun the services and processesdocker-compose upBuild dependenciesdocker-compose ‚Äìbuild# to see container listdocker container ls# to see all the processesdocker ps# to stop all the processes, so instead of killing all the container and processes, later on you can restart againdocker-compose stop# website is the name of the service to run rails appdocker-compose run ‚Äìrm website rake db:create db:migratedocker-compose run website rake db:migrate db:seed RAILS_ENV=productionenter into bash shellsudo docker run -i -t &lt;image/id&gt; /bin/bashforcefully remove imagedocker rmi 24a77bfbb9ee -fremove all the containersdocker rm $(docker ps -a -q)Note: If you don‚Äôt have Docker running on your local machine, you need to replace localhost in the above URL with the IP address of the machine Docker is running on. If you‚Äôre using Docker Machine, you can run below cmd to find out the IP.docker-machine ip ‚Äú${DOCKER_MACHINE_NAME}‚ÄùTo run rails consoledocker-compose exec website rails console"
  },
  
  {
    "title": "Introduction - Ruby!",
    "url": "/posts/introduction-ruby/",
    "categories": "Ruby, Introduction",
    "tags": "ruby, introduction",
    "date": "2018-04-23 09:23:58 +0545",
    





    
    "snippet": "Ruby is a dynamic, open source, server-side scripting, interpreted, reflective, object-oriented, general purpose programming language. It was designed by Yukihiro Matsumato in Japan in the mid-1990...",
    "content": "Ruby is a dynamic, open source, server-side scripting, interpreted, reflective, object-oriented, general purpose programming language. It was designed by Yukihiro Matsumato in Japan in the mid-1990s.Features of Ruby  Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, and Lisp.  Ruby has an automatic  memory management and dynamic type system.  Ruby can run on multiple platforms such as the various versions of Windows, MAC OS and UNIX.  Ruby is free of charge but requires a liscence.  Ruby can be used to write Common Gateway Interface (CGI) scripts.  Ruby can be embedded into HTML.  Ruby written applications can be easily maintainable and scalable.  Ruby can be used for the development of Internet and Intranet applications.  Ruby supports many GUI tools such as Tcl/Tk, GTK, OpenGL.  Ruby can easily connect to DB2, MySQL, Oracle, Sybase.Compile Ruby programCreate a file hello_world.rb and write below code in it  #! /usr/bin/ruby  puts \"Hello World !!\";To run above code first go to the directory where hello_world.rb exists, then run the commandruby hello_world.rb# output isHello World !!In irb interactive command line mode you can run and test following code:&gt;&gt; puts \"Hello, world !!\"Hello, world !!=&gt; nil"
  },
  
  {
    "title": "Association in Ruby on Rails!",
    "url": "/posts/association-in-ruby-on-rails/",
    "categories": "Ruby on Rails, Association",
    "tags": "ruby on rails, association",
    "date": "2018-04-21 09:23:58 +0545",
    





    
    "snippet": "Ruby on Rails AssociationWhen column on database table grows, the column needs to be put into new table if the records emphasizes on data redundancy and data dependency and data normalization takes...",
    "content": "Ruby on Rails AssociationWhen column on database table grows, the column needs to be put into new table if the records emphasizes on data redundancy and data dependency and data normalization takes place. So, various tables are created which are linked or connected with one another via foreign keys. When connection takes place between two associated Active Record Models it is called as an Association.Various Types of Association  One-to-One  One-to-Many  Many-to-Many  Polymorphic One-to-ManyOne-to-OneIn this type of association, the data records contains one instance of another model.Model look like this:class User &lt; ApplicationRecord           class CitizenshipNumber &lt; ApplicationRecord    has_one :citizenship_number             belongs_to :user                        end                                      endTable look like this:  users                      profiles  -----                      ---------  id  (primary key)           id  username                    name  password                    user_id (foreign key)One-to-ManyIn this type of association, instance of first model can have zero or more than one instances of second model and second model belongs to only first model.Model look like this:class User &lt; ApplicationRecord         class Post &lt; ApplicationRecord    has_many :posts                       belongs_to :userend                                    endTable look like this:  users                      posts  -----                      ---------  id  (primary key)           id  username                    title  password                    user_id (foreign key)Many to ManyIt can be handled in two ways: has and belongs to many and has many through relationships.Has and belongs to manyIn this type of association, has_and_belongs_to_many methods is called from both the models in order to create many to many connection with another model. Rails migration need to be created in the following format in order to create join table.rails g migration CreateJoinTableUserPost user postwhich generates migration file like this:class CreateJoinTableUserPost &lt; ActiveRecord::Migration[5.0]  def change    create_join_table :users, :posts do |t|      t.index [:user_id, :post_id]    end  endendModel look like this:class User &lt; ApplicationRecord         class Post &lt; ApplicationRecord  has_and_belongs_to_many :posts         has_and_belongs_to_many :usersend                                    endTable look like this:  users                users_posts                posts  -----                -----------                ---------  id  (primary key)    id                         id  username             user_id (foreign key)      name  password             post_id (foreign key)      Has many throughIn this type of many-to-many association, unlike join intermediate table was created in has_and_belongs_to_many, but join intermediate model is created which points both the associated parent model.Model look like this:class User &lt; ApplicationRecord                class Post &lt; ApplicationRecord  has_many :posts, through: user_posts           has_many :users, through: user_posts  has_many :user_posts                           has_many :user_postsend                                           endclass UserPost &lt; ApplicationRecord    belongs_to :users    belongs_to :postsendTable look like this:  users                user_posts                 posts  -----                -----------                ---------  id  (primary key)    id                         id  username             user_id (foreign key)      name  password             post_id (foreign key)      Polymorphic One-to-ManyIn this type of association, one model is belongs to many different models on a single association. Let‚Äôs say Post has video, Article has Video, UserProfile has video, Blog has video. So all these models Post, Article, UserProfile, Blog needs to be handled by polymorphic interface called as Videoable.Model look like this:class Post &lt; ApplicationRecord         class Article &lt; ApplicationRecord  has_many :video, as: :videoable         has_many :video, as: :videoableend                                    endclass UserProfile &lt; ApplicationRecord  class Blog &lt; ApplicationRecord  has_many :video, as: :videoable         has_many :video, as: :videoableend                                    endclass Videoable &lt; ApplicationRecord    belongs_to :videoable, polymorphic: trueendGenerally polymorphic table needs type column (videoable_type: string) and foreign_key column (videoable_id: integer)Table look like this:  videos               Post      Article   Blog    UserProfile      -----                -----     -------   -----   -----------  id  (primary key)     id        id        id      id  videoable_id          title     title     title   full_name  videoable_type Migration:class CreateVideos &lt; ActiveRecord::Migration  def change    create_table :videos do |t|      t.integer :videoable_id      t.string :videoable_type      t.timestamps    end    add_index :videos, :videoable_id  endend# orclass CreateVideos &lt; ActiveRecord::Migration  def change    create_table :videos do |t|      t.references :videoable, polymorphic: true, index: true      t.timestamps    end  endend"
  },
  
  {
    "title": "Introduction - Ruby on Rails!",
    "url": "/posts/introduction-ruby-on-rails/",
    "categories": "Ruby on Rails, Introduction",
    "tags": "ruby on rails, introduction",
    "date": "2018-04-21 09:23:58 +0545",
    





    
    "snippet": "Rails is a server-side web application development framework written in the Ruby programming language. Ruby on Rails help developer to write small to large web applications quickly.Ruby on Rails is...",
    "content": "Rails is a server-side web application development framework written in the Ruby programming language. Ruby on Rails help developer to write small to large web applications quickly.Ruby on Rails is popular among other frameworks because:  Rails provides amazing tools like scaffolding, which helps in developing web applications in very less time.  Ruby on Rails is 100% free as it is open source framework.  It is based on MVC (Model-View-Controller) pattern which is popular among web developers.  RubyGems are the libraries which are available publicly and well documented.  Ruby is easy to learn.  Rails supports integrated testing.  Saves money and time.  Code can be easily maintained.  Huge number of helping communitiesThere are many biggest applications developed from Ruby on Rails like Github, ThemeForest, Groupon, Pixlr, Shopify, Airbnb, etcRails Design Principles:      MVC (Model, View, Controller)    MVC pattern splits an application into three modules a Model, View and Controller. There is ‚Äúseparation of the concerns‚Äù among Models, Views and Controllers as each parts has it‚Äôs own responsibility.    Model    Model is the layer which interact with the database to retrieve and store the data. You can define the classes in model layer which is used by the application. e.g: Article model is created when you want to develop article functionality. Model also maintains the relationship between the objects and the database and handles validation, association, transaction, etc.    Active Record is the Model in MVC which represents business logic. Business object can be created with the help of Active Record and those object carries persistent data.    View    View layer is the presentation layer which is used to return relevant HTML to be rendered on the users browser.ActionView is the View in Rails MVC which is a part of ActionPack library.    Controller    The controller interacts with the model to retrieve and store data. The retrived data from model will pass to the view. The view returns the resulting HTML to the controller and the controller send this back to the users browser.ActionController is the controller in MVC which handles browser request and acts as channel between Model and View. This is a part of ActionPack library.        DRY - Don‚Äôt Repeat Yourself    In this principle, developer have to reduce repetition of codes so that code should be more maintainable, more extensible, less buggy.        Convention over Configuration    This principle allows developer to use default logics and rules used by the framework so that application can be developed in very less time using very few lines of code.For example: rails g Article command will create an Article class and articles table unless developer configure another name. So this convention of framework configuration helps in Rapid application development.  Rails Web MVC Architecture"
  }
  
]

