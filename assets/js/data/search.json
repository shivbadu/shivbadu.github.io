[
  
  {
    "title": "Unlocking Creativity: Prompt Engineering in Generative AI",
    "url": "/posts/generative-ai-with-prompt-engineering/",
    "categories": "Artificial Intelligence (AI), Prompt Engineering, ChatGPT",
    "tags": "chatGPT, prompt_engineering, AI, LLM",
    "date": "2023-04-05 10:40:18 +0545",
    





    
    "snippet": "Unlocking Creativity: Prompt Engineering in Generative AIIn the ever-evolving landscape of Generative AI, one concept has taken center stage, becoming a catalyst for creativity and innovation—Promp...",
    "content": "Unlocking Creativity: Prompt Engineering in Generative AIIn the ever-evolving landscape of Generative AI, one concept has taken center stage, becoming a catalyst for creativity and innovation—Prompt Engineering. This technique, akin to providing a well-crafted instruction to a creative assistant, has proven to be a powerful tool in harnessing the potential of models like ChatGPT (Utilizes OpenAI’s Transformer architecture), Bard (built on Google’s PaLM 2 architecture) and other Large Language Models (LLMs). Let’s embark on a journey to understand the nuances and impact of prompt engineering in the realm of Generative AI.What is Generative AI?Generative AI is an AI that can create  Text  Images  Audio  Videos  3D modelsGiving Generative AIs input is known as AI Prompt Writing or AI Prompt Engineering.What is Prompt Engineering?Prompt engineering is the strategic construction of prompts or input instructions given to generative models, particularly Large Language Models (LLMs), to elicit desired outputs. In the context of Generative AI, such as ChatGPT, the quality and specificity of prompts play a pivotal role in influencing the model’s responses. It’s not just about input; it’s about crafting a precise and context-rich instruction that guides the model to generate relevant and coherent content.The Art and Science of Crafting Effective Prompts  Clarity and Specificity:The more specific and clear the prompt, the better the model, including Large Language Models (LLMs), understands the desired outcome. Explore techniques for refining prompts to achieve optimal results.  Contextual Cues:Leveraging contextual cues in prompts enhances the model’s, including Large Language Models (LLMs), ability to grasp nuances and maintain coherence in responses. Dive into examples that showcase the impact of context in prompt engineering.  Creative Exploration:Beyond specificity, prompt engineering opens doors to creative exploration, especially with the capabilities of Large Language Models (LLMs). Learn how to balance guidance with openness, allowing the model to generate imaginative and unexpected content.Applications Across Industries  Content Generation:Discover how prompt engineering, coupled with Large Language Models (LLMs), is revolutionizing content creation by enabling writers, marketers, and creatives to collaborate with AI models to generate compelling and customized content.  Problem Solving:Explore real-world applications of prompt engineering, driven by Large Language Models (LLMs), in problem-solving scenarios, where the technique aids in generating solutions, ideas, and insights.Challenges and ConsiderationsWhile prompt engineering, especially with Large Language Models (LLMs), offers immense potential, it comes with its set of challenges. From over-specification to balancing creativity, understanding the pitfalls is crucial for effective utilization.The Future of Prompt EngineeringAs Generative AI, driven by Large Language Models (LLMs), continues to advance, the role of prompt engineering is expected to grow. Explore emerging trends and potential developments that could shape the future of this innovative approach.The Role of Large Language Models (LLMs) in Prompt Engineering:Central to the success of prompt engineering is the advent of Large Language Models (LLMs), such as GPT-3 and similar advanced systems. These models, with their vast neural networks and extensive training data, possess an unparalleled ability to understand and generate human-like text. Leveraging the prowess of Large Language Models (LLMs) in prompt engineering amplifies the impact of well-crafted instructions, as these models can comprehend intricate contextual cues and produce responses with a level of coherence and creativity that was once unprecedented. As we explore the intricacies of prompt engineering, recognizing the symbiotic relationship between effective prompts and the capabilities of Large Language Models (LLMs) becomes paramount for unlocking new dimensions of generative AI creativity and utility.Let us look at some examples of prompts specifically on ChatGPT.Conclusion: Embracing the Power of PrecisionIn the dynamic landscape of Generative AI, prompt engineering, particularly with Large Language Models (LLMs), stands out as a key driver of precision and creativity. As we unlock new possibilities in human-AI collaboration, mastering the art of crafting effective prompts becomes essential. Whether you’re a developer, content creator, or industry professional, understanding and harnessing the power of prompt engineering is a journey worth taking."
  },
  
  {
    "title": "What is Artificial Intelligence",
    "url": "/posts/what-is-artificial-intelligence/",
    "categories": "Artificial Intelligence (AI)",
    "tags": "AI",
    "date": "2023-01-04 12:00:10 +0545",
    





    
    "snippet": "AI, or Artificial Intelligence, refers to the development of computer systems that can perform tasks that typically require human intelligence. These tasks include learning, reasoning, problem-solv...",
    "content": "AI, or Artificial Intelligence, refers to the development of computer systems that can perform tasks that typically require human intelligence. These tasks include learning, reasoning, problem-solving, perception, natural language understanding, and even the ability to interact with the environment. The goal of AI is to create machines that can mimic cognitive functions associated with human minds.There are two main types of AI:Narrow or Weak AI:This type of AI is designed and trained for a particular task. It can excel at that specific task but lacks the broad cognitive abilities of a human. Examples include virtual personal assistants like Siri or Alexa.General or Strong AI:This hypothetical form of AI would have the ability to understand, learn, and apply knowledge across a wide range of tasks, similar to human intelligence. Strong AI remains a concept and has not been achieved as of my last knowledge update in January 2022.AI systems can be categorized into several subfields, including:Machine Learning (ML):A subset of AI that focuses on the development of algorithms that enable computers to learn from and make predictions or decisions based on data.Natural Language Processing (NLP):A field that involves the interaction between computers and human languages, enabling machines to understand, interpret, and generate human-like text.Computer Vision:The ability of computers to interpret visual information, enabling them to “see” and make decisions based on visual input.Robotics:The integration of AI and machines to create intelligent robots capable of performing tasks in the physical world.AI has a wide range of applications, including healthcare diagnostics, autonomous vehicles, recommendation systems, language translation, and many more. As technology continues to advance, AI is expected to play an increasingly significant role in various aspects of our lives. However, ethical considerations, transparency, and responsible development are crucial aspects to address as AI technologies progress."
  },
  
  {
    "title": "Ruby find_all vs. select",
    "url": "/posts/ruby-find-all-vs-select/",
    "categories": "Ruby, select vs. find_all",
    "tags": "ruby, find_all, select",
    "date": "2022-08-15 10:40:18 +0545",
    





    
    "snippet": "About find_all vs. select Ruby methodfind_all or select returns an array which contains all elements of enum for which the given block returns a true value, and, if no block is given, an Enumerator...",
    "content": "About find_all vs. select Ruby methodfind_all or select returns an array which contains all elements of enum for which the given block returns a true value, and, if no block is given, an Enumerator is returned.Here are some examples:arr = 1..8 h = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}arr.select{|x| x.even?} # =&gt; [2, 4, 6, 8]a.find_all{|x| x.even?} # =&gt; [2, 4, 6, 8]On hash select returns hash and find_all returns array.h.select { |k, v| v.even? }   # =&gt; {:b=&gt;2, :d=&gt;4, :f=&gt;6, :h=&gt;8}h.find_all { |k, v| v.even? } # =&gt; [[:b, 2], [:d, 4], [:f, 6], [:h, 8]]"
  },
  
  {
    "title": "Webpacker in Rails6",
    "url": "/posts/rails6-webpacker/",
    "categories": "Ruby on Rails, Webpacker",
    "tags": "ruby on rails, webpacker",
    "date": "2020-06-05 01:45:18 +0545",
    





    
    "snippet": "Webpacker  Webpacker is the JavaScript compiler which compiles the JavaScript code.  Prior to Rails6, JS code were inside app/assets/javascripts  In Rails6, no app/assets/javascripts and have new d...",
    "content": "Webpacker  Webpacker is the JavaScript compiler which compiles the JavaScript code.  Prior to Rails6, JS code were inside app/assets/javascripts  In Rails6, no app/assets/javascripts and have new dir app/javascript to load all the js files which has channels &amp; packs and all Javascript components like Turbolinks, ActiveStorage, Rails-UJS, ActionCable support Webpacker.  Other dir channels generated by Rails ActionCable component  Another dir packs which has app/packs/javascriptsapp/javascript/packs/application.jsrequire(\"@rails/ujs\").start()require(\"turbolinks\").start()require(\"@rails/activestorage\").start()require(\"channels\")  any js files inside packs/ will autocompiled by WebpackAbout Pack  Webpack uses webpacker gem which wraps webpack and used to compile the javascript code which are on the packs directory. This gem creates the application pack as application.js inside app/javascript/packs which is similar to assets pipeline (app/assets/javascripts/application.js) and application pack is the entry point for all the JavaScript code that contains Action Cable, Active Storage, Turbolinks Rails components.  gem webpacker is automatically placed inside the Gemfile of Rails6 application, and yarn is used to install npm packages when creating new Rails 6 application.Gem also generates settings:config/webpacker.yml  As like assets pipeline, JavaScript code using Webpacker and webpack automatically compiles in development mode when running rails server.  Gem also generates the file bin/webpack-dev-server which is used to live reloading the development phase. Inorder to see the live reloading in development mode we need to run the webpack-dev-server with command ./bin/webpack-dev-server separately.  However, in production mode, rake assets:precompile also override the rake webpacker:compile which will compile the assets pipleline and compile the files to be compiled by webpack which updates the package.json.Way to use the JavaScript code in the appwe can use the helper method javascript_pack_tag to include the webpacker packs file which is similar to asset pipeline javascript_link_tag and works on both development and production mode.# app/views/layouts/application.html.erb&lt;%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %&gt;  Prior to Rails 6 application do not install gem webpacker by default, include it in Gemfile, and run the command rake webpacker:install"
  },
  
  {
    "title": "Elastic Search with Chewy",
    "url": "/posts/elastic-search-with-chewy/",
    "categories": "Ruby on Rails, Elastic search Chewy",
    "tags": "elastic_search, chewy",
    "date": "2019-10-25 07:01:18 +0545",
    





    
    "snippet": "Chewy is one of the elastic search Ruby client.Chewy usages:      Multi-model indicesYou can define several types for index one per indexed model.        Every index is observable by all the relate...",
    "content": "Chewy is one of the elastic search Ruby client.Chewy usages:      Multi-model indicesYou can define several types for index one per indexed model.        Every index is observable by all the related models.Most of the indexed models are related to other and it is necessary to denormalize this related data and put at the same object. Chewy is useful for example when we need index for an array of tags together with an article since it specify updated index for every model seperately so corressponding articles will be reindexed on any tag update.        Bulk import everywhereIt supports bulk elastic search api for full reindex and index updates.        Powerful querying DSLChewy has an ActiveRecord style query DSL.        Support for ActiveRecord, Mongoid and Sequel.  Installation Steps:gem 'chewy'bundle installor gem install chewyClient settings:Chewy.settings hash and chewy.yml are two ways in which Chewy client can be configured.Run the command rails g chewy:install to generate the file or create one manually.# config/chewy.yml# separate environment configstest:  host: 'localhost:9250'  prefix: 'test'development:  host: 'localhost:9200'config/initializers/chewy.rbChewy.settings = {host: 'localhost:9250'} # do not use environmentsAws Elastic SearchConfiguration for using AWS’s elastic search using an IAM user policy, sign your requests for the es:* action by injecting the headers passing a proc to transport_options.Chewy.settings = {    host: 'http://my-es-instance-on-aws.us-east-1.es.amazonaws.com:80',    transport_options: {      headers: { content_type: 'application/json' },      proc: -&gt; (f) do          f.request :aws_signers_v4,                    service_name: 'es',                    region: 'us-east-1',                    credentials: Aws::Credentials.new(                      ENV['AWS_ACCESS_KEY'],                      ENV['AWS_SECRET_ACCESS_KEY'])      end    }  }Type accessFollowing API is used to access index-defined typesUsersIndex::UserUsersIndex.type_hash['user']UsersIndex.type('user')UsersIndex.type('foo')UsersIndex.types # [UserIndex::User]UsersIndex.type_names # [\"user\"] Index ManipulationUsersIndex.delete # destroy existed indexUsersIndex.delete!UsersIndex.create # create indexUsersIndex.create!UsersIndex.purgeUsersIndex.purge! # deletes then creates indexUsersIndex::User.import # import with 0 arguments process all the data specified in type definitionUsersIndex::User.import User.where('rating &gt; 100') # or import specified users scopeUsersIndex::User.import User.where('rating &gt; 100').to_a # or import specified users arrayUsersIndex::User.import [1, 2, 42] # pass even ids for import, it will be handled in the most effective wayUsersIndex::User.import user: User.where('rating &gt; 100')  # if update fields are specified - it will update their values only with the `update` bulk action.UsersIndex.reset! # purges index and imports default data for all typesPractical on Ruby on Rails applicationapp/chewy/user_index.rbclass UserIndex &lt; Chewy::Index    settings analysis: {      analyzer: {        email: {          tokenizer: 'keyword',          filter: ['lowercase']        }      }    }      define_type User do      field :name, {type: 'text'}      field :email, analyzer: 'email'      field :phone, {type: 'text'}    end  endapp/controllers/users_controller.rbclass UsersController &lt; ApplicationController    def search      @users = UsersIndex.query(query_string: { fields: [:name, :email, :phone], query: search_params[:query], default_operator: 'and' })        render json: @users.to_json, status: :ok    end      private      def search_params      params.permit(:query, :page, :per)    end  endapp/models/user.rbclass User &lt; ApplicationRecord    update_index('user') { self }    enum status: { unconfirmed: 0, confirmed: 1 }endroutes.rbresources :users do    get :search, on: :collectionendIf you access the url http://localhost:3000/users/search?query=test1Following results are seen on the browser0\tid\t\"18\"name\t\"test1\"status\t\"unconfirmed\"email\t\"test1@example.com\"phone\t\"090111111\"_score\t0.5389965_explanation\tnull1\tid\t\"3\"name\t\"test1\"status\t\"unconfirmed\"email\t\"test1@example.com\"phone\t\"090111112\"_score\t0.5389965_explanation\tnull2\tid\t\"45\"name\t\"test1\"email\t\"test1@example.com\"phone\t\"090111111\"_score\t0.5389965_explanation\tnulland if we inspect the result of @users object on controller.first on console, we will see@_data=  {\"_index\"=&gt;\"user\",   \"_type\"=&gt;\"user\",   \"_id\"=&gt;\"18\",   \"_score\"=&gt;0.5389965,   \"_source\"=&gt;{\"name\"=&gt;\"test1\", \"status\"=&gt;\"unconfirmed\", \"email\"=&gt;\"test1@example.com\", \"phone\"=&gt;\"090111111\"}}, @attributes=  {\"id\"=&gt;\"18\",   \"name\"=&gt;\"test1\",   \"status\"=&gt;\"unconfirmed\",   \"email\"=&gt;\"test1@example.com\",   \"phone\"=&gt;\"090111111\",   \"_score\"=&gt;0.5389965,   \"_explanation\"=&gt;nil}We can refactor the searching as:Create a dir called as app/searches/user_search.rb# user_search.rb# frozen_string_literal: trueclass UserSearch  include ActiveModel::Model  DEFAULT_PER_PAGE = 10  DEFAULT_PAGE = 0  attr_accessor :query, :page, :per  def search    [query_string].compact.reduce(&amp;:merge).page(page_num).per(per_page)  end  def query_string    index.query(query_string: { fields: [:name, :email, :phone], query: query, default_operator: 'and' }) if query.present?  end  private  def index    UsersIndex  end  def page_num    page || DEFAULT_PAGE  end  def per_page    per || DEFAULT_PER_PAGE  endendNow call the UserSearch class and implement it inside the UsersControllerclass UsersController &lt; ApplicationController  def search    user_search = UserSearch.new(search_params)    @users = user_search.search    render json: @users, status: :ok  end  private  def search_params    params.permit(:query, :page, :per)  endendNow modify the search action as:class UsersController &lt; ApplicationController  def search    user_search = UserSearch.new(search_params)    @users = user_search.search  end  private  def search_params    params.permit(:query, :page, :per)  endendsearch.html.erb&lt;% if @users.any? %&gt;    &lt;table border=\"1\"&gt;        &lt;tr&gt;            &lt;th&gt;Id&lt;/th&gt;            &lt;th&gt;Name&lt;/th&gt;            &lt;th&gt;Phone&lt;/th&gt;            &lt;th&gt;Email&lt;/th&gt;            &lt;th&gt;Status&lt;/th&gt;        &lt;/tr&gt;        &lt;% @users.each do |user| %&gt;        &lt;% res = user.attributes %&gt;        &lt;tr&gt;            &lt;td&gt;&lt;%= res[\"id\"] %&gt;&lt;/td&gt;            &lt;td&gt;&lt;%= res[\"name\"] %&gt;&lt;/td&gt;            &lt;td&gt;&lt;%= res[\"phone\"] %&gt;&lt;/td&gt;            &lt;td&gt;&lt;%= res[\"email\"] %&gt;&lt;/td&gt;            &lt;td&gt;&lt;%= res[\"status\"] %&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;% end %&gt;    &lt;/table&gt;&lt;% else %&gt;    &lt;p&gt;No users found.&lt;/p&gt;&lt;% end %&gt;"
  },
  
  {
    "title": "Elastic Search",
    "url": "/posts/elastic-search/",
    "categories": "Ruby on Rails, Elastic search",
    "tags": "elastic_search",
    "date": "2019-10-18 08:01:18 +0545",
    





    
    "snippet": "Introduction to Elastic SearchElastic Search is a full-text search engine which can be used as NoSQL database and can be used as analytics engine.It is schema-less, easy to scale, near real-time an...",
    "content": "Introduction to Elastic SearchElastic Search is a full-text search engine which can be used as NoSQL database and can be used as analytics engine.It is schema-less, easy to scale, near real-time and provides a restful interface for different operations.Elastic search is used as primary backend of your web application which can be added to an existing system which run through existing data source. Elastic search can be used to monitor and analysis of the existing application without affecting the behaviour of the current application.Various UseCases of Elastic Search are:  Web Application Search Solution  Data Visualization and Analytics  Log Management  Online Database Storage  Monitoring System  Autocomplete and instant searchElastic Search has following components:      ClusterA cluster is a collection of one or more server/nodes which holds your entire data together and provides indexing and search capabilities across all nodes. “elasticsearch” is unique default cluster.        NodeA node is a single server which is a part of a cluster which stores your data, participate’s in cluster’s indexing and search capabilities. A node is unique name and by default Universally Unique Identifier (UUID).        IndexAn index is a data structure which is a collection of documents having similar characteristics which is used to improve query execution time. Index are created for table primary keys, foreign keys, unique numbers, etc so that query executed 250 times faster than query without indexing.        TypeType is used to store various types of data in the same index, in order to keep the total number of indices. The _type field is added to every document which is used for filtering the data when searching with a specific type.        Document  Document is the row of record for the table or collection which is a single piece of information and it can be indexed.        Shard    The data is shared or divided into two or multiple nodes/machines/servers in the cluster when data grows really fast and run out of space which is called as shard.  Sharding is useful as it horizontally scale your content volume and it allows to distribute and parallelize operations across shards which increases the performance.  Installation of ElasticSearch on Ubuntu 18.04  You need to use sudo login      Install the deb package from the official Elasticsearch repository    Install apt-transport-https package that necessary to access a repository over HTTPs.$ sudo apt update$ sudo apt install apt-transport-https  Install OpenJDK 8sudo apt install openjdk-8-jdk  Verify the java installation$ java -version# this gives output as belowopenjdk version \"1.8.0_222\"OpenJDK Runtime Environment (build 1.8.0_222-8u222-b10-1ubuntu1~18.04.1-b10)OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)  Import repository’s GPG using the following wget commandwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -      The output of above command should be OK which means the key is imported successfully and packages from this repository will be considered trusted.        Add the Elasticsearch repository to the system by issuing:  sudo sh -c 'echo \"deb https://artifacts.elastic.co/packages/7.x/apt stable main\" &gt; /etc/apt/sources.list.d/elastic-7.x.list'  Now update apt package list and install Elasticsearch engine by following commands:sudo apt updatesudo apt install elasticsearch  Start the Elasticsearch processessudo systemctl enable elasticsearch.servicesudo systemctl start elasticsearch.service  Verify Elasticsearch is running by commandcurl -X GET \"localhost:9200/\"# it's output is as shown below{  \"name\" : \"crystal-Aspire-E5-575G\",  \"cluster_name\" : \"elasticsearch\",  \"cluster_uuid\" : \"9IFdxeCaRZmSj5c33WxEEg\",  \"version\" : {    \"number\" : \"7.4.0\",    \"build_flavor\" : \"default\",    \"build_type\" : \"deb\",    \"build_hash\" : \"22e1767283e61a198cb4db791ea66e3f11ab9910\",    \"build_date\" : \"2019-09-27T08:36:48.569419Z\",    \"build_snapshot\" : false,    \"lucene_version\" : \"8.2.0\",    \"minimum_wire_compatibility_version\" : \"6.8.0\",    \"minimum_index_compatibility_version\" : \"6.0.0-beta1\"  },  \"tagline\" : \"You Know, for Search\"}```Ruby* Log messages can be seen by using following commandsudo journalctl -u elasticsearch* Some useful directoriesdata storage - /var/lib/elasticsearchconfiguration file - /etc/elasticsearchJava startup options configuration - /etc/default/elasticsearch#### Remote Access SetupElasticsearch by default listen to localhost, so if database also in the same host, it is single node cluster and default configuration works.Anyone can access Elasticsearch by HTTP API as Elasticsearch lacks authentication. So you need to give access to Elasticsearch server to only trusted client which is done by configuring firewall (check firewall tool UFW on ubuntu) and give access to port 9200.First add a rule which allow incoming SSH```Rubysudo ufw allow 22Allow access from trusted clientsudo ufw allow from 192.168.1.65 to any port 9200# replace remote ip address with 192.168.1.65Enable UFWsudo ufw enableCheck firewall statussudo ufw status// o/p looks like thisStatus: activeTo                         Action      From--                         ------      ----22                         ALLOW       Anywhere9200                       ALLOW       192.168.1.6522 (v6)                    ALLOW       Anywhere (v6)  Next edit Elasticsearch configuration allow it to listen to external connectionssudo vim /etc/elasticsearch/elasticsearch.ymlUncomment line having network.host, change the value to 0.0.0.0. To make Elasticsearch listen on specified interface among multiple network interfaces on your machine you can specify interface IP address.Restart the Elasticsearch service and now connection to Elasticsearch server from remote is ready.sudo systemctl restart elasticsearch"
  },
  
  {
    "title": "Elastic Search with Searchkick",
    "url": "/posts/elastic-search-with-searchkick/",
    "categories": "Ruby on Rails, Elastic search Searchkick",
    "tags": "elastic_search, searchkick, ruby on rails",
    "date": "2019-10-18 08:01:18 +0545",
    





    
    "snippet": "What is Searchkick?Searchkick is a smart and intillegent search engine Rubygems that creates quicker search results based on user search activity.Before using Searchkick make sure Elasticsearch is ...",
    "content": "What is Searchkick?Searchkick is a smart and intillegent search engine Rubygems that creates quicker search results based on user search activity.Before using Searchkick make sure Elasticsearch is installed on your system.Steps to use Searchkick  Create a Rails applicationrails new institutions -d postgres  Generate the scaffold for Studentrails g scaffold Student name:string roll:integer grade:string fee:decimal      Run rake db:create rake db:migrate        Configure the routes  root \"students#index\"resources :students  Add following gem into Gemfilegem 'searchkick'Here is the Guide for Elasticsearch 6 or 7.  In each models you need to add keyword searchkick to make searchkick work as shown belowclass Student &lt; ApplicationRecord\tsearchkickend  Now add data to search index by using following code and you need to run this command everytime as model changesStudent.reindexThere are many ways search options based on necessity::word # default:word_start:word_middle:word_end:text_start:text_middle:text_endHere is an example of using :word_start for partial match criteriaclass Student &lt; ApplicationRecord  searchkick word_start: [:name, :role, :grade, :fee]  def search_data    {      name: name,      role: role,      grade: grade,      fee: fee    }  endendSearch EverythingStudent.search \"*\"Partial MatchesStudent.search \"Shiv Raj Badu\" # Shiv AND Raj AND BaduBook.search \"Shiv Raj Badu\", operator: \"or\"Exact MatchesStudent.search params[:search], fields:[{fee: :exact}, :name]Phrase MatchesStudent.search \"another name\", match: :phraseModel associationsStudent.search \"shiv raj\", track: {user_id: current_user.id}Autocomplete and Instant Searchclass Student &lt; ApplicationRecord  searchkick match: :word_start, searchable: [:name, :roll]endLanguage supported based on listsearchkick word_start: [:title, :author, :genre], language: \"turkish\"class StudentsController &lt; ApplicationController  before_action :set_student, only: [:show, :edit, :update]  def searchcriteria    render json: Student.search(params[:query], {      fields: [\"name\", \"roll\", \"grade\", \"fee\"],      limit: 10,      load: false,      misspellings: {below: 5}    }).map(&amp;:title)  endendImplement JavaScript searchbox as below&lt;input type=\"text\" id=\"query\" name=\"query\" /&gt;  $(\"#query\").typeahead({    name: \"student\",    remote: \"/students/search_criteria?query=%QUERY\"  });Suggestions generatorclass Student &lt; ApplicationRecord  searchkick suggest: [:name, :roll, :fee, :grade]endHighlight search result fields like this:class Student &lt; ApplicationRecord  searchkick highlight: [:name]endCreate custom and advanced mapping like this:class Student &lt; ApplicationRecord  searchkick mappings: {    student: {      properties: {        name: {type: \"string\", analyzer: \"keyword\"},        grade: {type: \"string\", analyzer: \"keyword\"}      }    }  }end"
  },
  
  {
    "title": "JQuery",
    "url": "/posts/jquery/",
    "categories": "JQuery, Cheatsheet",
    "tags": "jquery",
    "date": "2019-10-13 08:01:18 +0545",
    





    
    "snippet": "IntroductionjQuery is a JavaScript library created by John Resig in 2006 with an objectives Write less, do more. The main features of jQuery are event handling, Ajax interactions, animations, trave...",
    "content": "IntroductionjQuery is a JavaScript library created by John Resig in 2006 with an objectives Write less, do more. The main features of jQuery are event handling, Ajax interactions, animations, traversing, DOM manipulation, Cross Browser Support,  etc.jQuery Syntax$(selector).action()Here $ sign is used to define jQuery, a selector is used to find HTML DOM elements and an action is jQuery function to be performed on the HTML elements.`$(this).hide()` // To hide current element use`$(\"h1\").hide()` // To hide all h1 elements use`$(\"#myDiv\").hide()` // To hide element with id \"myDiv\" use`$(\".myDiv\").hide()` // To hide element with class \"myDiv\" usejQuery event should call inside $(document).ready() function in order to work on HTML page and script inside this function will exectuted before loaded the page contents and when DOM is loaded.$(document).ready(function() {   // The script written here will execute when DOM is ready});Example Usage&lt;html&gt;    &lt;head&gt;        &lt;title&gt;jQuery Example&lt;/title&gt;        &lt;script type = \"text/javascript\"          src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"&gt;        &lt;/script&gt;        &lt;script type=\"text/javascript\"&gt;            $(document).ready(function() {                $(\"#header\").click(function() {                    alert(\"jQuery triggered\");                });            });        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;      &lt;div id=\"header\"&gt;        Click Me      &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;Steps to install jQueryjQuery can be installed in two ways:  Download jQuery library in your system and include in HTML code.          Download latest version of jQuery into your project directory from https://jquery.com/download/        Here is the example code  &lt;html&gt;    &lt;head&gt;        &lt;title&gt;jQuery&lt;/title&gt;        &lt;script type=\"text/javascript\" src=\"/js/jquery-3.4.1.min.js\"&gt;&lt;/script&gt;        &lt;script type=\"text/javascript\"&gt;            $(document).ready(function() {                console.log(\"Hello jQuery\");                document.write(\"Hello jQuery\");            });        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;p&gt;jQuery&lt;/p&gt;    &lt;/body&gt;&lt;/html&gt;  Include jQuery library in your HTML code from Content Delivery Network (CDN).Here is the example code&lt;html&gt;    &lt;head&gt;        &lt;title&gt;jQuery&lt;/title&gt;        &lt;script type = \"text/javascript\"          src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"&gt;      &lt;/script&gt;        &lt;script type=\"text/javascript\"&gt;            $(document).ready(function() {                console.log(\"Hello jQuery\");                document.write(\"Hello jQuery\");            });        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;p&gt;jQuery&lt;/p&gt;    &lt;/body&gt;&lt;/html&gt;jQuery SelectorsjQuery Selectors are used to select HTML elements based on their name, id, classes, types, attributes, values to perform various tasks.jQuery selectors start with the factory function which starts with dollar sign followed by parentheses $() which is synonym of jQuery(). Sometime conflict occurs with $ sign when using other JavaScript library in that case use jQuery() instead of $() to avoid conflict.Here are few lists of jQuery selectors            Selector                  $(“*”) # Selects all element              $(this) # Selects current element              $(“#myDivId”) # Selects an element with an Id=”myDivId”              $(“#myDivClass”)  # Selects an element with class=”myDivId”              $(“p”) # Selects all paragraph element matched by &lt;p&gt;              $(“p &gt; *”) # Selects all elements that are children of paragraph element              $(“p.myDivClass”) # Select all paragraph elements having class=”myDivClass”              $(“p:first”) # Select first paragraph element              $(“ul li:first”) # Select first &lt;li&gt; element of the first &lt;ul&gt;              $(“ul li:first-child”) # Select first &lt;li&gt; element of every &lt;ul&gt;              $(“#myDiv p”) # Select &lt;p&gt; elements under div element with id=”myDiv”              $(“li &gt; ul”) # Select all &lt;ul&gt; elements which are children of &lt;li&gt; elements              $(“p a.myClass”) # Select all links or  elements having class=”myClass” which is children of &lt;p&gt; elements              $(“a#myId.myClass”) # Selects links with an id=”myId” and class=”myClass”              $(“li:not(.myclass”) # Selects all elements matched by &lt;li&gt; which do not have class=”myclass”              $(“[href]”) # Selects all elements with an href attribute              $(“a[target=’_blank’]”) # Selects all  elements with a target attribute value equal to “_blank”              $(“a[target!=’_blank’]”) # Selects all  elements with a target attribute value NOT equal to “_blank”              $(“:button”) # Selects all button elements and input elements of type=”button”              $(“tr:even”) # Selects all even &lt;tr&gt; elements              $(“tr:odd”) # Selects all odd &lt;tr&gt; elements              $(“strong + em”) # Selects all elements matched by  which is followed by               $(“p ~ ul”) # Selects all elements matched by &lt;ul&gt; which is followed by &lt;p&gt;              $(“code, em, strong”) # Selects all elements which is matched by  or  or               $(“p strong, .myDivClass”) # Select all strong elements which are followed by &lt;p&gt; and having class=”myDivClass”              $(“:empty”) # Select all elements having no children              $(“p:empty”) # Select all paragraph elements having no children              $(“div[p]”) # Select all elements having &lt;div&gt; which contains &lt;p&gt;              $(“p[.myDivClass]”) # Select all paragraph elements having class=”myDivClass”              $(“:radio”) # Selects all the radio buttons in the form              $(“:checked”) # Selects all the checkbox in the form              $(“:input”) # Selects input element of the form like: input, textarea, select, button, etc              $(“:text”) # Selects all input text elements              $(“p:lt(3)”) # Selects all first three elements              $(“p:gt(2)”) # Selects all paragraph elements excluding first two or after third one              $(“div/p”) # Selects all paragraph elements which are under div tag              $(“div//code”) # Selects all  elements which are descendants of &lt;div&gt;              $(“//p//a”) # Selects all links that are descendants of paragraph              $(“:parent”) # Selects all elements which are parent of another element, including text              $(“li:contains(second)”) # Selects all elements matched by &lt;li&gt; that contain the text second      jQuery attributesSome jQuery methods used to get or set the value of attributes, property, html, etc are postulated below:attr() - get or set the specified attribute of the target element.prop() - get or set the specified property of the target element.html() - get or set the html content to the specified target element.val() - get or set the value of the specified target element.text() - get or set the text for the specified target element.jQuery attributes are almost uses with properties like className, id, tagName, href, title, src, rel. HTML tags are the h1, h2, p, img, div, head, body, bold(b), anchor(a), form, hr, br, input, li, ul, ol, link, option, strong, small, table, td, tr, th, u, tt, center, etc.jQuery attr() methodsattr() is used to get value of attributes and attr(name, value) is used to set the attribute with new value which will apply to all elements.&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"&gt;        &lt;/script&gt;        &lt;script&gt;            $(document).ready(function () {                     alert($(\"div\").attr(\"style\")); // Select div tag and get the value of style attributes                $(\"p\").attr(\"class\", \"greenColorStyle\"); // all paragraph tag's class will update to greenColorStyle                var title = $(\"p\").attr(\"title\"); // get value of paragraph's attributes title                $(\"#progTitle\").text(title); // inspect div id progTitle and replace text defined by variable title            });        &lt;/script&gt;    &lt;style type=\"text/css\"&gt;        .greenColorStyle {        color: green;        }    &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;div style=\"color: red; \"&gt;This is a paragraph under div&lt;/div&gt;    &lt;p title=\"Programming Tutorials\"&gt;Get value of title attributes and replace div having id progTitle&lt;/p&gt;    &lt;div&gt;        &lt;p&gt;After page loads all paragraph should be in green color&lt;/p&gt;        &lt;p&gt;Another text&lt;/p&gt;    &lt;/div&gt;    &lt;div id=\"progTitle\"&gt;&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;addClass(className)addClass(className) is used to apply defined styles to selected elements.&lt;html&gt;    &lt;head&gt;        &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"&gt;        &lt;/script&gt;        &lt;script&gt;            $(document).ready(function () {                 $(\"#myDiv\").addClass(\"greenColorStyle\");            });        &lt;/script&gt;    &lt;style type=\"text/css\"&gt;        .greenColorStyle {        color: green;        }    &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;div id=\"myDiv\"&gt;This is a paragraph under div&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;Some more attr methods are:  removeAttr()  Removes an attribute of matched elements  removeClass(class)  Removes the class of matched elements  hasClass(class)   check if class present then returns true  toggleClass(class)  add the class if absent and remove the class if present  html()   Get the html contents of an element  html(val)   set the html content with value of element  text()   get the combined text contents of elements  text(val)   set the text content of element  val()   get input value of first matched element  val(val)   set the value attribute of every matched elementjQuery TraversingjQuery traversing is used to find html elements based on their relation to other elements.jQuery traversing means to move over elements to find a particular or entire element.Here are some list of jQuery traversing methods:  add()Collects one or more matched elements which are passed inside the method to create an object which can be manipulated at the same time.&lt;html&gt;&lt;head&gt;\t&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"&gt;\t&lt;/script&gt;\t&lt;script&gt;\t\t$(document).ready(function () {     \t\t  var jqObj = $('div').add('p').add('span').css( \"background\", \"yellow\" );\t\t  jqObj.addClass('greenColorStyle');\t\t});\t&lt;/script&gt;   &lt;style type=\"text/css\"&gt;  \t.greenColorStyle {      color: green;    }   &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=\"myDiv\" style=\"text-align: center; padding: 20px\"&gt;This is a paragraph under div&lt;/div&gt;  &lt;p&gt;Some more text&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;  addBack()adds the previous set of elements with current set and maintains them in a stack which can be manipulated.# add together paragraph tags with myDiv div tag and implement bgGreen color to both$(\"div.myDiv\").find(\"p\").addBack().addClass(\"bgGreen\");  not()get all elements which do not match specific selectorTree TraversingDescendants  childrenGet all the child elements of the selected element.$(selector).children();  find()Get all the specified child elements of each selected element.Ancestors  closestfind the first ancestor of the selected selector.$(selector).closest(selector or element);  parentget the parent element of specified selector$(selector).parent();  parentsget all ancestor elements of specified selector$(selector).parents();  parentsUntil()get all ancestor elements between specified selector and arguments.$(selector).parentsUntil(selector, element)  offsetParent()get the first parent element of specified selector.Siblings  siblingsget all siblings of the specified selector.$(selector).siblings()  next()get next sibling element of the specified selector.$(selector).next()  nextAll()get all next sibling elements of the specified selector.$(selector).nextAll()  nextUntil()get all next sibling between specified selector and arguments.$(selector).nextUntil()  prev()get the previous sibling element of the specified selector.$(selector).prev(selector)  prevAll()get all the previous siblings of specified selector.$(selector).prevAll(selector, filter_element)  prevUntil()get all the previous siblings between specified selector and arguments.$(selector).prevUntil(selector, filter_element)filtering  first()get the first element of the specified selector  last()get the last element of the specified selector  eq()get the element with specified index number of the specified selector.$(selector).eq(index)  filter()remove or get the element which are matched with specified selector$(selector).is(selector or function or elements)  has()get all elements which have one or more elements within and are matched with specified selector.$(selector).has(selector)  is()it checks if one of the specified selector is matched with arguments..is(selector or function or elements)  map()traverse arrays and objects and results a new arrayjQuery.map(array, function(val, i) {    // do stuff here});  slice(start, end)get the subset of specified selector based on it’s argument index or start and stop value.$(selector).slice(start, end)jQuery EffectsjQuery helps us to add various types of visual effects on our webpage.jQuery effects are listed below:            Display Effects      Sliding Effects      Fading Effects      Other Effects                  show()      slideUp()      fadeIn()      delay()              hide()      slideDown()      fadeOut()      animate()              toggle()      slideToggle()      fadeToggle()      fadeTo()                            fadeTo()             Here are the description of some jQuery effect methods:show()Display the selected elementsUsage:$(\"#btn-hide\").click(function() {    $(\"p\").hide()});$(\"#btn-show\").click(function() {    $(\"p\").show()});hide()Hide the selected elementstoggle()This function is used to show to hide (toggle) the matched elementsUsage:    $(btn-toggle).click(function() {        $(\"p\").toggle()    })slideUp()This function is used to display the slideup effects which first hide the element and then show the element with sliding effects once it is completed execute the callback function, thus this function is used to slide up an element.Syntax$(selector).slideUp(speed,callback);  speed - valid speed values are slow, normal, fast  callback - which is optional parameter and this function is called once the animation is completed.Usage$(\"#btnUp\").click(function(){    $(\".target\").slideUp('slow', function(){         $(\"#div-id\").text('Slide Up Effect');    });});slideDown()This function is used to slide down the element.Syntax$(selector).slideDown(speed,callback);Usage$(\"#btnDown\").click(function(){    $(\".target\").slideDown( 'slow', function(){         $(\"#div2-id\").text('Slide Down Effect');    });});slideToggle()slideToggle() method is used to toggle between slideUp() and slideDown() which means if the element if slide down this function helps them slide up and vice versa.Syntax:$(selector).slideToggle(speed,callback);fadeIn()This function is used to show fades in effect from the hidden element to make it visible.$(selector).fadeIn(speed,easing,callback)  speed - valid speed values are slow, normal, fast  callback - which is optional parameter and this function is called once the animation is completed.  easing - This is optional. This feature shows the effect in various speed in various dimension. Various options are:          swing - moves faster in the middle dimension and slower at the start or end.      linear - moves in constant speed.      fadeOut()This function is used to show fades out effect from the visible element to make it hidden.$(selector).fadeOut(speed,easing,callback)fadeToggle()This method is used to toggle between fadeIn() and fadeOut() which will fades in the element if it is fades out and vice versa.Syntax$(selector).fadeOut(speed,easing,callback)fadeTo()This method is used to show the fading effect of an element partially in or out to make it transparent.Syntax$(selector).fadeTo(speed,opacity,callback);      speed - valid speed values are slow, fast, or milliseconds        opacity - The values of opacity are between 0 and 10 - fully transparent (hidden)1- fully opaque (shown)        callback - which is optional parameter and this function is called once the animation is completed.  delay()The delay() is an inbuilt method in jQuery which is used to set a timer to delay the execution of the next item in the queue.Syntax$(selector).delay(speed,queueName)The paremeters used are explained here:  speed - The values are milliseconds, “slow”, “fast”  queueName - The default value if “fx” and you can set the queue name here and is the optional parameter.Usage$(\"#mybtn\").click(function() {    $(\"#slow-delay-div\").delay(\"slow\").fadeIn();    $(\"#fast-delay-div\").delay(\"fast\").fadeIn();    $(\"#ms-div\").delay(1000).fadeIn();});animate()This method is used to create custom animations which gives special effects using style properties of the element.Specify the selector to get the reference of an element and call animate() to apply animation, this animate() function takes json object for style properties, speed of animation, and other options.Syntax$(selector).animate({ params },speed, callback);$(selector).animate({ stylePropertyName: 'value', duration, easing, callback }, { options })Usage&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;\t&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"&gt;    &lt;/script&gt;    &lt;script&gt;        $(document).ready(function () {\t\t\t$('#animateEx').animate({                        height: '50px',                        width: '50px'                    });\t\t\t});    &lt;/script&gt;\t&lt;style&gt;        .green {            background-color: green;            height: 350px;            width: 350px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;\t&lt;h1&gt;Here is an example of jQuery animate()&lt;/h1&gt;\t&lt;div id=\"animateEx\" class=\"green\"&gt;\t&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
  },
  
  {
    "title": "Metaprogramming in Ruby",
    "url": "/posts/metaprogramming-in-ruby/",
    "categories": "Ruby, Metaprogramming",
    "tags": "ruby, metaprogramming",
    "date": "2019-09-02 09:23:58 +0545",
    





    
    "snippet": "Metaprogramming in RubyMetaprogramming is a programming concept which treats other programs as their data and computer programs are written in such a way that is executed at runtime instead of comp...",
    "content": "Metaprogramming in RubyMetaprogramming is a programming concept which treats other programs as their data and computer programs are written in such a way that is executed at runtime instead of compile time.It helps in reducing development time by minimizing the lines of codes, also efficiently manages the programs with new solutions without recompilation.Metaprogramming includes :  compile code generation or Runtime code generation (or both)  Aspect-Oriented Thinking or Aspect Oriented Programming  DRY ThinkingIt is advisable to mastering Metaprogramming before using it as it is very powerful.ExamplesMake a getter methods which return instance variables if they are not nil, if they are nil set it to some default value and return it.class Foo    def foo        @foo ||= 0    endendSuppose if you have multiple such getters then instead of writing them all we can use metaprogramming like this:class Foo    {foo: 0, bar: '', baz: []}.each do |method_name, default_value|        define_method method_name do            instance_var = :\"@#{method_name}\"            instance_variable_get(instance_var) ||            instance_variable_set(instance_var, default_value)        end    endendmodule GettersWithDefault    def getters_with_default(spec)        spec.each do |method_name, default_value|            define_method method_name do                instance_var = :\"@#{method_name}\"                instance_variable_get(instance_var) ||                instance_variable_set(instance_var, default_val)            end        end    endendclass Foo    include GettersWithDefault    getters_with_default foo: 0, bar: '', baz: {}endA common example of Metaprogrammingclass Post    def initialize(status)        @status = status    end    %w(published unpublished draft).each do |possible_status|        define_method(\"#{possible_status}?\") do            @status == possible_status        end    endendIt seems like it saves time, because we don’t need to write separate methods for published?, unpublished?, and draft?. However, there are tradeoffs. For example, metaprogramming like this makes searching for method definitions later difficult. It’s certainly faster to type, but it’s harder to find and read later. Since we spend so much more time reading code than writing it, code that’s easier to write than read is actually a bad tradeoff.Domain Specific LanguageA Domain Specific Language or DSL is a custom language that solves a specific domain or problem. In Ruby’s case, a DSL is written in Ruby but looks different from standard Ruby code. Some examples of Ruby DSL are Rails Routes, Rspec, Factory Girl, etc. Factory Girl has cmplicated internal code but it allows you to write expressive, declarative code.FactoryGirl.define do    sequence :github_username do |n|        \"github_#{n}\"    end    factory :user do        description \"Learn all about Git\"        github_username        trait :admin do            admin true        end    endendDSL Structuredescribe \"User\" do  # ...endFactoryGirl.define do    # ...endRails.application.routes.draw do  # ...endBe carefulIf there is a less-complicated solution to a problem, reach for that first. Metaprogramming is usually not a good first solution to a problem, and DSLs require a good understanding of the problem’s domain. Once you do understand the problem well, though, DSLs are a great option.Talk about MonkeypatchingCode Discoverty and ReadabilityOne problem with metaprogramming solutions are their obstruction of code discovery. When entering a new project or simply trying to re-familiarize onself with existing one, tracing code executiion in a text editor can be quite difficult if method definitions do not exist.For example we can assume that a User class exists with a set of metaprogrammed methods:class User    [        :password,        :email,        :first_name,        :last_name    ].each do |attribute|        define_method(:\"has_#{attribute}?\") do            self.send(attribute).nil?        end    endendAlthough a little contrived, this code is a list of simple convenience methods on a User class. This solution is easily extended to include additional attributes without a full method definition per attribute.However, these methods can not be found using grep, silver searcher, or other “find all” tools. Since the method has_password? is never explicitly defined in the code, it is not discoverable.A Work Around:To combat this issue, some developers choose to write a comment listing the defined method names above metaprogramming block. This simple solution can greatly help the readability of the code.class User    # has_password?, has_email?, has_first_name?, has_last_name? method definitions    [        :password,        :email,        :first_name,        :last_name    ].each do |attribute|        define_method(:\"has_#{attribute}?\") do            self.send(attribute).nil?        end    endendPerformanceDepending on the amount of times a piece of code is executed, performance considerations can be extremely important. “Hot code” is a term used to describe code that is called frequently during an application’s request cycle. Since not all code is created equally, understanding the performance implications of different metaprogramming approaches is imperative when writing or modifying hot code."
  },
  
  {
    "title": "How to create Rails application with MongoDB?",
    "url": "/posts/Rails-app-with-MongoDB/",
    "categories": "MongoDB, Ruby on Rails",
    "tags": "mongodb, rails_setup",
    "date": "2019-08-30 09:23:58 +0545",
    





    
    "snippet": "Setup Rails 5 with mongoid gemAt first we need to install MongoDB in our system, the steps to install MongoDB is descripted in my previous blog. Confirm mongoDB is installed by browsing http://loca...",
    "content": "Setup Rails 5 with mongoid gemAt first we need to install MongoDB in our system, the steps to install MongoDB is descripted in my previous blog. Confirm mongoDB is installed by browsing http://localhost:27017/ and you will get following message:It looks like you are trying to access MongoDB over HTTP on the native driver port.Create a Rails application with the keyword “–skip-active-record” so that ActiveRecord is not included in the generated app.rails new myapp --skip-active-recordEdit your GemfileRemove this Gem if existsgem 'sqlite3'And add following Gems:gem 'mongoid', '~&gt; 6.2.0'gem 'bson_ext'Generate configuration file to support MongoDB which generates config/mongoid.ymlrails g mongoid:configThere is a file called /config/mongoid.yml’ which contains database configuration and it is required.The Rails generators for ‘model’, ‘scaffold’ etc have been overridden by Mongoid. Any models, scaffolds etc that you create will create classes that include the Mongoid::Document module instead of inheriting from ApplicationRecord in the models folder.Associationrails generate scaffold article title:stringrails generate scaffold comment body:string article_id:string # Here article_id required when implementing has_many association but not required in case of embedds many and even records are not saved inside Comment document which is included inside Article document.Association embeds_many with embedded_inclass Article  include Mongoid::Document  field :title, type: String  embeds_many :commentsendclass Comment  include Mongoid::Document  field :title, type: String  field :article_id, type: String  embedded_in :articleendarticle = Article.new(title: \"Embeds Many association on MongoDB\")article.comments.build(title: 'Embeds Many association will connect child records inside parent record')# if you check the mongo console `db.articles.find()` you will notice Comments records are also included inside the Article record and no seperate comment document is created inside comment collection.{ \"_id\" : ObjectId(\"5d6f75b567ef9b0d9e8373b4\"), \"title\" : \"Embeds Many association on MongoDB\", \"comments\" : [ { \"_id\" : ObjectId(\"5d6f75bd67ef9b0d9e8373b5\") }, { \"_id\" : ObjectId(\"5d6f75ef67ef9b0d9e8373b6\"), \"title\" : \"Embeds Many association will connect child records inside parent record\" } ] }Association has_many with belongs_toclass Article  include Mongoid::Document  field :title, type: String  has_many :commentsendclass Comment  include Mongoid::Document  field :title, type: String  field :article_id, type: String  belongs_to :articleend`db.articles.find()`{ \"_id\" : ObjectId(\"5d6f6a8067ef9b06fed2c32e\"), \"title\" : \"first article\" }`db.comments.find()`{ \"_id\" : ObjectId(\"5d6f6e2567ef9b0c888373b1\"), \"title\" : \"comment title\", \"article_id\" : ObjectId(\"5d6f6a8067ef9b06fed2c32e\") }In this senario, the records are saved inside two independed mongoDB collection Articles and Comments. And inside Comment Document we will have article_id whose value is the corressponding Article Id. But in embeds_many technique the child records do not save inside the Comment collection but inside Article Collection included inside Article document."
  },
  
  {
    "title": "Notes on MongoDB",
    "url": "/posts/MongoDB-notes/",
    "categories": "MongoDB, Data Operation",
    "tags": "mongodb, data_operation",
    "date": "2019-08-30 09:23:58 +0545",
    





    
    "snippet": "Introduction to MongoDBMongoDB is a open source document-oriented NoSQL database used for high volume data storage. If database is not already created switch to the database and insert data into it...",
    "content": "Introduction to MongoDBMongoDB is a open source document-oriented NoSQL database used for high volume data storage. If database is not already created switch to the database and insert data into it, this way database is created.Each record in a MongoDB collection is a document. MongoDB collections are like table and documents are like rows of the relational databases.Create Databaseuse NewDatabase # switched to db NewDatabasedb.products.insert({name: 'product', price: 20}) # Create a collection name as products with new document as a recordView database and collections&gt; show dbs;adminconfiglocalNewDatabase&gt; use NewDatabaseswitched to db NewDatabase&gt; show collectionsproductsDelete Database&gt; db.dropDatabase(){ \"dropped\" : \"NewDatabase\", \"ok\" : 1 }Crud operationsInsert a Single Documentdb.collection.insertOne() inserts a single document into a collection.MongoDB adds the _id field with an ObjectId value to the new document.db.customers.insertOne(    {        profile_name: 'customer name',        email: 'email@example.com',        age: 32,        tags: [\"regular\"],        full_name: { first_name: 'firstname', mid_name: 'midname', last_name: 'last_name' }    })when you run the above command, you will get following output{\t\"acknowledged\" : true,\t\"insertedId\" : ObjectId(\"5d6ccbfda82b6d69714cebeb\")}Insert multiple documentsdb.collection.insertMany()db.customers.insertMany(    [        {          profile_name: 'customer name 2',          email: 'email10@example.com',          age: 22,          tags: [\"regular\"],          full_name: { first_name: 'firstname2', mid_name: 'midname2', last_name: 'last_name2' }        },        {          profile_name: 'customer name 3',          email: 'email11@example.com',          age: 22,          tags: [\"regular\"],          full_name: { first_name: 'firstname3', mid_name: 'midname3', last_name: 'last_name3' }        },        {          profile_name: 'customer name 4',          email: 'email12@example.com',          age: 22,          tags: [\"regular\"],          full_name: { first_name: 'firstname4', mid_name: 'midname4', last_name: 'last_name4' }        }    ])=&gt; output when executing above query{\t\"acknowledged\" : true,\t\"insertedIds\" : [\t\tObjectId(\"5d6ccdf9a82b6d69714cebec\"),\t\tObjectId(\"5d6ccdf9a82b6d69714cebed\"),\t\tObjectId(\"5d6ccdf9a82b6d69714cebee\")\t]}View Record&gt; db.customers.find({profile_name: 'customer name'}){ \"_id\" : ObjectId(\"5d6ccbfda82b6d69714cebeb\"), \"profile_name\" : \"customer name\", \"email\" : \"email@example.com\", \"age\" : 32, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname\", \"mid_name\" : \"midname\", \"last_name\" : \"last_name\" } }multiple matched records&gt; db.customers.find({age: 22}){ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebee\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email4@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559364\"), \"profile_name\" : \"customer name 2\", \"email\" : \"email10@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559365\"), \"profile_name\" : \"customer name 3\", \"email\" : \"email11@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname3\", \"mid_name\" : \"midname3\", \"last_name\" : \"last_name3\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559366\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email12@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }  db.customers.find({profile_name: “customer name 4”})  { \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebee\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email4@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559366\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email12@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }    db.customers.find({profile_name: “customer name 4”, “email”: “email4@example.com”})  { \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebee\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email4@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }    db.customers.find({profile_name: “customer name 4”}).limit(1)  { \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebee\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email4@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }  Show all records  db.customers.find()  { \"_id\" : ObjectId(\"5d6ccbfda82b6d69714cebeb\"), \"profile_name\" : \"customer name\", \"email\" : \"email@example.com\", \"age\" : 32, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname\", \"mid_name\" : \"midname\", \"last_name\" : \"last_name\" } }{ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebec\"), \"profile_name\" : \"customer name 2\", \"email\" : \"email2@example.com\", \"age\" : 30, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2\" } }{ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebed\"), \"profile_name\" : \"customer name 3\", \"email\" : \"email3@example.com\", \"age\" : 36, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname3\", \"mid_name\" : \"midname3\", \"last_name\" : \"last_name3\" } }{ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebee\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email4@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559364\"), \"profile_name\" : \"customer name 2\", \"email\" : \"email10@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559365\"), \"profile_name\" : \"customer name 3\", \"email\" : \"email11@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname3\", \"mid_name\" : \"midname3\", \"last_name\" : \"last_name3\" } }{ \"_id\" : ObjectId(\"5d6cd0eb68f1285dc9559366\"), \"profile_name\" : \"customer name 4\", \"email\" : \"email12@example.com\", \"age\" : 22, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname4\", \"mid_name\" : \"midname4\", \"last_name\" : \"last_name4\" } }  Upsert Option (updateOne(), updateMany(), replaceOne())Replace a record except an ID fielddb.customers.replaceOne({email: 'email@example.com'}, {\"profile_name\" : \"customer name\", \"email\" : \"email@example.com\", \"age\" : 15, \"tags\" : [ \"nonregular\" ], \"full_name\" : { \"first_name\" : \"firstname\", \"mid_name\" : \"midname\", \"last_name\" : \"last_name\" }}){ \"acknowledged\" : true, \"matchedCount\" : 1, \"modifiedCount\" : 1 }When you search the record which is just updated, you will notice update has been made:db.customers.find({email: 'email@example.com'}){ \"_id\" : ObjectId(\"5d6ccbfda82b6d69714cebeb\"), \"profile_name\" : \"customer name\", \"email\" : \"email@example.com\", \"age\" : 15, \"tags\" : [ \"nonregular\" ], \"full_name\" : { \"first_name\" : \"firstname\", \"mid_name\" : \"midname\", \"last_name\" : \"last_name\" } }Update a record execpt an ID fieldFirst track the record you want to update&gt; db.customers.find({email: 'email2@example.com'}){ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebec\"), \"profile_name\" : \"customer name 2\", \"email\" : \"email2@example.com\", \"age\" : 30, \"tags\" : [ \"regular\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2\" } }&gt;Apply Update command&gt; db.customers.updateOne({email: 'email2@example.com'}, {$set: {\"profile_name\": 'customer name 2 updated', \"full_name.last_name\": \"last_name2 updated\", tags: [\"regular updated\"]}}){ \"acknowledged\" : true, \"matchedCount\" : 1, \"modifiedCount\" : 1 }Now check the record and you will notice the record is updated&gt; db.customers.find({email: 'email2@example.com'}){ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebec\"), \"profile_name\" : \"customer name 2 updated\", \"email\" : \"email2@example.com\", \"age\" : 30, \"tags\" : [ \"regular updated\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2 updated\" } }Add lastModified field when you update the record which will add new column&gt; db.customers.updateOne({email: 'email2@example.com'}, {$set: {\"profile_name\": 'customer name 2 updated', \"full_name.last_name\": \"last_name2 updated\", tags: [\"regular updated\"]}, $currentDate: { lastModified: true }}){ \"_id\" : ObjectId(\"5d6ccdf9a82b6d69714cebec\"), \"profile_name\" : \"customer name 2 updated\", \"email\" : \"email2@example.com\", \"age\" : 30, \"tags\" : [ \"regular updated\" ], \"full_name\" : { \"first_name\" : \"firstname2\", \"mid_name\" : \"midname2\", \"last_name\" : \"last_name2 updated\" }, \"lastModified\" : ISODate(\"2019-09-02T08:55:35.114Z\") }``1The update action involves following operations:uses the $set operator to update the value of the size.uom field to \"cm\" and the value of the status field to \"P\",uses the $currentDate operator to update the value of the lastModified field to the current date. If lastModified field does not exist, $currentDate will create the field. See $currentDate for details.#### UpdateManyUpdate all the documents where age is greater than 22db.customers.updateMany(    {        “age”: { $gt: 22 }    },    {        $set: { “tags”: “Multiple Update”, active: “true” },        $currentDate: { lastModified: true }    })&gt;&gt; { \"acknowledged\" : true, \"matchedCount\" : 2, \"modifiedCount\" : 2 }Now it's time to check updated record:  db.customers.find({“age”: {$gt: 22}}){ “_id” : ObjectId(“5d6ccdf9a82b6d69714cebec”), “profile_name” : “customer name 2 updated”, “email” : “email2@example.com”, “age” : 30, “tags” : “Multiple Update”, “full_name” : { “first_name” : “firstname2”, “mid_name” : “midname2”, “last_name” : “last_name2 updated” }, “lastModified” : ISODate(“2019-09-02T12:56:37.700Z”), “active” : “true” }{ “_id” : ObjectId(“5d6ccdf9a82b6d69714cebed”), “profile_name” : “customer name 3”, “email” : “email3@example.com”, “age” : 36, “tags” : “Multiple Update”, “full_name” : { “first_name” : “firstname3”, “mid_name” : “midname3”, “last_name” : “last_name3” }, “active” : “true”, “lastModified” : ISODate(“2019-09-02T12:56:37.700Z”) }```Some other options:db.collection.findOneAndReplace().db.collection.findOneAndUpdate().db.collection.findAndModify().db.collection.save().db.collection.bulkWrite()Delete document (deleteOne(), deleteMany())Delete only one record no matter multiple records for this profile name exists&gt; db.customers.deleteOne({profile_name: 'profile name'})o/p =&gt; { \"acknowledged\" : true, \"deletedCount\" : 1 }Delete many records at once&gt; db.customers.deleteMany({profile_name: 'profile name 1'})o/p =&gt; { \"acknowledged\" : true, \"deletedCount\" : 4 }Bulk Write with bulkWrite()try {    db.customers.bulkWrite([        { insertOne: { \"document\": {                        profile_name: 'foo bar',                        email: 'foo@shivrajbadu.com.np',                        age: 29,                        tags: [\"regular\"],                        full_name: { first_name: 'shiv', mid_name: 'raj', last_name: 'badu' }                    }                }            },            { insertOne: { \"document\": {                    profile_name: 'foo baz',                    email: 'baz@shivrajbadu.com.np',                    age: 25,                    tags: [\"regular\"],                    full_name: { first_name: 'foo', mid_name: 'bar', last_name: 'baz' }                    }                }            },            { updateOne: {                    \"filter\" : { email: 'email10@example.com' },                    \"update\" : { $set: {\"profile_name\": 'new name', tags: [\"irregular\"], \"full_name.first_name\": \"fn\", \"full_name.mid_name\": \"mn\", \"full_name.last_name\": \"ln\" } }                }            },            { deleteOne: {                    \"filter\": { profile_name: 'customer name' }                }            },            { replaceOne: {                 \"filter\": { email: 'email@example.com' },                \"replacement\": { \"profile_name\": 'profile name', \"email\": 'email@example.com', \"age\": 14, \"tags\": [\"irregular\"], \"full_name\": { \"first_name\": \"fn\", \"last_name\": \"ln\", \"mid_name\": \"mn\" }  }             } }        ]);} catch (e) {    print(e);}Text SearchTo perform text search use text index and $text operator, text indexes can include any field whose value is a string or an array of string elements. To perform text search queries, you must have a text index on your collection. A collection can only have one text search index, but that index can conver multiple fields.If index is not found you will get following error message:Error: error: {\t\"ok\" : 0,\t\"errmsg\" : \"text index required for $text query\",\t\"code\" : 27,\t\"codeName\" : \"IndexNotFound\"}So, you need to create Index firstdb.customers.createIndex({    profile_name: \"text\",    email: \"text\"})db.customers.find({    $text: {        $search: \"myemail@shivrajbadu.com.np\"    }})db.customers.aggregate(    [        { $match: { $text: { $search: \"first name\" } } }    ])To get exact match result of searched textdb.customers.aggregate(    [        { $match: { $text: { $search: \"\\\"customer name replaced\\\"\" } } }    ])Referencesuser document             contact document                            articles document-------------             -----------------                          -----------------{                         {                                            {    _id: &lt;ObjectId1&gt;,        _id: &lt;ObjectId2&gt;,                            _id: &lt;ObjectId3&gt;,    username: 'xyz'           user_id: &lt;ObjectId1&gt;,                       user_id: &lt;ObjectId1&gt;,}                             phone: '9852525252',                        title: 'first article',                              email: 'contact@shivrajbadu.com.np'         body: 'article body'                          }                                            }One-to-One Relationships with Embedded DocumentsContact document contains a reference to the User document.User Document{    _id: \"unique_id\",    username: 'uniquename'}Contact Document{    _id: “ObjectId(“5d6df862e1b6226e35c6c519”)”,    _user_id: “unique_id”,    phone: “8585858585”,    email: “contact@shivrajbadu.com.np”}### One-to-Many Relationships with Embedded DocumentsIn the normalized data model, the articles documents contain a reference to the user document.User Document{    _id: “unique_id”,    username: ‘uniquename’}Article Document{    _id: \"ObjectId(\"5d6df9b5e1b6226e35c6c522\")\",    _user_id: \"unique_id\",    title: \"This is a title.\",    body: \"This is a description.\"}{    _id: \"ObjectId(\"9e7df9b5e1b6226e35c6c435\")\",    _user_id: \"unique_id\",    title: \"This is another title.\",    body: \"This is description for another title.\"}When implement one to many relationships, many child records will have many child document records so multiple queries need to be issued to resolve the references, we can also use another solution to make single query as shown below:{    _id: \"unique_id\",    username: 'uniquename',    articles: [        {            _id: \"ObjectId(\"5d6df9b5e1b6226e35c6c522\")\",            _user_id: \"unique_id\",            title: \"This is a title.\",            body: \"This is a description.\"        },        {            _id: \"ObjectId(\"9e7df9b5e1b6226e35c6c435\")\",            _user_id: \"unique_id\",            title: \"This is another title.\",            body: \"This is description for another title.\"        }    ]}"
  },
  
  {
    "title": "How to install MongoDB on Ubuntu 18.04?",
    "url": "/posts/MongoDB-installation/",
    "categories": "MongoDB, Installation",
    "tags": "mongodb, installation",
    "date": "2019-08-29 09:23:58 +0545",
    





    
    "snippet": "Install MongoDB Community Edition on Unbuntu 18.04 (Bionic)Import the MongoDB public GPG Key from https://www.mongodb.org/static/pgp/server-4.2.ascwget -qO - https://www.mongodb.org/static/pgp/serv...",
    "content": "Install MongoDB Community Edition on Unbuntu 18.04 (Bionic)Import the MongoDB public GPG Key from https://www.mongodb.org/static/pgp/server-4.2.ascwget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -Create the list file /etc/apt/sources.list.d/mongodb-org-4.2.list for your ubuntu versionecho \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.listReload local package databasesudo apt-get updateInstall MongoDB packagessudo apt-get install -y mongodb-orgOptional. Although you can specify any available version of MongoDB, apt-get will upgrade the packages when a newer version becomes available. To prevent unintended upgrades, you can pin the package at the currently installed version:echo \"mongodb-org hold\" | sudo dpkg --set-selectionsecho \"mongodb-org-server hold\" | sudo dpkg --set-selectionsecho \"mongodb-org-shell hold\" | sudo dpkg --set-selectionsecho \"mongodb-org-mongos hold\" | sudo dpkg --set-selectionsecho \"mongodb-org-tools hold\" | sudo dpkg --set-selectionsDirectories are at/var/lib/mongodb/var/log/mongodbConfiguration files are at/etc/mongod.confStart MongoDBsudo service mongod startTo verify MongoDB is started successfully, check the following content on /var/log/mongodb/mongod.log[initandlisten] waiting for connections on port 27017Processsudo service mongod stopsudo service mongod restartUse MongoDB using command shellmongoUninstall MongoDB stepssudo service mongod stopsudo apt-get purge mongodb-org* # remove mongoDB packages# remove data directoriessudo rm -r /var/log/mongodb sudo rm -r /var/lib/mongodb"
  },
  
  {
    "title": "Polymorphism in Ruby",
    "url": "/posts/polymorphism-in-ruby/",
    "categories": "Ruby, Polymorphism",
    "tags": "ruby, polymorphism",
    "date": "2019-08-28 09:23:58 +0545",
    





    
    "snippet": "Polymorphism in RubyThe term polymorphism means having many forms. In Ruby, polymorphism is carried out by using Inheritance. Polymorphism is achieved by using method overriding.class Animal    def...",
    "content": "Polymorphism in RubyThe term polymorphism means having many forms. In Ruby, polymorphism is carried out by using Inheritance. Polymorphism is achieved by using method overriding.class Animal    def eat # this method will overrides on other inherited classes        puts \"Animal eats grasses, water, milk, etc\"    endendclass Cat &lt; Animal    def eat        puts \"Cat eats milk &amp; water\"    endendclass Cow &lt; Animal    def eat        puts \"Cow eats grasses &amp; water\"    endendanimal = Animal.newanimal.eat=&gt; Animal eats grasses, water, milk, etcanimal = Cat.newanimal.eat=&gt; Cat eats milk &amp; wateranimal = Cow.newanimal.eat=&gt; Cow eats grasses &amp; water"
  },
  
  {
    "title": "Inheritance in Ruby",
    "url": "/posts/inheritance-in-ruby/",
    "categories": "Ruby, Inheritance",
    "tags": "ruby, inheritance",
    "date": "2019-08-28 09:23:58 +0545",
    





    
    "snippet": "Inheritance in RubyInheritance is the feature of OOP in which characteristics &amp; behaviours of one class inherits into another class. The class which is inheriting behaviour is called subclass a...",
    "content": "Inheritance in RubyInheritance is the feature of OOP in which characteristics &amp; behaviours of one class inherits into another class. The class which is inheriting behaviour is called subclass and class it inherits from is called superclass. Inheritance can also be used to remove duplication in your code and helps to achieve DRY “Don’t Repeat Yourself” principle.Class Inheritanceclass Animal    def eat # this method will overrides on other inherited classes        puts \"Animal eats grasses, water, etc\"    endendclass Cat &lt; Animalendclass Cow &lt; AnimalendHere Animal is the superclass and Cat, Cow is the subclass.cat = Cat.newcow = Cow.newcat.eat # =&gt; Animal eats grasses, water, etccow.eat # =&gt; Animal eats grasses, water, etcMethod overridingclass Animal    def eat        puts 'Animal eats grasses, water, etc'    endendclass Cat &lt; Animal    attr_accessor :food_name    def initialize(food_name)        @food_name = food_name    end    def eat        puts \"Cat eats #{food_name}\"    endendclass Dog &lt; Animalendcat = Cat.new(\"Milk and water\")cat.eat# =&gt; Milk and waterdog = Dog.newdog.eat# =&gt; Animal eats grasses, water, etcsupersuper is the inbuilt function of Ruby, which is used to call the methods up the inheritance hierarchy.class Animal  def eat    \"Animal\"  endendclass Cat &lt; Animal  def eat    super + \" - cat - eats milk and water.\"  endendcat = Cat.newcat.eat        # =&gt; \"Animal - cat - eats milk and water.\"Module Mixins in RubyModules are a way of grouping together methods, classes, and constants. Modules provide a namespace and prevent name clashes, and it implement the mixin facility. Mixins is like multiple inheritence.module ModuleName    def module_method        puts \"I am a module method\"    endendclass ClassName    include ModuleNameendobj = ClassName.newobj.module_method# =&gt; I am a module method"
  },
  
  {
    "title": "Features and functions of Active Record Model",
    "url": "/posts/ruby-on-rails-active-record-models-notes/",
    "categories": "Ruby on Rails, Active Record cheatsheet",
    "tags": "ruby on rails, active_record",
    "date": "2019-08-27 07:12:58 +0545",
    





    
    "snippet": "Notes on various features and functions of Active Record ModelQuery Methodsobj = User  .where(email: 'info@mydomain.np')  .where('id = 2')  .where('id = ?', 2)  .order(:tag_line)  .order(tag_line: ...",
    "content": "Notes on various features and functions of Active Record ModelQuery Methodsobj = User  .where(email: 'info@mydomain.np')  .where('id = 2')  .where('id = ?', 2)  .order(:tag_line)  .order(tag_line: :desc)  .order(\"tag_line DESC\")  .reorder(:tag_line) # Replaces any existing order defined on the relation with the specified order.  .where(active: true)  .rewhere(active: false) # Allows to change a previously set where condition for a given attribute, instead of appending to that condition.  .offset(1)  .limit(2)  .uniqSome other query methodsitems = Employer  .select(:id)  .select([:id, :name])  .group(:title)   # GROUP BY name  .group('title AS grouped_title, age')  .having('SUM(salary) &gt; 25000')  # needs to be chained with .group  .includes(:user)  .includes(user: [:articles])  .references(:comments)Finder methodsitem = ModelName.find(id)item = ModelName.find_by_email(email)item = ModelName.where(email: email).firstModel  .first  .last  .exists?(5)  .exists?(name: \"ShivRaj\")  .find_nth(4, [offset])Persistenceitem.new_record?item.persisted?item.destroyed?item.serialize_hash # Returns a serialized hash of your objectitem.saveitem.save!      # It does same as save, but raises an Exceptionitem.update  name: 'ShivRaj'  # Save the record immediatelyitem.update! name: 'ShivRaj'item.update_column  :name, 'ShivRaj'  # It skips validations and callbacksitem.update_columns  name: 'ShivRaj'item.update_columns! name: 'ShivRaj'item.touch                 # It updates :updated_atitem.touch :published_atitem.destroyitem.delete  # It skips callbacksModel.create     # It does same task which is done by new and saveModel.create!    # It does same as create but raises an ExceptionAttribute Assignmentitem.attributes                         # &lt;Hash&gt;item.attributes = { name: 'ShivRaj' }   # Merges attributes in but it Doesn't save.item.assign_attributes name: 'ShivRaj'  # Merges attributes in but it Doesn't save.Validationsitem.valid?item.invalid?Dirtyitem.changed?item.changed             # ['name']item.changed_attributes  # { 'name' =&gt; 'ShivRaj' } - original valuesitem.changes             # { 'name' =&gt; ['ShivRaj', 'PushpaRaj'] }item.previous_changes    # available after #saveitem.restore_attributesitem.name = 'ShivRaj'item.name_was         # 'ShivRaj'item.name_change      # [ 'ShivRaj', 'PushpaRaj' ]item.name_changed?    # trueitem.name_changed?(from: 'ShivRaj', to: 'PushpaRaj')CalculationsPerson.countPerson.count(:age)    # counts non-nil'sPerson.average(:age)Person.maximum(:age)Person.minimum(:age)Person.sum('2 * age')Person.calculate(:count, :all)Person.distinct.countPerson.group(:city).countDynamic attribute-based finders# Returns one recordPerson.find_by_name(name)Person.find_last_by_name(name)Person.find_or_create_by_name(name)Person.find_or_initialize_by_name(name)# Returns a list of recordsPerson.find_all_by_name(name)# Add a bang to make it raise an exceptionPerson.find_by_name!(name)# You may use `scoped` instead of `find`Person.scoped_by_user_namebelongs to Association  belongs_to :author,  :dependent      =&gt; :destroy    # or :delete  :class_name     =&gt; \"Seller\"  :select         =&gt; \"*\"  :counter_cache  =&gt; true  :counter_cache  =&gt; :custom_counter  :include        =&gt; \"Product\"  :readonly       =&gt; true  :conditions     =&gt; 'published = true'  :touch          =&gt; true  :touch          =&gt; :sellers_last_updated_at  :primary_key    =&gt; \"name\"  :foreign_key    =&gt; \"author_name\"Has many Associationbelongs_to :parent, :foreign_key =&gt; 'parent_id' class_name: 'Folder'has_many :folders, :foreign_key =&gt; 'parent_id', class_name: 'Folder'has_many :comments,    :order      =&gt; \"posted_on\"has_many :comments,    :include    =&gt; :authorhas_many :people,      :class_name =&gt; \"Person\"has_many :people,      :conditions =&gt; \"deleted = 0\"has_many :tracks,      :order      =&gt; \"position\"has_many :comments,    :dependent  =&gt; :nullifyhas_many :comments,    :dependent  =&gt; :destroyhas_many :tags,        :as         =&gt; :taggablehas_many :reports,     :readonly   =&gt; truehas_many :subscribers, :through    =&gt; :subscriptions, class_name: \"User\", :source =&gt; :userhas_many :subscribers, :finder_sql =&gt;    'SELECT DISTINCT people.* ' +    'FROM people p, post_subscriptions ps ' +    'WHERE ps.post_id = #{id} AND ps.person_id = p.id ' +    'ORDER BY p.first_name'Many-to-many Has many through Association If you have a join model:class Programmer &lt; ActiveRecord::Base  has_many :assignments  has_many :projects, :through =&gt; :assignmentsend  class Project &lt; ActiveRecord::Base  has_many :assignments  has_many :programmers, :through =&gt; :assignmentsend  class Assignment  belongs_to :project  belongs_to :programmerendMany-to-many (HABTM) Associationhas_and_belongs_to_many :projectshas_and_belongs_to_many :projects, :include =&gt; [ :milestones, :manager ]has_and_belongs_to_many :nations, :class_name =&gt; \"Country\"has_and_belongs_to_many :categories, :join_table =&gt; \"prods_cats\"has_and_belongs_to_many :categories, :readonly =&gt; truehas_and_belongs_to_many :active_projects, :join_table =&gt; 'developers_projects', :delete_sql =&gt;\"DELETE FROM developers_projects WHERE active=1 AND developer_id = #{id} AND project_id = #{record.id}\"Polymorphic associationsclass Post  has_many :attachments, as: :parentend class Image  belongs_to :parent, polymorphic: trueend And in migrations:create_table :images do |t|  t.references :post, polymorphic: trueendValidationclass Person &lt; ActiveRecord::Base  # Presence  validates :name,     presence: true   # Acceptance  validates :terms,    acceptance: true  # Confirm  validates :email,    confirmation: true  # Unique  validates :slug,     uniqueness: true  validates :slug,     uniqueness: { case_sensitive: false }  validates :holiday,  uniqueness: { scope: :year, message: 'yearly only' }  # Format  validates :code,     format: /regex/  validates :code,     format: { with: /regex/ }  # Length  validates :name,     length: { minimum: 2 }  validates :bio,      length: { maximum: 500 }  validates :password, length: { in: =&gt; 6..20 }  validates :number,   length: { is: =&gt; 6 }  # Include/exclude  validates :gender,   inclusion: %w(male female)  validates :gender,   inclusion: { in: %w(male female) }  validates :lol,      exclusion: %w(xyz)  # Numeric  validates :points,   numericality: true  validates :played,   numericality: { only_integer: true }  # ... greater_than, greater_than_or_equal_to,  # ... less_than, less_than_or_equal_to  # ... odd, even, equal_to  # Validate the associated records to ensure they're valid as well  has_many :books  validates_associated :books  # Length (full options)  validates :content, length: {    minimum:   300,    maximum:   400,    tokenizer: lambda { |str| str.scan(/\\w+/) },    too_short: \"must have at least %{count} words\",    too_long:  \"must have at most %{count} words\" }  # Multiple  validates :login, :email, presence: true  # Conditional  validates :description, presence: true, if: :published?  validates :description, presence: true, if: lambda { |obj| .. }  validates :title, presence: true, on: :save   # :save | :create | :updateendCustom validationsclass Person &lt; ActiveRecord::Base  validate :foo_cannot_be_nil  def foo_cannot_be_nil    errors.add(:foo, 'cannot be nil')  if foo.nil?  endendErrorsrecord.errors.valid?      # → falserecord.errors             # → { :name =&gt; [\"can't be blank\"] }record.errors.messages    # → { :name =&gt; [\"can't be blank\"] }record.errors[:name].any?Mass updates# Updates article having id 8Article.update 8, name: \"\", age: 34Article.update [2,3], [{name: \"Shiv\"}, {name: \"Raj\"}]Joining# Basic joinsEmployer.joins(:companies).where(companies: { type: 'private' })Employer.joins(:companies).where('companies.type' =&gt; 'private' )# Multiple associationsBlog.joins(:category, :comments)# Nested associationsBlog.joins(comments: :guest)# SQLAuthor.joins(  'INNER JOIN posts ' +  'ON posts.author_id = authors.id ' +  'AND posts.published = \"t\"')Where interpolationwhere('name = ?', 'Shiv')where(['name = :name', { name: 'Shiv' }])Serializeclass User &lt; ActiveRecord::Base  serialize :preferencesend user = User.create(  preferences: {    'background' =&gt; 'black',    'display' =&gt; 'large'  })You can also specify a class option as the second parameter that’ll raise an exception if a serialized object is retrieved as a descendant of a class not in the hierarchy.# Only Hash allowed!class User &lt; ActiveRecord::Base  serialize :preferences, Hashend # Reading it raises SerializationTypeMismatchuser = User.create(preferences: %w(one two three))User.find(user.id).preferencesOverriding accessorsclass Song &lt; ActiveRecord::Base  # Uses an integer of seconds to hold the length of the song  def length=(minutes)    write_attribute(:length, minutes.to_i * 60)  end  def length    read_attribute(:length) / 60  endend"
  },
  
  {
    "title": "Git Modify Author and Committer",
    "url": "/posts/git-modify-author-committer/",
    "categories": "Git, Modify Author And Committer",
    "tags": "git",
    "date": "2019-06-13 07:23:58 +0545",
    





    
    "snippet": "How to change all commits to have the same newly added author and committer?Go to appropriate branch and project directory and run the following command on console.  git filter-branch -f --env-filt...",
    "content": "How to change all commits to have the same newly added author and committer?Go to appropriate branch and project directory and run the following command on console.  git filter-branch -f --env-filter \"    GIT_AUTHOR_NAME='ShivRaj'     GIT_AUTHOR_EMAIL='shivrajbadu@gmail.com'    GIT_COMMITTER_NAME='ShivRaj'    GIT_COMMITTER_EMAIL='shivrajbadu@gmail.com'  \" HEADAbove command run successfully with following outputRewrite cd130b5306f93f52a1ef7cce7fd8c25ad5a68b14 (1/1) (0 seconds passed, remaining 0 predicted)    Ref 'refs/heads/master' was rewritten"
  },
  
  {
    "title": "Conditional Validations",
    "url": "/posts/conditional-validations-rails/",
    "categories": "Ruby on Rails, Conditional Validations",
    "tags": "ruby on rails, validation",
    "date": "2019-01-07 08:01:18 +0545",
    





    
    "snippet": "Senerio:  User may not provide Name when creating profile, so user name is not compulsory  But if Name is provided then minimum character should be 3 &amp; max character should be 10Solutions:# Nor...",
    "content": "Senerio:  User may not provide Name when creating profile, so user name is not compulsory  But if Name is provided then minimum character should be 3 &amp; max character should be 10Solutions:# Normally we do like this and is the best way in this situationvalidates :name, length: { minimum: 5, maximum: 15 },                          allow_blank: truevalidates :name, length: { minimum: 5, maximum: 15 },                if: :length_of_name_is_not_zerovalidates :name, length: { minimum: 5, maximum: 15 },                unless: Proc.new {|obj| obj.name.length == 0}def length_of_name_is_not_zero  return false if self.name.length.eql?(0)  trueendAnother example of conditional validationattr_accessor :stu_field_validatevalidates :no_of_students, :presence =&gt; { :if =&gt; \"student_no_validate?\" }def student_no_validate? self.stu_field_validate.present? and ['no_of_students'].include?(self.stu_field_validate)endPass field value as&lt;%= f.hidden_field :stu_field_validate, :value =&gt; \"no_of_students\" %&gt;"
  },
  
  {
    "title": "Blocks, Lambdas and Proc",
    "url": "/posts/blocks-proc-and-lambdas/",
    "categories": "Ruby, Block Lambda Proc",
    "tags": "ruby, block, lambda, proc",
    "date": "2019-01-07 08:01:18 +0545",
    





    
    "snippet": "Lambdas and ProcLambdas and Proc are block executing statement.Lambdas and Proc both are object of Proc.Lambdas and Proc are executed by call().Lambda declarationx = lambda { p \"This is lambda\" }x....",
    "content": "Lambdas and ProcLambdas and Proc are block executing statement.Lambdas and Proc both are object of Proc.Lambdas and Proc are executed by call().Lambda declarationx = lambda { p \"This is lambda\" }x.call=&gt; \"This is lambda\"obj = lambda do |x, y|  x+yendobj.call(2,3)=&gt; 5# if required arguments are not supplied lambda throws argument errorsobj.call(2,3,5)ArgumentError (wrong number of arguments (given 3, expected 2))Proc declarationx = Proc.new {p \"this is proc\"}x.call=&gt; \"this is proc\"obj = Proc.new do |x, y|  x+yendobj.call(2,3)=&gt; 5# if required arguments are not supplied it won't throw argument error like lambdaobj.call(2,3,5)=&gt; 5class Block  def hello(*args, &amp;block)    yield *args  end  proc = Proc.new do |*args|    puts *args.class    arr = *args    sum = 0    arr.flatten.each do |num|      sum = sum + num    end    puts sum  end  obj = Block.new  obj.hello([1,10,15], &amp;proc)end=&gt; Array26BlocksRuby blocks are anonymous functions are passed into methods. They are enclosed between {} brackets or in do/end statement.It accepts multiple arguments as |arg1, …, argn|. Blocks are used with each.It allows to save code and use it later.#### single line blocks[20,30,40].each {|n| puts n}# here code inside {} are block#### multi-line blocks[20,30,40].each do |n|  puts nendRuby yield keywordyield is a keyword that calls and run the code inside the blockdef block_fun  yieldendblock_fun { puts \"Block is executing\" }"
  },
  
  {
    "title": "Engine on Rails",
    "url": "/posts/engines-on-rails/",
    "categories": "Ruby on Rails, Engines",
    "tags": "ruby on rails, engines",
    "date": "2019-01-07 08:01:18 +0545",
    





    
    "snippet": "Engines are small applications which provides functionality to their host applications. A Rails application is a engine with Rails::Application class inheriting a lot of behaviour from Rails::Engin...",
    "content": "Engines are small applications which provides functionality to their host applications. A Rails application is a engine with Rails::Application class inheriting a lot of behaviour from Rails::Engine. So Rails application and engine are alomost same thing and share common structure with slight differences.Engines also related with plugins, both shares lib/ directory structure, and both generated using rails plugin new generator. Engine is considered as full plugin using --full in generator while --mountable option includes features of full and some others. An engine can be a plugin and plugin can be an engine.Some example of engines are: Devise for authenticating parent application, Thredded for forum functionlity, Spree for ecommerce, Refinery CMS for CMS application.Create a Base application (e.g: base_app)Create engine e.g: engine_app with following command:  rails new plugin engine_app --mountableCustomize engine_app.gemspec file and edit, homepage, summary, description, etc as per your requirements.Go to base_app -  Gemfile  gem 'engine_app', path: 'lib/engine_app'  bundle installWhen everything is Ok, we will get some message like:Using engine_app 0.0.1 from source at lib/engine_appHow to make plugins -  routes easy?Go to routes.rb file of base app and paste the code:mount EngineApp::Engine, at: '/engine_app'orGo to plugins app/lib/engine_app/engine.rbisolate_namespace EngineAppinitializer \"engine_app\", before: :load_config_initializers do |app|      Rails.application.routes.append do          mount EngineApp::Engine, at: '/engine_app'      endendNow it is possible to run rake routes and we can see all engines routese.g: engine_app /engine_app EngineApp::EngineHow to check Plugins Rails Console?Go to main app&gt; rails console&gt; EngineApp::Article.newHow to make MVC in base and inside engines?To make model controller inside base go to base dir or else go to engine dirRails Engine MigrationsBase app has no knowledge of Engine migrations, we need to customize it or manually we need to run command:i) Manually we can run following command:rake engine_app:install:migrationsii) go to lib/engine.rb file and paste the following code initializer \"engine_app\", before: :load_config_initializers do |app|     config.paths[\"db/migrate\"].expanded.each do |expanded_path|         Rails.application.config.paths[\"db/migrate\"] &lt;&lt; expanded_path     end endNow rake db:migrate will work from base applicationHow to access plugins and base app’s controller action?For e.g: link_to 'Home', root_path, will not work if we want to access enginesresources because engine won’t able to understand root_path for it. So we need following codes:link_to 'Home', main_app.root_pathlink_to 'Plugin Home', engine_app.articles_pathHow to layout in base and engines?We have to call layouts inside application controller or wherever required and it can be accessed by:layouts 'application' # will call base layoutslayouts 'engine_app/application' # will call plugin layoutsHow to include gems inside engines?Go to .gemspec file e.g: engine_app.gemspecGem::Specification.new do |s|  s.add_dependency \"devise\"  s.add_dependency 'authority', '~&gt; 3.1'end"
  },
  
  {
    "title": "Pow alternatives prax !",
    "url": "/posts/pow-alternatives-prax/",
    "categories": "Ruby, Pow Alternatives Prax",
    "tags": "ruby, linux, prax, pow_alternate, rack gem",
    "date": "2019-01-05 09:01:18 +0545",
    





    
    "snippet": "Pow is zero-config Rack server for Mac OS X. Your application will run on myapp.test without modifying /etc/hosts.Those who use GNU/Linux and installed Ruby and Rack gem Prax is usefull. It is a we...",
    "content": "Pow is zero-config Rack server for Mac OS X. Your application will run on myapp.test without modifying /etc/hosts.Those who use GNU/Linux and installed Ruby and Rack gem Prax is usefull. It is a web server which start rack application in background and proxy all requests to that application.Configurations  git clone git://github.com/ysbaddaden/prax.git /opt/prax  cd /opt/prax/ &amp;&amp; ./bin/prax install  sudo /etc/init.d/prax start  # Go to application and run the command  # cd apps/yourappname  prax link  # open your application with this command  prax open  # or  google-chrome http://yourappname.dev/  # see the list of linking application using  prax listIf you are using (RVM) Ruby version manager, follow below steps:cd $HOMEtouch .praxconfigPaste this code in .praxconfig file# detect `$rvm_path`if [ -z \"${rvm_path:-}\" ] &amp;&amp; [ -x \"${HOME:-}/.rvm/bin/rvm\" ]then rvm_path=\"${HOME:-}/.rvm\"fiif [ -z \"${rvm_path:-}\" ] &amp;&amp; [ -x \"/usr/local/rvm/bin/rvm\" ]then rvm_path=\"/usr/local/rvm\"fi# load environment of current project rubyif  [ -n \"${rvm_path:-}\" ] &amp;&amp;  [ -x \"${rvm_path:-}/bin/rvm\" ] &amp;&amp;  rvm_project_environment=`\"${rvm_path:-}/bin/rvm\" . do rvm env --path2&gt;/dev/null` &amp;&amp;  [ -n \"${rvm_project_environment:-}\" ] &amp;&amp;  [ -s \"${rvm_project_environment:-}\" ]then  echo \"RVM loading: ${rvm_project_environment:-}\"  \\. \"${rvm_project_environment:-}\"else  echo \"RVM project not found at: $PWD\"fiWhen your host example.dev do not work, then you need to restart your application using prax:# Go to home directory and cd into .praxcd .prax# Go to your application directorycd example.dev# for first time run the command `prax start`, later you can restart itprax restart"
  },
  
  {
    "title": "Ruby - Arrays !",
    "url": "/posts/ruby-arrays/",
    "categories": "Ruby, Arrays",
    "tags": "ruby, arrays",
    "date": "2018-09-02 09:01:18 +0545",
    





    
    "snippet": "An array is an ordered collection of elements that can be of any type. Each element in an array is referred to by an index. Array can have objects like integer, string, float, Fixnum, Hash, Symbol....",
    "content": "An array is an ordered collection of elements that can be of any type. Each element in an array is referred to by an index. Array can have objects like integer, string, float, Fixnum, Hash, Symbol.Creating / Initialization of an Arrayarr = Array.newSet array sizearr = Array.new(50)puts arr.size # 50puts arr.length # 50Assign a value of an arrayarr1 = Array.new([1,2,3,4,5])arr2 = [1,2,3,4,5]Accessing elementesarr1[3] =&gt; 4arr1[50] =&gt; nilarr1[-3] =&gt; 3arr1[0, 4] =&gt; [1,2,3,4] # 0 is the indexing value and 4 is 4 items including indexing value 0arr1[1..3] =&gt; [2,3,4]arr1.at(1) =&gt; 2arr1.fetch(4) =&gt; 5arr1.first =&gt; 1arr1.last =&gt; 5arr1.take(3)=&gt; [1, 2, 3]arr1.drop(3)=&gt; [4, 5]arr = [1,2,3,4,5]arr.count =&gt; 5arr.empty? # =&gt; falsearr.include?(2) =&gt; trueCheck if two array objects are equal# checks the valuearr1.eql? arr2=&gt; true# checks the references of the object, object idarr1.equal? arr2=&gt; false# This is because object_id for both object is differentarr1.object_id = 11544620arr2.object_id = 11617600arr1 = arr2arr1.equal? arr2 =&gt; true# Now object_id for both object is samearr1.object_id = 11617600arr2.object_id = 11617600Check if there are same elements in both arraysarray1 = [1,2,3]array2 = [2,3,1]array1.to_set == array2.to_set=&gt; truearray1 = [1,2,3,4]array2 = [1,2,3]array1.to_set == array2.to_set=&gt; false#### In Ruby &gt;= 2.6 we can use array1.intersection(array2) method, if both are same it returns empty array [][ 1, 2, 3 ].difference([ 3, 2, 1 ])[ 1, 2, 3 ].difference([ 1, 2, 3 ])=&gt; []Word array create an array in which each entry is a single word.count  = %w{one two three four five}This is equivalent tocount = [\"one\", \"two\", \"three\", \"four\", \"five\"]Nested Array: Array can contains other arraysstaffs_info = [  [\"Ram\", \"0012\", \"Manager\"],  [\"Shyam\", \"0013\", \"HR Manager\"],  [\"Hari\", \"0014\", \"Receptionist\"]]Accessing value of nested arraystaffs_info[0][1]=&gt; \"0012\"Adding Data to Arraycount &lt;&lt; \"six\" =&gt; [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]count.push(\"seven\")=&gt; [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]# insert first position of an arraycount.unshift(\"zero\")=&gt; [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"]# insert at any positioncount.insert(5, \"between 4 &amp; 5\")=&gt; [\"zero\", \"one\", \"two\", \"three\", \"four\", \"between 4 &amp; 5\", \"five\"]# insert multivalues oncecount.insert(3, 'bet 2-3 1', 'bet2-3 2', 'bet2-3 3')=&gt; [\"zero\", \"one\", \"two\", \"bet 2-3 1\", \"bet2-3 2\", \"bet2-3 3\", \"three\", \"four\", \"between 4 &amp; 5\", \"five\"]Adding Data to nested Arraystaffs_info[0] &lt;&lt; \"Rs. 80,000\"=&gt; [\"Ram\", \"0012\", \"Manager\", \"Rs. 80,000\"]staffs_info=&gt; [[\"Ram\", \"0012\", \"Manager\", \"Rs. 80,000\"], [\"Shyam\", \"0013\", \"HR Manager\"], [\"Hari\", \"0014\", \"Receptionist\"]]Array pop / Remove items from an arrayarr = [1,2,3,4,5]arr.pop=&gt; 5arr=&gt; [1,2,3,4]# array.unshift(0) will add o to start of an array while array.shift will remove first elementarr = [1,2,3,4,5]arr.shift =&gt; 1arr[2,3,4,5]# delete an item at particular index use delete_at(index_position)arr = [1,2,3,4,5]arr.delete_at(2)=&gt; 3arr[1,2,4,5]# compact() is used to remove nil value from an arrayarr = [nil, 1, 2, 3, nil, 4, nil, 5]arr.compact[1,2,3,4,5]arr=&gt; [nil, 1, 2, 3, nil, 4, nil, 5]arr.compact!=&gt; [1,2,3,4,5]arr=&gt; [1,2,3,4,5]arr = [1,1,2,2,3,3,4,4,5,6,7]arr.uniq=&gt; [1, 2, 3, 4, 5, 6, 7]Iterating over an Arrayarr = [1,2,3,4,5]arr.each {|item| p item+10}=&gt; it prints 11,12,13,14,15arr = [1,2,3,4,5]arr.reverse_each {|item| p item+10}=&gt; it prints 15,14,13,12,11arr = [1,2,3,4,5]arr.map {|item| p item+10}=&gt; it prints 11,12,13,14,15arr=&gt; 1,2,3,4,5arr.map! {|item| p item+10}arr=&gt; [11, 12, 13, 14, 15]Selecting items from an ArrayNon-destructive Selectionarr = [1,2,3,4,5,6,7,8]arr.select {|a| a &gt; 3}# =&gt; [4,5,6,7,8]arr.reject {|a| a &lt; 3}# =&gt; [3,4,5,6,7,8]arr.drop_while {|a| a &lt; 5}# =&gt; [5,6,7,8]arr=&gt; [1,2,3,4,5,6,7,8] Destructive SelectionDestructive methods are select! and reject!arr.select! {|a| a &gt; 3}=&gt; [4, 5, 6, 7, 8]arr=&gt; [4, 5, 6, 7, 8]&gt; arr = [1,2,3,4,5,6,7,8]=&gt; [1, 2, 3, 4, 5, 6, 7, 8] &gt; arr.delete_if { |a| a &lt; 4 }=&gt; [4, 5, 6, 7, 8] &gt; arr=&gt; [4, 5, 6, 7, 8]arr = [1, 2, 3, 4, 5, 6, 7, 8]arr.keep_if { |a| a &lt; 4 }[1,2,3]arr=&gt; [1, 2, 3]            Public methods like &amp;,      , &amp;&amp;,             a = [1, 2, 3, 4]b = [3, 4, 5, 6]Set intersection:a &amp; b=&gt; [3, 4]a | b=&gt; [1, 2, 3, 4, 5, 6]a || b=&gt; [1, 2, 3, 4]a &amp;&amp; b=&gt; [3, 4, 5, 6]Concatenating two arrays:[\"a\", \"b\"] + [\"c\", \"d\"]=&gt; [\"a\", \"b\", \"c\", \"d\"]Difference of arrays:[\"a\", \"b\", \"c\", \"d\", \"e\"] - [\"c\", \"d\"]=&gt; [\"a\", \"b\", \"e\"]Arrarys can be chained together and returns an array (arr « obj -&gt; arr)[\"a\", \"b\"] &lt;&lt; 10 &lt;&lt; [\"c\", \"d\"]=&gt; =&gt; [\"a\", \"b\", 10, [\"c\", \"d\"]]array &lt;=&gt; another_array -&gt; -1, 0, +1 or nila = [1,2]b = [3,4]a &lt;=&gt; b =&gt; -1a = [1, 2]b = [1, 2]a &lt;=&gt; b =&gt; 0 a = [1, 2, 3] b = [1, 2] a &lt;=&gt; b =&gt; 1 a = [1, 2, 3] b = [1, 2, :v] a&lt;=&gt;b =&gt; nilarr == another_arr -&gt; bool[1,3] == [1,3] #=&gt; true[1,3] == [1,3,4] #=&gt; false            bsearch {      x      block} -&gt; elm      Binary search finds a value from this array which meets the given condition in O(log n) where n is the size of the array.arr = [0,1,2,3,4,5]arr.bsearch {|x| x &gt;= 2}=&gt; 2Clear an Arrayarr = [1,2,3,4,5]arr.clear# =&gt; []a = [1,2,3,4,5]a.collect {|x| x.to_s+\"!\"}=&gt; [\"1!\", \"2!\", \"3!\", \"4!\", \"5!\"]a.collect.with_index {|x,i| p i}=&gt; [0, 1, 2, 3, 4]a.map.with_index {|x,i| p i}=&gt; [0, 1, 2, 3, 4]Combinationa = [1,2,3,4,5]a.combination(1).to_a#=&gt; [[1], [2], [3], [4], [5]]a.combination(2).to_a=&gt; [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]]a.combination(3).to_a=&gt; [[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]compact[1,2,nil,'a','b',4].compact#=&gt; [1,2,'a','b',4]concat[1,2].concat([5,6])#=&gt; [1,2,5,6]cycleCalls the given block for each element n times or forever if nil is given.Does nothing.a=[\"a\",\"b\",\"c\"]a.cycle {|x| puts x} # infinite loopa.cycle(2) {|x| puts x} # =&gt; a b c a b c Array fillarr = [1,2,3]arr.fill('a')=&gt; [\"a\", \"a\", \"a\"]flattenarr = [[1,2], 3,4,[5]]arr.flatten# =&gt; [1,2,3,4,5]replacearr = ['a', 'b']arr.replace([1,2])=&gt; [1,2]sorta = [5,4,6,8]a.sort=&gt; [4, 5, 6, 8]Conversionto_s =&gt; returns the stringto_h =&gt; returns hash i.e. [key, value] pairs&gt; [[1,:b], [2,:c]].to_h=&gt; {1=&gt;:b, 2=&gt;:c}to_a =&gt; returns selfto_ary =&gt; returns selftranspose matrixa = [[1,2], [3,4], [5,6]]a.transpose=&gt; [[1,3,5], [2,4,6]]"
  },
  
  {
    "title": "Ruby - Switch Case Statement !",
    "url": "/posts/ruby-switch-case/",
    "categories": "Ruby, Swith Case",
    "tags": "ruby, switch_case",
    "date": "2018-09-01 07:12:18 +0545",
    





    
    "snippet": "Ruby uses the case expression with one or more when conditions. After execution it returns one of the when statement or default else case.case gets.chompwhen '1'  puts \"You have entered 1\"when '2' ...",
    "content": "Ruby uses the case expression with one or more when conditions. After execution it returns one of the when statement or default else case.case gets.chompwhen '1'  puts \"You have entered 1\"when '2'  puts \"You have entered 2\"else  puts 'You have entered number other than 1 &amp; 2'end"
  },
  
  {
    "title": "Ruby - Loops & Iterators !",
    "url": "/posts/ruby-loops-and-iterators/",
    "categories": "Ruby, Loops & iterators",
    "tags": "ruby, loops",
    "date": "2018-09-01 04:19:12 +0545",
    





    
    "snippet": "Loop is the process in which set of instructions or block of codes are repeated in a specified number of times under certain condition is satisfied. for, while, do while are example of loops.while ...",
    "content": "Loop is the process in which set of instructions or block of codes are repeated in a specified number of times under certain condition is satisfied. for, while, do while are example of loops.while loopRuby while loop is used to execute a program until condition is true, once condition fails execution is terminated from loop. While loop is used when number of needed iterations is not fixed.count = 0while count &lt; 5 do  p count  count = count+1enddo while loop# syntaxloop do  # some code here  break if &lt;condition&gt;end# Examplei = 1while true  puts i  i = i + 1  break if i &gt; 5endi = 1loop do  puts i  i = i + 1  break if i &gt; 5endfor loopfor loop is used to run block of code in a specific number of times when number of needed iterations is known.for num in 1..100  puts numend Range loopRuby each method is used to iterator over individual item in an array.(1..100).each do |num|  puts numend# loop through an array using each[1, 2, 3].each do |i|  puts iend# loop through hash using eachhash_var = {name: 'Car', color: 'Red', model: '2018'}hash_var.each do |key, value|  puts \"#{key} =&gt; #{value}\"end# find index in loop using each_with_index[10, 11, 12].each_with_index do |val, key|  p keyend=&gt; 0   1   2Times loop5.times {|i| puts \"number #{i}\"}skip iterations with the next keyword10.times do |i|  res = i % 2  next unless res==0  puts iendstop a loop early using breakarr = [2,4,6,8,10,12]arr.each do |el|  break if el &gt; 10  puts elend"
  },
  
  {
    "title": "Ruby - Control Flow Statement !",
    "url": "/posts/ruby-if-else-unless-statements/",
    "categories": "Ruby, Control Statement",
    "tags": "ruby, control_structure",
    "date": "2018-08-30 09:23:58 +0545",
    





    
    "snippet": "if Statement in Rubyif, elsif and else block in Ruby controls decision based on the condition to true/false resulting in the different execution of the code.key = 10if key &gt; 15  puts 'Key is gre...",
    "content": "if Statement in Rubyif, elsif and else block in Ruby controls decision based on the condition to true/false resulting in the different execution of the code.key = 10if key &gt; 15  puts 'Key is greater than 15'elsif key &lt; 8  puts 'key is less than 8'else  puts 'key is between 8 and 15'end unless statement is inverse of if statement. unless statement is executed if expression is not truenum = 10unless num == 9  puts \"Selected number is not 10\"endTernary OperatorTernary operator is short hand for if else expression. Two symbols ? : are used.x = 2x &gt; 5 ? 'Greater' : 'Smaller' "
  },
  
  {
    "title": "Ruby String !",
    "url": "/posts/ruby-string/",
    "categories": "Ruby, String",
    "tags": "ruby, string",
    "date": "2018-08-30 09:23:58 +0545",
    





    
    "snippet": "About StringString holds and manipulates an arbitrary sequence of bytes which is group of characters. String in ruby is defined using single quote and double quote as:strvar = 'this is string'strva...",
    "content": "About StringString holds and manipulates an arbitrary sequence of bytes which is group of characters. String in ruby is defined using single quote and double quote as:strvar = 'this is string'strvar1 = \"this is string #{some_dynamic_var}\"Find string lengthsize() and length() are used to find string length\"string\".size=&gt; 6String Interpolationstr = \"String\"puts \"This Is #{str}\"Ruby calls to_s() on the string interpolation block which is used to convert object itself into string.Extract a Substringstr = \"longstring\"str[0,4]# longstr[4,6]# stringstr[0..-2]# longstrinstr[0..3] = ''# stringinclude? is used to find if string contains another stringstr = \"My name is Mr. ABC\"str.include?(\"ABC\")# trueindex() can be used to find the start position / index position of the stringstr = \"My name is Mr. ABC\"str.index(\"ABC\")# 15In Ruby String add more string like this:str = \"string\"str.rjust(18, \"0\") =&gt; \"000000000000string\"str.ljust(18, \"0\") =&gt; \"string000000000000\" Case in Stringvar1 = \"str\"var2 = \"Str\"var1.upcase == var2.upcase=&gt; truevar1.casecmp?(var2) # casecmp? Case-insensitive version of String=&gt; trueTrim a String &amp; Remove a White Spacestr = \"   string   \"str.strip=&gt; \"string\"Trim left and right stringstr = \"   string   \"str.lstrip =&gt; \"string   \"str.rstrip =&gt; \"   string\" String prefix and suffixstart_with?, end_with?str = \"a red car\"str.start_with?(\"a\")# truestr.start_with?(\"car\")# trueRuby 2.5 has two methods delete_prefix &amp; delete_suffixstr = \"a red car\"str.delete_prefix(\"a red\") =&gt; \" car\" str.delete_suffix(\"red car\") =&gt; \"a \"Convert string to array of charactersstr = \"string\"str.split(\"\")=&gt; [\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]Convert arrary to stringarr = [\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]arr.join=&gt; \"string\"arr.join(\"-\") =&gt; \"s-t-r-i-n-g\"Count specific characters\"lophophorous\".count(\"o\")=&gt; 4#### Convert string to integer\"str\".to_i=&gt; 0\"50\".to_i=&gt; 50check string is a numbermatch() is introduced in Ruby 2.4\"123\".match?(/\\A-?\\d+\\Z/)=&gt; true\"123sadf\".match?(/\\A-?\\d+\\Z/)=&gt; falseAppend Charactersstr = \"\"str &lt;&lt; \"Ruby\"str &lt;&lt; \" \"str &lt;&lt; \"Rails\"# \"Ruby Rails\"Note: When you use += for string concatenation, this way new string will be created every time which is not good for performance.Loop through characters\"hello world\".each_char {|ch| puts ch}\"hello world\".chars =&gt; [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"] String Case\"hello\".upcase=&gt; \"HELLO\"\"HELLO\".downcase=&gt; \"hello\"Multiline Stringsb = &lt;&lt;-STRINGhelloworldSTRINGa = %Q(helloworld) =&gt; \"hello\\nworld\\n\"Gsub() replace textstr = \"The color of car is red\"str.gsub(\"red\", \"blue\")=&gt; \"The color of car is blue\"str = \"helloooo\"str.gsub(\"o\", '')=&gt; \"hell\"str = \"my id is 5\"str.gsub(/\\d+/, '1001')=&gt; \"my id is 1001\" str.gsub(/\\w+/) {|w| w.capitalize} =&gt; \"My Id Is 5\"Remove last character of a string\"hello\".chomp(\"o\")=&gt; hellRemove first and last character if first and last letter satisfied some valuestr = \"{'a','b','c'}\"str[1..-1] if str.chars.first == '{'str[0...-1] if str.chars.last == '}'Change string encodings\"string\".encoding =&gt; #&lt;Encoding:UTF-8&gt;\"string\".force_encoding(\"UTF-8\")Find out number of occurrence of each character in a given stringstr = \"hello world\"arr = str.split(\"\")arr.uniq.each {|x| p \"Count of #{x} = #{str.count(x)}\" if x != \" \"output:\"Count of h = 1\"\"Count of e = 1\"\"Count of l = 3\"\"Count of o = 2\"\"Count of w = 1\"\"Count of r = 1\"\"Count of d = 1\""
  },
  
  {
    "title": "Get user input in Ruby!",
    "url": "/posts/ruby-get-user-input/",
    "categories": "Ruby, Get user input",
    "tags": "ruby, get_user_input",
    "date": "2018-08-30 09:23:58 +0545",
    





    
    "snippet": "Getting user inputgets keyword is used to get the user input as a string.#!/usr/bin/rubyputs 'what is your name?'name = gets.chompputs \"How are you #{name}\"String#chomp method returns string after ...",
    "content": "Getting user inputgets keyword is used to get the user input as a string.#!/usr/bin/rubyputs 'what is your name?'name = gets.chompputs \"How are you #{name}\"String#chomp method returns string after removing extra line."
  },
  
  {
    "title": "Ruby Put and Print Commands !",
    "url": "/posts/ruby-puts-print-command/",
    "categories": "Ruby, Puts vs. Print",
    "tags": "ruby, print",
    "date": "2018-08-30 05:12:38 +0545",
    





    
    "snippet": "puts vs printputs and print both are used to display the result of evaluating Ruby code.Major difference between these two are: puts adds a newline after executing but print does not add new line.p...",
    "content": "puts vs printputs and print both are used to display the result of evaluating Ruby code.Major difference between these two are: puts adds a newline after executing but print does not add new line.puts \"one two\"one two=&gt; nilprint \"one two\"one two =&gt; nilprint [1,2,nil][1, 2, nil] =&gt; nilputs [1,2,nil]12=&gt; nil "
  },
  
  {
    "title": "Sql Having & GroupBy!",
    "url": "/posts/sql-having/",
    "categories": "SQL, Having - Group by",
    "tags": "sql, having_group_by",
    "date": "2018-08-29 09:23:58 +0545",
    





    
    "snippet": "Having &amp; Group Clause  Having is used to restrict the rows affected by the Group By clause as it iis similar to Where clause.  Having applies to summarized group records, whereas Where applies ...",
    "content": "Having &amp; Group Clause  Having is used to restrict the rows affected by the Group By clause as it iis similar to Where clause.  Having applies to summarized group records, whereas Where applies to individual records.  Only the groups that meets Having criteria will be returned.  Having requires that the GROUP BY clause is present so both are in the same query.  Group By in sql is used to return distinct rows based on table column supplied on group by or group() method.We have following records in our database, now we want to group record based on i) title ii) id, title combination, and filter further to get count result for articles id greater than 2.&lt;Article id: 1, title: \"\", created_at: \"2019-04-23 05:44:22\", updated_at: \"2019-04-23 05:44:23\"&gt;&lt;Article id: 2, title: \"WND\", created_at: \"2019-04-23 05:46:20\", updated_at: \"2019-04-23 05:46:20\"&gt;&lt;Article id: 3, title: \"a\", created_at: \"2019-04-25 07:35:49\", updated_at: \"2019-04-25 07:35:50\"&gt;&lt;Article id: 4, title: \"a\", created_at: \"2019-04-25 07:35:52\", updated_at: \"2019-04-25 07:35:52\"&gt;]Article.group(:title).countSELECT COUNT(*) AS count_all, \"articles\".\"title\" AS articles_title FROM \"articles\" GROUP BY \"articles\".\"title\"=&gt; {\"\"=&gt;1, \"WND\"=&gt;1, \"a\"=&gt;2}Article.group(:id, :title).countSELECT COUNT(*) AS count_all, \"articles\".\"id\" AS articles_id, \"articles\".\"title\" AS articles_title FROM \"articles\" GROUP BY \"articles\".\"id\", \"articles\".\"title\"=&gt; {[1, \"\"]=&gt;1, [2, \"WND\"]=&gt;1, [3, \"a\"]=&gt;1, [4, \"a\"]=&gt;1}Article.group(:title).having(\"articles.id&gt;2\").countSELECT COUNT(*) AS count_all, \"articles\".\"title\" AS articles_title FROM \"articles\" GROUP BY \"articles\".\"title\" HAVING (articles.id&gt;2)=&gt; {\"a\"=&gt;2}#group_by is used to group the record and #transform_values can be used to count each grouped records.Institution.first.items.includes(:vendor).group_by{|item| item.vendor.name}.transform_values {|values| values.count}=&gt; {\"Vendor 1\"=&gt;1, \"Vendor 2\"=&gt;3, \"Vendor 3\"=&gt;3, \"Vendor 4\"=&gt;1, \"Vendor 5\"=&gt;10 }"
  },
  
  {
    "title": "Ruby Variables!",
    "url": "/posts/Ruby-variables/",
    "categories": "Ruby, Variable",
    "tags": "ruby, variable",
    "date": "2018-08-29 09:23:58 +0545",
    





    
    "snippet": "What is Ruby variables?Variables are like containers used to store information for later use. Values can be stored in the form of Integer, String, Boolean, Float, Decimal, Array, Hashes, etc.Variab...",
    "content": "What is Ruby variables?Variables are like containers used to store information for later use. Values can be stored in the form of Integer, String, Boolean, Float, Decimal, Array, Hashes, etc.Variable can be declared as:num = 10str = \"this is string\"char = 'A'arr = [0,1,2,3,4]hash_var = {name: 'Shiv Raj', code: '00145', address: 'Nepal', \"email\" =&gt; 'shivrajbadu@gmail.com'}bool_var = falseMany languages like C, Java are strong or static variable typing. That means you must define a variable type when declaring them e.g. if it is integer you must write int var_name, if string you must write varchar var_name. But Ruby is dynamically typed language which means we do not need to define type of the variable, and once variable is declared, you can later on change the variable type in the code, these are the advantage of dynamically typed lanaugage.Way to know Ruby Variable TypeUse kind_of? method of Object class.num = 10num.kind_of?(Integer) # trueTo get the class method name used by the variablenum.class=&gt; Fixnumstr = 'this is string'str.class=&gt; String  Variable type can be changed just by assigning new valuex = 10x.class # Fixnumx = \"Ten\"x.class # String  Convert the values of the variablesx=10=&gt; 10x.to_f=&gt; 10.0x.to_s=&gt; \"10\"x.to_s(2) # convert to base 2 binary=&gt; 1010x.to_s(16) # convert to hexadecimal=&gt; \"a\"x.to_s(8) # convert to octal=&gt; \"12\""
  },
  
  {
    "title": "Ruby Variables Scope!",
    "url": "/posts/Ruby-variables-scope/",
    "categories": "Ruby, Variable Scope",
    "tags": "ruby, variable",
    "date": "2018-08-29 09:23:58 +0545",
    





    
    "snippet": "Scope of Ruby variables  Global VariableGlobal Variables can be accessed inside classes and it’s methods. Global variable are available everywhere. It is defined by prefacing the variable name with...",
    "content": "Scope of Ruby variables  Global VariableGlobal Variables can be accessed inside classes and it’s methods. Global variable are available everywhere. It is defined by prefacing the variable name with $ symbol. Before initialization it has value nil.$global_variable = 'This is a global variable !'class Example  def test_global    puts $global_variable  endend# instantiation and callobj = Example.newobj.test_global # This is a global variable !  Instance VariableInstance Variable is accessible in any instance method in a particular instance of a class. It is defined by prefacing the variable name with @ symbol.class Vehicle  def initialize(name, color)    @name = name    @color = color  end  def full_info    puts \"Name of vehicle is: #{@name} with color #{@color} !\"  endend# instantiatevehicle = Vehicle.new('Car', 'Red');# method callvehicle.full_info # Name of vehicle is: Car with color Red !  Local VariableLocal variable has local scope which be accessed inside the code where they are declared, that is when local variable is decared inside method or loop it cannot be used outside of method or loop. It is defined by small letter or begin with underscore.class LocalVariable  def fun    local_var1 = 'one'    _LocalVar2 = 'two'    puts local_var1 + _LocalVar2  endend# instantiation and callLocalVariable.new.fun # onetwo  Class VariableA class variable is a variable that is shared amongst all instances of the class. Class variable are declared with @@ sign. Class variable are called on the class itself. Class variables are like global variable but inside the class scope.class Vehicle  @@name = 'Honda'  def self.name    puts @@name  endendVehicle.name  Ruby ConstantRuby constant are the values whose value cannot be changed once it is assigned. Constant declared within a class are available anywhere within the context of class, and when declared outside of class are assined with a global scope. Constants are written in uppercase letter with underscore to seperate different word.PROJECT_VALUE=100"
  },
  
  {
    "title": "Write Comments on Ruby!",
    "url": "/posts/Comments-in-Ruby/",
    "categories": "Ruby, Comments",
    "tags": "ruby, comments",
    "date": "2018-08-28 09:23:58 +0545",
    





    
    "snippet": "How to write comments on RubyComments in Ruby can be written in two ways:  Single line commentSingle line comment followed by # symbol  # This is a single line comment.  Multi line commentsMultilin...",
    "content": "How to write comments on RubyComments in Ruby can be written in two ways:  Single line commentSingle line comment followed by # symbol  # This is a single line comment.  Multi line commentsMultiline comments starts with =begin and ends with =end=begin  This is multiline comments.  One can write number of lines as per need.=end"
  },
  
  {
    "title": "Backup and Restore PostgreSQL Database",
    "url": "/posts/backup-and-restore-postgresql-databases-on-ubuntu-16-04/",
    "categories": "PostgreSQL, Backup Restore",
    "tags": "postgres, backup_restore",
    "date": "2018-08-27 09:23:58 +0545",
    





    
    "snippet": "Backup Databasepg_dump is the PostgreSQL utility to backup the database.To backup a single database, run below command in command line interface as superuser.~ sudo pg_dump -U postgres -h localhost...",
    "content": "Backup Databasepg_dump is the PostgreSQL utility to backup the database.To backup a single database, run below command in command line interface as superuser.~ sudo pg_dump -U postgres -h localhost name-of-database &gt; name-of-backup-fileRestore DatabaseBackup file created can be useful to restore your system.To restore it is essential to create a empty database and then you can restore database using following command:psql new_Database_name &lt; path_to_backup_fileHere is the full script to restore the single databasesudo su - postgrespostgres@usr-Aspire-E5-575G:~$ psqlpostgres=# CREATE DATABASE new_database_name TEMPLATE template0;postgres@usr-Aspire-E5-575G:~$ psql new_database_name &lt; /home/siv/name-of-backup-file"
  },
  
  {
    "title": "How to install Ruby on Windows?",
    "url": "/posts/Ruby-Install-Win-And_Run_App/",
    "categories": "Ruby, Operate on WindowsOS",
    "tags": "ruby, windowsOS",
    "date": "2018-08-06 04:23:58 +0545",
    





    
    "snippet": "When you are on Windows machineYou can install BitnamiRubyStack Installers or RubyInstaller. But BitnamiRubyStack always doesnot have latest ruby supported for Win.When you are dealing with RubyEnc...",
    "content": "When you are on Windows machineYou can install BitnamiRubyStack Installers or RubyInstaller. But BitnamiRubyStack always doesnot have latest ruby supported for Win.When you are dealing with RubyEncoder you might need the same Ruby Version in which application is build. So here is the tips how you can switch your ruby versions in your Win Machine.Let say by BitnamiRubyStack your ruby version is already installed to 2.0.x ver and it is deafault version used in your system. Also you had already installed Ruby 2.4.x version using RubyInsaller but it is not the default just installed. So what you need to do is:- Uninstall default ruby 2.0- load the installed ruby 2.4.x bin executable path- check from any dir say c:/&gt;ruby -v , it should display ruby 2.4.2- Now everything is Ok to move aheadYou may get following errors:ERR:C:\\Users\\Siv\\Desktop\\2314\\newtest&gt;bundle installC:/Ruby24-x64/lib/ruby/2.4.0/rubygems/dependency.rb:308:in `to_specs': Could not find 'bundler' (&gt;= 0) among 13 total gem(s) (Gem::MissingSpecError)Checked in 'GEM_PATH=C:/Users/Siv/.gem/ruby/2.4.0;C:/Ruby24-x64/lib/ruby/gems/2.4.0', execute `gem env` for more information        from C:/Ruby24-x64/lib/ruby/2.4.0/rubygems/dependency.rb:320:in `to_spec'        from C:/Ruby24-x64/lib/ruby/2.4.0/rubygems/core_ext/kernel_gem.rb:65:in `gem'To Resolve just rungem install bundlerERR:C:\\Users\\Siv\\Desktop\\2314\\newtest&gt;rails sC:/Ruby24-x64/lib/ruby/2.4.0/rubygems/dependency.rb:308:in `to_specs': Could not find 'railties' (&gt;= 0) among 14 total gem(s) (Gem::MissingSpecError)Checked in 'GEM_PATH=C:/Users/Siv/.gem/ruby/2.4.0;C:/Ruby24-x64/lib/ruby/gems/2.4.0', execute `gem env` for more information        from C:/Ruby24-x64/lib/ruby/2.4.0/rubygems/dependency.rb:320:in `to_spec'        from C:/Ruby24-x64/lib/ruby/2.4.0/rubygems/core_ext/kernel_gem.rb:65:in `gem'        from C:/Ruby200/bin/rails:22:in `&lt;main&gt;'Just run following commandsbundle installAdd the gemPlease add the following to your Gemfile to avoid polling for changes:gem 'wdm', '&gt;= 0.1.0' if Gem.win_platform?"
  },
  
  {
    "title": "Set up docker on Ruby on Rails application",
    "url": "/posts/setup-docker-on-ror/",
    "categories": "Docker, Ruby on Rails",
    "tags": "docker, ruby on rails",
    "date": "2018-07-25 09:23:58 +0545",
    





    
    "snippet": "First you need to install docker, docker-compose, docker-machine, on your system.We need following files initially# install scripts dockerfile # ignore while pushing the code .dockerignore # list e...",
    "content": "First you need to install docker, docker-compose, docker-machine, on your system.We need following files initially# install scripts dockerfile # ignore while pushing the code .dockerignore # list env vars .env # run the processes, containers and apps docker-compose.ymlRun the services and processesdocker-compose upBuild dependenciesdocker-compose –build# to see container listdocker container ls# to see all the processesdocker ps# to stop all the processes, so instead of killing all the container and processes, later on you can restart againdocker-compose stop# website is the name of the service to run rails appdocker-compose run –rm website rake db:create db:migratedocker-compose run website rake db:migrate db:seed RAILS_ENV=productionenter into bash shellsudo docker run -i -t &lt;image/id&gt; /bin/bashforcefully remove imagedocker rmi 24a77bfbb9ee -fremove all the containersdocker rm $(docker ps -a -q)Note: If you don’t have Docker running on your local machine, you need to replace localhost in the above URL with the IP address of the machine Docker is running on. If you’re using Docker Machine, you can run below cmd to find out the IP.docker-machine ip “${DOCKER_MACHINE_NAME}”To run rails consoledocker-compose exec website rails console"
  },
  
  {
    "title": "Introduction - Ruby!",
    "url": "/posts/introduction-ruby/",
    "categories": "Ruby, Introduction",
    "tags": "ruby, introduction",
    "date": "2018-04-23 09:23:58 +0545",
    





    
    "snippet": "Ruby is a dynamic, open source, server-side scripting, interpreted, reflective, object-oriented, general purpose programming language. It was designed by Yukihiro Matsumato in Japan in the mid-1990...",
    "content": "Ruby is a dynamic, open source, server-side scripting, interpreted, reflective, object-oriented, general purpose programming language. It was designed by Yukihiro Matsumato in Japan in the mid-1990s.Features of Ruby  Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, and Lisp.  Ruby has an automatic  memory management and dynamic type system.  Ruby can run on multiple platforms such as the various versions of Windows, MAC OS and UNIX.  Ruby is free of charge but requires a liscence.  Ruby can be used to write Common Gateway Interface (CGI) scripts.  Ruby can be embedded into HTML.  Ruby written applications can be easily maintainable and scalable.  Ruby can be used for the development of Internet and Intranet applications.  Ruby supports many GUI tools such as Tcl/Tk, GTK, OpenGL.  Ruby can easily connect to DB2, MySQL, Oracle, Sybase.Compile Ruby programCreate a file hello_world.rb and write below code in it  #! /usr/bin/ruby  puts \"Hello World !!\";To run above code first go to the directory where hello_world.rb exists, then run the commandruby hello_world.rb# output isHello World !!In irb interactive command line mode you can run and test following code:&gt;&gt; puts \"Hello, world !!\"Hello, world !!=&gt; nil"
  },
  
  {
    "title": "Association in Ruby on Rails!",
    "url": "/posts/association-in-ruby-on-rails/",
    "categories": "Ruby on Rails, Association",
    "tags": "ruby on rails, association",
    "date": "2018-04-21 09:23:58 +0545",
    





    
    "snippet": "Ruby on Rails AssociationWhen column on database table grows, the column needs to be put into new table if the records emphasizes on data redundancy and data dependency and data normalization takes...",
    "content": "Ruby on Rails AssociationWhen column on database table grows, the column needs to be put into new table if the records emphasizes on data redundancy and data dependency and data normalization takes place. So, various tables are created which are linked or connected with one another via foreign keys. When connection takes place between two associated Active Record Models it is called as an Association.Various Types of Association  One-to-One  One-to-Many  Many-to-Many  Polymorphic One-to-ManyOne-to-OneIn this type of association, the data records contains one instance of another model.Model look like this:class User &lt; ApplicationRecord           class CitizenshipNumber &lt; ApplicationRecord    has_one :citizenship_number             belongs_to :user                        end                                      endTable look like this:  users                      profiles  -----                      ---------  id  (primary key)           id  username                    name  password                    user_id (foreign key)One-to-ManyIn this type of association, instance of first model can have zero or more than one instances of second model and second model belongs to only first model.Model look like this:class User &lt; ApplicationRecord         class Post &lt; ApplicationRecord    has_many :posts                       belongs_to :userend                                    endTable look like this:  users                      posts  -----                      ---------  id  (primary key)           id  username                    title  password                    user_id (foreign key)Many to ManyIt can be handled in two ways: has and belongs to many and has many through relationships.Has and belongs to manyIn this type of association, has_and_belongs_to_many methods is called from both the models in order to create many to many connection with another model. Rails migration need to be created in the following format in order to create join table.rails g migration CreateJoinTableUserPost user postwhich generates migration file like this:class CreateJoinTableUserPost &lt; ActiveRecord::Migration[5.0]  def change    create_join_table :users, :posts do |t|      t.index [:user_id, :post_id]    end  endendModel look like this:class User &lt; ApplicationRecord         class Post &lt; ApplicationRecord  has_and_belongs_to_many :posts         has_and_belongs_to_many :usersend                                    endTable look like this:  users                users_posts                posts  -----                -----------                ---------  id  (primary key)    id                         id  username             user_id (foreign key)      name  password             post_id (foreign key)      Has many throughIn this type of many-to-many association, unlike join intermediate table was created in has_and_belongs_to_many, but join intermediate model is created which points both the associated parent model.Model look like this:class User &lt; ApplicationRecord                class Post &lt; ApplicationRecord  has_many :posts, through: user_posts           has_many :users, through: user_posts  has_many :user_posts                           has_many :user_postsend                                           endclass UserPost &lt; ApplicationRecord    belongs_to :users    belongs_to :postsendTable look like this:  users                user_posts                 posts  -----                -----------                ---------  id  (primary key)    id                         id  username             user_id (foreign key)      name  password             post_id (foreign key)      Polymorphic One-to-ManyIn this type of association, one model is belongs to many different models on a single association. Let’s say Post has video, Article has Video, UserProfile has video, Blog has video. So all these models Post, Article, UserProfile, Blog needs to be handled by polymorphic interface called as Videoable.Model look like this:class Post &lt; ApplicationRecord         class Article &lt; ApplicationRecord  has_many :video, as: :videoable         has_many :video, as: :videoableend                                    endclass UserProfile &lt; ApplicationRecord  class Blog &lt; ApplicationRecord  has_many :video, as: :videoable         has_many :video, as: :videoableend                                    endclass Videoable &lt; ApplicationRecord    belongs_to :videoable, polymorphic: trueendGenerally polymorphic table needs type column (videoable_type: string) and foreign_key column (videoable_id: integer)Table look like this:  videos               Post      Article   Blog    UserProfile      -----                -----     -------   -----   -----------  id  (primary key)     id        id        id      id  videoable_id          title     title     title   full_name  videoable_type Migration:class CreateVideos &lt; ActiveRecord::Migration  def change    create_table :videos do |t|      t.integer :videoable_id      t.string :videoable_type      t.timestamps    end    add_index :videos, :videoable_id  endend# orclass CreateVideos &lt; ActiveRecord::Migration  def change    create_table :videos do |t|      t.references :videoable, polymorphic: true, index: true      t.timestamps    end  endend"
  },
  
  {
    "title": "Introduction - Ruby on Rails!",
    "url": "/posts/introduction-ruby-on-rails/",
    "categories": "Ruby on Rails, Introduction",
    "tags": "ruby on rails, introduction",
    "date": "2018-04-21 09:23:58 +0545",
    





    
    "snippet": "Rails is a server-side web application development framework written in the Ruby programming language. Ruby on Rails help developer to write small to large web applications quickly.Ruby on Rails is...",
    "content": "Rails is a server-side web application development framework written in the Ruby programming language. Ruby on Rails help developer to write small to large web applications quickly.Ruby on Rails is popular among other frameworks because:  Rails provides amazing tools like scaffolding, which helps in developing web applications in very less time.  Ruby on Rails is 100% free as it is open source framework.  It is based on MVC (Model-View-Controller) pattern which is popular among web developers.  RubyGems are the libraries which are available publicly and well documented.  Ruby is easy to learn.  Rails supports integrated testing.  Saves money and time.  Code can be easily maintained.  Huge number of helping communitiesThere are many biggest applications developed from Ruby on Rails like Github, ThemeForest, Groupon, Pixlr, Shopify, Airbnb, etcRails Design Principles:      MVC (Model, View, Controller)    MVC pattern splits an application into three modules a Model, View and Controller. There is “separation of the concerns” among Models, Views and Controllers as each parts has it’s own responsibility.    Model    Model is the layer which interact with the database to retrieve and store the data. You can define the classes in model layer which is used by the application. e.g: Article model is created when you want to develop article functionality. Model also maintains the relationship between the objects and the database and handles validation, association, transaction, etc.    Active Record is the Model in MVC which represents business logic. Business object can be created with the help of Active Record and those object carries persistent data.    View    View layer is the presentation layer which is used to return relevant HTML to be rendered on the users browser.ActionView is the View in Rails MVC which is a part of ActionPack library.    Controller    The controller interacts with the model to retrieve and store data. The retrived data from model will pass to the view. The view returns the resulting HTML to the controller and the controller send this back to the users browser.ActionController is the controller in MVC which handles browser request and acts as channel between Model and View. This is a part of ActionPack library.        DRY - Don’t Repeat Yourself    In this principle, developer have to reduce repetition of codes so that code should be more maintainable, more extensible, less buggy.        Convention over Configuration    This principle allows developer to use default logics and rules used by the framework so that application can be developed in very less time using very few lines of code.For example: rails g Article command will create an Article class and articles table unless developer configure another name. So this convention of framework configuration helps in Rapid application development.  Rails Web MVC Architecture"
  }
  
]

