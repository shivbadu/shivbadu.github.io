

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://shivrajbadu.com.np/</id>
  <title>Let's code</title>
  <subtitle>This blog provides you the articles about various topics on various programming language.</subtitle>
  <updated>2024-01-01T21:54:04+05:45</updated>
  <author>
    <name>Shivraj Badu</name>
    <uri>http://shivrajbadu.com.np/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://shivrajbadu.com.np/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://shivrajbadu.com.np/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2024 Shivraj Badu </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Unlocking Creativity: Prompt Engineering in Generative AI</title>
    <link href="http://shivrajbadu.com.np/posts/generative-ai-with-prompt-engineering/" rel="alternate" type="text/html" title="Unlocking Creativity: Prompt Engineering in Generative AI" />
    <published>2023-04-05T10:40:18+05:45</published>
  
    <updated>2024-01-01T21:53:50+05:45</updated>
  
    <id>http://shivrajbadu.com.np/posts/generative-ai-with-prompt-engineering/</id>
    <content src="http://shivrajbadu.com.np/posts/generative-ai-with-prompt-engineering/" />
    <author>
      <name>Shivraj Badu</name>
    </author>

  
    
    <category term="Artificial Intelligence (AI)" />
    
    <category term="Prompt Engineering" />
    
    <category term="ChatGPT" />
    
  

  
    <summary>
      





      Unlocking Creativity: Prompt Engineering in Generative AI

In the ever-evolving landscape of Generative AI, one concept has taken center stage, becoming a catalyst for creativity and innovation—Prompt Engineering. This technique, akin to providing a well-crafted instruction to a creative assistant, has proven to be a powerful tool in harnessing the potential of models like ChatGPT (Utilizes Ope...
    </summary>
  

  </entry>

  
  <entry>
    <title>What is Artificial Intelligence</title>
    <link href="http://shivrajbadu.com.np/posts/what-is-artificial-intelligence/" rel="alternate" type="text/html" title="What is Artificial Intelligence" />
    <published>2023-01-04T12:00:10+05:45</published>
  
    <updated>2024-01-01T21:53:50+05:45</updated>
  
    <id>http://shivrajbadu.com.np/posts/what-is-artificial-intelligence/</id>
    <content src="http://shivrajbadu.com.np/posts/what-is-artificial-intelligence/" />
    <author>
      <name>Shivraj Badu</name>
    </author>

  
    
    <category term="Artificial Intelligence (AI)" />
    
  

  
    <summary>
      





      AI, or Artificial Intelligence, refers to the development of computer systems that can perform tasks that typically require human intelligence. These tasks include learning, reasoning, problem-solving, perception, natural language understanding, and even the ability to interact with the environment. The goal of AI is to create machines that can mimic cognitive functions associated with human mi...
    </summary>
  

  </entry>

  
  <entry>
    <title>Ruby find_all vs. select</title>
    <link href="http://shivrajbadu.com.np/posts/ruby-find-all-vs-select/" rel="alternate" type="text/html" title="Ruby find_all vs. select" />
    <published>2022-08-15T10:40:18+05:45</published>
  
    <updated>2024-01-01T21:53:50+05:45</updated>
  
    <id>http://shivrajbadu.com.np/posts/ruby-find-all-vs-select/</id>
    <content src="http://shivrajbadu.com.np/posts/ruby-find-all-vs-select/" />
    <author>
      <name>Shivraj Badu</name>
    </author>

  
    
    <category term="Ruby" />
    
    <category term="select vs. find_all" />
    
  

  
    <summary>
      





      About find_all vs. select Ruby method

find_all or select returns an array which contains all elements of enum for which the given block returns a true value, and, if no block is given, an Enumerator is returned.

Here are some examples:

arr = 1..8 
h = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}


arr.select{|x| x.even?} # =&amp;gt; [2, 4, 6, 8]
a.find_all{|x| x.even?} # =&amp;gt; [2, 4, 6, 8]

...
    </summary>
  

  </entry>

  
  <entry>
    <title>Webpacker in Rails6</title>
    <link href="http://shivrajbadu.com.np/posts/rails6-webpacker/" rel="alternate" type="text/html" title="Webpacker in Rails6" />
    <published>2020-06-05T01:45:18+05:45</published>
  
    <updated>2024-01-01T21:53:50+05:45</updated>
  
    <id>http://shivrajbadu.com.np/posts/rails6-webpacker/</id>
    <content src="http://shivrajbadu.com.np/posts/rails6-webpacker/" />
    <author>
      <name>Shivraj Badu</name>
    </author>

  
    
    <category term="Ruby on Rails" />
    
    <category term="Webpacker" />
    
  

  
    <summary>
      





      Webpacker


  Webpacker is the JavaScript compiler which compiles the JavaScript code.
  Prior to Rails6, JS code were inside app/assets/javascripts
  In Rails6, no app/assets/javascripts and have new dir app/javascript to load all the js files which has channels &amp;amp; packs and all Javascript components like Turbolinks, ActiveStorage, Rails-UJS, ActionCable support Webpacker.
  Other dir chann...
    </summary>
  

  </entry>

  
  <entry>
    <title>Elastic Search with Chewy</title>
    <link href="http://shivrajbadu.com.np/posts/elastic-search-with-chewy/" rel="alternate" type="text/html" title="Elastic Search with Chewy" />
    <published>2019-10-25T07:01:18+05:45</published>
  
    <updated>2024-01-01T21:53:50+05:45</updated>
  
    <id>http://shivrajbadu.com.np/posts/elastic-search-with-chewy/</id>
    <content src="http://shivrajbadu.com.np/posts/elastic-search-with-chewy/" />
    <author>
      <name>Shivraj Badu</name>
    </author>

  
    
    <category term="Ruby on Rails" />
    
    <category term="Elastic search Chewy" />
    
  

  
    <summary>
      





      Chewy is one of the elastic search Ruby client.

Chewy usages:


  
    Multi-model indices
You can define several types for index one per indexed model.
  
  
    Every index is observable by all the related models.
Most of the indexed models are related to other and it is necessary to denormalize this related data and put at the same object. Chewy is useful for example when we need index for ...
    </summary>
  

  </entry>

</feed>


